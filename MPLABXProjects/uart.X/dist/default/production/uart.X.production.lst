

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sat Nov 16 19:17:33 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0x7E,2
    14     0000                     
    15                           ; Generated 12/10/2023 GMT
    16                           ; 
    17                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution. Publication is not required when
    31                           ;        this file is used in an embedded application.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F877A Definitions
    47                           ; 
    48                           ; SFR Addresses
    49     0004                     fsr             equ	4
    50     0004                     fsr0            equ	4
    51     0000                     indf            equ	0
    52     0000                     indf0           equ	0
    53     0002                     pc              equ	2
    54     0002                     pcl             equ	2
    55     000A                     pclath          equ	10
    56     0003                     status          equ	3
    57     0000                     INDF            equ	0	;# 
    58     0001                     TMR0            equ	1	;# 
    59     0002                     PCL             equ	2	;# 
    60     0003                     STATUS          equ	3	;# 
    61     0004                     FSR             equ	4	;# 
    62     0005                     PORTA           equ	5	;# 
    63     0006                     PORTB           equ	6	;# 
    64     0007                     PORTC           equ	7	;# 
    65     0008                     PORTD           equ	8	;# 
    66     0009                     PORTE           equ	9	;# 
    67     000A                     PCLATH          equ	10	;# 
    68     000B                     INTCON          equ	11	;# 
    69     000C                     PIR1            equ	12	;# 
    70     000D                     PIR2            equ	13	;# 
    71     000E                     TMR1            equ	14	;# 
    72     000E                     TMR1L           equ	14	;# 
    73     000F                     TMR1H           equ	15	;# 
    74     0010                     T1CON           equ	16	;# 
    75     0011                     TMR2            equ	17	;# 
    76     0012                     T2CON           equ	18	;# 
    77     0013                     SSPBUF          equ	19	;# 
    78     0014                     SSPCON          equ	20	;# 
    79     0015                     CCPR1           equ	21	;# 
    80     0015                     CCPR1L          equ	21	;# 
    81     0016                     CCPR1H          equ	22	;# 
    82     0017                     CCP1CON         equ	23	;# 
    83     0018                     RCSTA           equ	24	;# 
    84     0019                     TXREG           equ	25	;# 
    85     001A                     RCREG           equ	26	;# 
    86     001B                     CCPR2           equ	27	;# 
    87     001B                     CCPR2L          equ	27	;# 
    88     001C                     CCPR2H          equ	28	;# 
    89     001D                     CCP2CON         equ	29	;# 
    90     001E                     ADRESH          equ	30	;# 
    91     001F                     ADCON0          equ	31	;# 
    92     0081                     OPTION_REG      equ	129	;# 
    93     0085                     TRISA           equ	133	;# 
    94     0086                     TRISB           equ	134	;# 
    95     0087                     TRISC           equ	135	;# 
    96     0088                     TRISD           equ	136	;# 
    97     0089                     TRISE           equ	137	;# 
    98     008C                     PIE1            equ	140	;# 
    99     008D                     PIE2            equ	141	;# 
   100     008E                     PCON            equ	142	;# 
   101     0091                     SSPCON2         equ	145	;# 
   102     0092                     PR2             equ	146	;# 
   103     0093                     SSPADD          equ	147	;# 
   104     0094                     SSPSTAT         equ	148	;# 
   105     0098                     TXSTA           equ	152	;# 
   106     0099                     SPBRG           equ	153	;# 
   107     009C                     CMCON           equ	156	;# 
   108     009D                     CVRCON          equ	157	;# 
   109     009E                     ADRESL          equ	158	;# 
   110     009F                     ADCON1          equ	159	;# 
   111     010C                     EEDATA          equ	268	;# 
   112     010D                     EEADR           equ	269	;# 
   113     010E                     EEDATH          equ	270	;# 
   114     010F                     EEADRH          equ	271	;# 
   115     018C                     EECON1          equ	396	;# 
   116     018D                     EECON2          equ	397	;# 
   117     0000                     INDF            equ	0	;# 
   118     0001                     TMR0            equ	1	;# 
   119     0002                     PCL             equ	2	;# 
   120     0003                     STATUS          equ	3	;# 
   121     0004                     FSR             equ	4	;# 
   122     0005                     PORTA           equ	5	;# 
   123     0006                     PORTB           equ	6	;# 
   124     0007                     PORTC           equ	7	;# 
   125     0008                     PORTD           equ	8	;# 
   126     0009                     PORTE           equ	9	;# 
   127     000A                     PCLATH          equ	10	;# 
   128     000B                     INTCON          equ	11	;# 
   129     000C                     PIR1            equ	12	;# 
   130     000D                     PIR2            equ	13	;# 
   131     000E                     TMR1            equ	14	;# 
   132     000E                     TMR1L           equ	14	;# 
   133     000F                     TMR1H           equ	15	;# 
   134     0010                     T1CON           equ	16	;# 
   135     0011                     TMR2            equ	17	;# 
   136     0012                     T2CON           equ	18	;# 
   137     0013                     SSPBUF          equ	19	;# 
   138     0014                     SSPCON          equ	20	;# 
   139     0015                     CCPR1           equ	21	;# 
   140     0015                     CCPR1L          equ	21	;# 
   141     0016                     CCPR1H          equ	22	;# 
   142     0017                     CCP1CON         equ	23	;# 
   143     0018                     RCSTA           equ	24	;# 
   144     0019                     TXREG           equ	25	;# 
   145     001A                     RCREG           equ	26	;# 
   146     001B                     CCPR2           equ	27	;# 
   147     001B                     CCPR2L          equ	27	;# 
   148     001C                     CCPR2H          equ	28	;# 
   149     001D                     CCP2CON         equ	29	;# 
   150     001E                     ADRESH          equ	30	;# 
   151     001F                     ADCON0          equ	31	;# 
   152     0081                     OPTION_REG      equ	129	;# 
   153     0085                     TRISA           equ	133	;# 
   154     0086                     TRISB           equ	134	;# 
   155     0087                     TRISC           equ	135	;# 
   156     0088                     TRISD           equ	136	;# 
   157     0089                     TRISE           equ	137	;# 
   158     008C                     PIE1            equ	140	;# 
   159     008D                     PIE2            equ	141	;# 
   160     008E                     PCON            equ	142	;# 
   161     0091                     SSPCON2         equ	145	;# 
   162     0092                     PR2             equ	146	;# 
   163     0093                     SSPADD          equ	147	;# 
   164     0094                     SSPSTAT         equ	148	;# 
   165     0098                     TXSTA           equ	152	;# 
   166     0099                     SPBRG           equ	153	;# 
   167     009C                     CMCON           equ	156	;# 
   168     009D                     CVRCON          equ	157	;# 
   169     009E                     ADRESL          equ	158	;# 
   170     009F                     ADCON1          equ	159	;# 
   171     010C                     EEDATA          equ	268	;# 
   172     010D                     EEADR           equ	269	;# 
   173     010E                     EEDATH          equ	270	;# 
   174     010F                     EEADRH          equ	271	;# 
   175     018C                     EECON1          equ	396	;# 
   176     018D                     EECON2          equ	397	;# 
   177     001A                     _RCREG          set	26
   178     0019                     _TXREG          set	25
   179     0018                     _RCSTA          set	24
   180     0065                     _RCIF           set	101
   181     0064                     _TXIF           set	100
   182     0099                     _SPBRG          set	153
   183     0098                     _TXSTA          set	152
   184     0087                     _TRISCbits      set	135
   185                           
   186                           	psect	strings
   187     0003                     __pstrings:
   188     0003                     stringtab:
   189     0003                     __stringtab:
   190     0003                     stringcode:	
   191                           ;	String table - string pointers are 1 byte each
   192                           
   193     0003                     stringdir:
   194     0003  3000               	movlw	high stringdir
   195     0004  008A               	movwf	10
   196     0005  0804               	movf	4,w
   197     0006  0A84               	incf	4,f
   198     0007  0782               	addwf	2,f
   199     0008                     __stringbase:
   200     0008  3400               	retlw	0
   201     0009                     __end_of__stringtab:
   202     0009                     STR_1:
   203     0009  3445               	retlw	69	;'E'
   204     000A  346E               	retlw	110	;'n'
   205     000B  3474               	retlw	116	;'t'
   206     000C  3465               	retlw	101	;'e'
   207     000D  3472               	retlw	114	;'r'
   208     000E  3420               	retlw	32	;' '
   209     000F  3474               	retlw	116	;'t'
   210     0010  3468               	retlw	104	;'h'
   211     0011  3465               	retlw	101	;'e'
   212     0012  3420               	retlw	32	;' '
   213     0013  3473               	retlw	115	;'s'
   214     0014  3474               	retlw	116	;'t'
   215     0015  3472               	retlw	114	;'r'
   216     0016  3469               	retlw	105	;'i'
   217     0017  346E               	retlw	110	;'n'
   218     0018  3467               	retlw	103	;'g'
   219     0019  343A               	retlw	58	;':'
   220     001A  340A               	retlw	10
   221     001B  340D               	retlw	13
   222     001C  340D               	retlw	13
   223     001D  3400               	retlw	0
   224                           
   225                           	psect	cinit
   226     07FC                     start_initialization:	
   227                           ; #config settings
   228                           
   229     07FC                     __initialization:
   230     07FC                     end_of_initialization:	
   231                           ;End of C runtime variable initialization code
   232                           
   233     07FC                     __end_of__initialization:
   234     07FC  0183               	clrf	3
   235     07FD  120A  118A  2FDE   	ljmp	_main	;jump to C main() function
   236                           
   237                           	psect	cstackCOMMON
   238     0070                     __pcstackCOMMON:
   239     0070                     ?_ser_int:
   240     0070                     ?_tx:	
   241                           ; 1 bytes @ 0x0
   242                           
   243     0070                     ?_rx:	
   244                           ; 1 bytes @ 0x0
   245                           
   246     0070                     ?_main:	
   247                           ; 1 bytes @ 0x0
   248                           
   249     0070                     tx@a:	
   250                           ; 1 bytes @ 0x0
   251                           
   252     0070                     ??_ser_int:	
   253                           ; 1 bytes @ 0x0
   254                           
   255     0070                     ??_tx:	
   256                           ; 1 bytes @ 0x0
   257                           
   258     0070                     ??_rx:	
   259                           ; 1 bytes @ 0x0
   260                           
   261                           
   262                           ; 1 bytes @ 0x0
   263     0070                     	ds	1
   264     0071                     ?_txstr:
   265     0071                     txstr@a:	
   266                           ; 1 bytes @ 0x1
   267                           
   268                           
   269                           ; 1 bytes @ 0x1
   270     0071                     	ds	1
   271     0072                     ??_txstr:
   272     0072                     ??_main:	
   273                           ; 1 bytes @ 0x2
   274                           
   275                           
   276                           	psect	maintext
   277     07DE                     __pmaintext:	
   278                           ; 1 bytes @ 0x2
   279 ;;
   280 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   281 ;;
   282 ;; *************** function _main *****************
   283 ;; Defined at:
   284 ;;		line 19 in file "main.c"
   285 ;; Parameters:    Size  Location     Type
   286 ;;		None
   287 ;; Auto vars:     Size  Location     Type
   288 ;;		None
   289 ;; Return value:  Size  Location     Type
   290 ;;                  1    wreg      void 
   291 ;; Registers used:
   292 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   293 ;; Tracked objects:
   294 ;;		On entry : B00/0
   295 ;;		On exit  : 0/0
   296 ;;		Unchanged: 0/0
   297 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   298 ;;      Params:         0       0       0       0       0
   299 ;;      Locals:         0       0       0       0       0
   300 ;;      Temps:          0       0       0       0       0
   301 ;;      Totals:         0       0       0       0       0
   302 ;;Total ram usage:        0 bytes
   303 ;; Hardware stack levels required when called: 2
   304 ;; This function calls:
   305 ;;		_rx
   306 ;;		_ser_int
   307 ;;		_tx
   308 ;;		_txstr
   309 ;; This function is called by:
   310 ;;		Startup code after reset
   311 ;; This function uses a non-reentrant model
   312 ;;
   313                           
   314     07DE                     _main:	
   315                           ;psect for function _main
   316                           
   317     07DE                     l633:	
   318                           ;incstack = 0
   319                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   320                           
   321                           
   322                           ;main.c: 20:     TRISCbits.TRISC7 = 1;
   323     07DE  1683               	bsf	3,5	;RP0=1, select bank1
   324     07DF  1303               	bcf	3,6	;RP1=0, select bank1
   325     07E0  1787               	bsf	7,7	;volatile
   326                           
   327                           ;main.c: 21:     TRISCbits.TRISC6 = 0;
   328     07E1  1307               	bcf	7,6	;volatile
   329     07E2                     l635:
   330                           
   331                           ;main.c: 22:     ser_int();
   332     07E2  120A  118A  27B5  120A  118A  	fcall	_ser_int
   333     07E7                     l637:
   334                           
   335                           ;main.c: 23:     txstr("Enter the string:\n\r\r");
   336     07E7  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   337     07E8  00F1               	movwf	txstr@a
   338     07E9  120A  118A  27C2  120A  118A  	fcall	_txstr
   339     07EE                     l639:
   340                           
   341                           ;main.c: 25:         tx(rx());
   342     07EE  120A  118A  27A3  120A  118A  	fcall	_rx
   343     07F3  120A  118A  27AB  120A  118A  	fcall	_tx
   344     07F8  2FEE               	goto	l639
   345     07F9  120A  118A  2800   	ljmp	start
   346     07FC                     __end_of_main:
   347                           
   348                           	psect	text1
   349     07C2                     __ptext1:	
   350 ;; *************** function _txstr *****************
   351 ;; Defined at:
   352 ;;		line 48 in file "main.c"
   353 ;; Parameters:    Size  Location     Type
   354 ;;  a               1    1[COMMON] PTR unsigned char 
   355 ;;		 -> STR_1(21), 
   356 ;; Auto vars:     Size  Location     Type
   357 ;;		None
   358 ;; Return value:  Size  Location     Type
   359 ;;                  1    wreg      void 
   360 ;; Registers used:
   361 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   362 ;; Tracked objects:
   363 ;;		On entry : 0/0
   364 ;;		On exit  : 0/0
   365 ;;		Unchanged: 0/0
   366 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   367 ;;      Params:         1       0       0       0       0
   368 ;;      Locals:         0       0       0       0       0
   369 ;;      Temps:          0       0       0       0       0
   370 ;;      Totals:         1       0       0       0       0
   371 ;;Total ram usage:        1 bytes
   372 ;; Hardware stack levels used: 1
   373 ;; Hardware stack levels required when called: 1
   374 ;; This function calls:
   375 ;;		_tx
   376 ;; This function is called by:
   377 ;;		_main
   378 ;; This function uses a non-reentrant model
   379 ;;
   380                           
   381     07C2                     _txstr:	
   382                           ;psect for function _txstr
   383                           
   384     07C2                     l625:	
   385                           ;incstack = 0
   386                           ; Regs used in _txstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   387                           
   388                           
   389                           ;main.c: 49:     while(*a){
   390     07C2  2FD1               	goto	l631
   391     07C3                     l627:
   392                           
   393                           ;main.c: 50:         tx(*a++);
   394     07C3  0871               	movf	txstr@a,w
   395     07C4  0084               	movwf	4
   396     07C5  120A  118A  2003  120A  118A  	fcall	stringdir
   397     07CA  120A  118A  27AB  120A  118A  	fcall	_tx
   398     07CF                     l629:
   399     07CF  3001               	movlw	1
   400     07D0  07F1               	addwf	txstr@a,f
   401     07D1                     l631:
   402                           
   403                           ;main.c: 49:     while(*a){
   404     07D1  0871               	movf	txstr@a,w
   405     07D2  0084               	movwf	4
   406     07D3  120A  118A  2003  120A  118A  	fcall	stringdir
   407     07D8  3A00               	xorlw	0
   408     07D9  1D03               	skipz
   409     07DA  2FDC               	goto	u41
   410     07DB  2FDD               	goto	u40
   411     07DC                     u41:
   412     07DC  2FC3               	goto	l627
   413     07DD                     u40:
   414     07DD                     l53:
   415     07DD  0008               	return
   416     07DE                     __end_of_txstr:
   417                           
   418                           	psect	text2
   419     07AB                     __ptext2:	
   420 ;; *************** function _tx *****************
   421 ;; Defined at:
   422 ;;		line 37 in file "main.c"
   423 ;; Parameters:    Size  Location     Type
   424 ;;  a               1    wreg     unsigned char 
   425 ;; Auto vars:     Size  Location     Type
   426 ;;  a               1    0[COMMON] unsigned char 
   427 ;; Return value:  Size  Location     Type
   428 ;;                  1    wreg      void 
   429 ;; Registers used:
   430 ;;		wreg
   431 ;; Tracked objects:
   432 ;;		On entry : 0/0
   433 ;;		On exit  : 0/0
   434 ;;		Unchanged: 0/0
   435 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   436 ;;      Params:         0       0       0       0       0
   437 ;;      Locals:         1       0       0       0       0
   438 ;;      Temps:          0       0       0       0       0
   439 ;;      Totals:         1       0       0       0       0
   440 ;;Total ram usage:        1 bytes
   441 ;; Hardware stack levels used: 1
   442 ;; This function calls:
   443 ;;		Nothing
   444 ;; This function is called by:
   445 ;;		_main
   446 ;;		_txstr
   447 ;; This function uses a non-reentrant model
   448 ;;
   449                           
   450     07AB                     _tx:	
   451                           ;psect for function _tx
   452                           
   453                           
   454                           ;incstack = 0
   455                           ; Regs used in _tx: [wreg]
   456                           ;tx@a stored from wreg
   457     07AB  00F0               	movwf	tx@a
   458     07AC                     l597:
   459     07AC                     l38:	
   460                           ;main.c: 39:     while(!TXIF);
   461                           
   462     07AC  1283               	bcf	3,5	;RP0=0, select bank0
   463     07AD  1303               	bcf	3,6	;RP1=0, select bank0
   464     07AE  1E0C               	btfss	12,4	;volatile
   465     07AF  2FB1               	goto	u11
   466     07B0  2FB2               	goto	u10
   467     07B1                     u11:
   468     07B1  2FAC               	goto	l38
   469     07B2                     u10:
   470     07B2                     l599:
   471                           
   472                           ;main.c: 40:     TXREG = a;
   473     07B2  0870               	movf	tx@a,w
   474     07B3  0099               	movwf	25	;volatile
   475     07B4                     l41:
   476     07B4  0008               	return
   477     07B5                     __end_of_tx:
   478                           
   479                           	psect	text3
   480     07B5                     __ptext3:	
   481 ;; *************** function _ser_int *****************
   482 ;; Defined at:
   483 ;;		line 30 in file "main.c"
   484 ;; Parameters:    Size  Location     Type
   485 ;;		None
   486 ;; Auto vars:     Size  Location     Type
   487 ;;		None
   488 ;; Return value:  Size  Location     Type
   489 ;;                  1    wreg      void 
   490 ;; Registers used:
   491 ;;		None
   492 ;; Tracked objects:
   493 ;;		On entry : 0/0
   494 ;;		On exit  : 0/0
   495 ;;		Unchanged: 0/0
   496 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   497 ;;      Params:         0       0       0       0       0
   498 ;;      Locals:         0       0       0       0       0
   499 ;;      Temps:          0       0       0       0       0
   500 ;;      Totals:         0       0       0       0       0
   501 ;;Total ram usage:        0 bytes
   502 ;; Hardware stack levels used: 1
   503 ;; This function calls:
   504 ;;		Nothing
   505 ;; This function is called by:
   506 ;;		_main
   507 ;; This function uses a non-reentrant model
   508 ;;
   509                           
   510     07B5                     _ser_int:	
   511                           ;psect for function _ser_int
   512                           
   513     07B5                     l601:	
   514                           ;incstack = 0
   515                           ; Regs used in _ser_int: []
   516                           
   517                           
   518                           ;main.c: 31:     TXSTA = 0x20;
   519     07B5  3020               	movlw	32
   520     07B6  1683               	bsf	3,5	;RP0=1, select bank1
   521     07B7  1303               	bcf	3,6	;RP1=0, select bank1
   522     07B8  0098               	movwf	24	;volatile
   523                           
   524                           ;main.c: 32:     RCSTA = 0x90;
   525     07B9  3090               	movlw	144
   526     07BA  1283               	bcf	3,5	;RP0=0, select bank0
   527     07BB  1303               	bcf	3,6	;RP1=0, select bank0
   528     07BC  0098               	movwf	24	;volatile
   529                           
   530                           ;main.c: 33:     SPBRG = 31;
   531     07BD  301F               	movlw	31
   532     07BE  1683               	bsf	3,5	;RP0=1, select bank1
   533     07BF  1303               	bcf	3,6	;RP1=0, select bank1
   534     07C0  0099               	movwf	25	;volatile
   535     07C1                     l35:
   536     07C1  0008               	return
   537     07C2                     __end_of_ser_int:
   538                           
   539                           	psect	text4
   540     07A3                     __ptext4:	
   541 ;; *************** function _rx *****************
   542 ;; Defined at:
   543 ;;		line 43 in file "main.c"
   544 ;; Parameters:    Size  Location     Type
   545 ;;		None
   546 ;; Auto vars:     Size  Location     Type
   547 ;;		None
   548 ;; Return value:  Size  Location     Type
   549 ;;                  1    wreg      unsigned char 
   550 ;; Registers used:
   551 ;;		wreg
   552 ;; Tracked objects:
   553 ;;		On entry : 0/0
   554 ;;		On exit  : 0/0
   555 ;;		Unchanged: 0/0
   556 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   557 ;;      Params:         0       0       0       0       0
   558 ;;      Locals:         0       0       0       0       0
   559 ;;      Temps:          0       0       0       0       0
   560 ;;      Totals:         0       0       0       0       0
   561 ;;Total ram usage:        0 bytes
   562 ;; Hardware stack levels used: 1
   563 ;; This function calls:
   564 ;;		Nothing
   565 ;; This function is called by:
   566 ;;		_main
   567 ;; This function uses a non-reentrant model
   568 ;;
   569                           
   570     07A3                     _rx:	
   571                           ;psect for function _rx
   572                           
   573     07A3                     l611:	
   574                           ;incstack = 0
   575                           ; Regs used in _rx: [wreg]
   576                           
   577     07A3                     l44:	
   578                           ;main.c: 44:     while(!RCIF);
   579                           
   580     07A3  1283               	bcf	3,5	;RP0=0, select bank0
   581     07A4  1303               	bcf	3,6	;RP1=0, select bank0
   582     07A5  1E8C               	btfss	12,5	;volatile
   583     07A6  2FA8               	goto	u31
   584     07A7  2FA9               	goto	u30
   585     07A8                     u31:
   586     07A8  2FA3               	goto	l44
   587     07A9                     u30:
   588     07A9                     l613:
   589                           
   590                           ;main.c: 45:     return RCREG;
   591     07A9  081A               	movf	26,w	;volatile
   592     07AA                     l47:
   593     07AA  0008               	return
   594     07AB                     __end_of_rx:
   595     0002                     ___latbits      equ	2
   596     007E                     btemp           set	126	;btemp
   597     007E                     wtemp0          set	126
   598                           
   599                           	psect	config
   600                           
   601                           ;Config register CONFIG @ 0x2007
   602                           ;	Oscillator Selection bits
   603                           ;	FOSC = HS, HS oscillator
   604                           ;	Watchdog Timer Enable bit
   605                           ;	WDTE = OFF, WDT disabled
   606                           ;	Power-up Timer Enable bit
   607                           ;	PWRTE = OFF, PWRT disabled
   608                           ;	Brown-out Reset Enable bit
   609                           ;	BOREN = ON, BOR enabled
   610                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   611                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   612                           ;	Data EEPROM Memory Code Protection bit
   613                           ;	CPD = OFF, Data EEPROM code protection off
   614                           ;	Flash Program Memory Write Enable bits
   615                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   616                           ;	In-Circuit Debugger Mode bit
   617                           ;	DEBUG = OFF, In-Circuit Debugger disabled, RB6 and RB7 are general purpose I/O pins
   618                           ;	Flash Program Memory Code Protection bit
   619                           ;	CP = OFF, Code protection off
   620     2007                     	org	8199
   621     2007  3F7A               	dw	16250

Data Sizes:
    Strings     21
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      2       2
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    txstr@a	PTR unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[21]), 


Critical Paths under _main in COMMON

    _main->_txstr
    _txstr->_tx

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      76
                                 _rx
                            _ser_int
                                 _tx
                              _txstr
 ---------------------------------------------------------------------------------
 (1) _txstr                                                1     0      1      61
                                              1 COMMON     1     0      1
                                 _tx
 ---------------------------------------------------------------------------------
 (2) _tx                                                   1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rx                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _rx
   _ser_int
   _tx
   _txstr
     _tx

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14      2       2     14.3%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       2      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sat Nov 16 19:17:33 2024

                      pc 0002                       l41 07B4                       l35 07C1  
                     l44 07A3                       l53 07DD                       l38 07AC  
                     l47 07AA                       u10 07B2                       u11 07B1  
                     u30 07A9                       u31 07A8                       u40 07DD  
                     u41 07DC                       _rx 07A3                       _tx 07AB  
                     fsr 0004                      l601 07B5                      l611 07A3  
                    l613 07A9                      l631 07D1                      ?_rx 0070  
                    l625 07C2                      l633 07DE                      l627 07C3  
                    l635 07E2                      ?_tx 0070                      l629 07CF  
                    l637 07E7                      l639 07EE                      l597 07AC  
                    l599 07B2                      fsr0 0004                      tx@a 0070  
                   ??_rx 0070                     ??_tx 0070                     STR_1 0009  
                   _RCIF 0065                     _TXIF 0064                     _main 07DE  
                   btemp 007E                     start 0000                    ?_main 0070  
                  _RCREG 001A                    _RCSTA 0018                    _SPBRG 0099  
                  _TXREG 0019                    _TXSTA 0098                    _txstr 07C2  
        __end_of_ser_int 07C2                    pclath 000A                    status 0003  
                  wtemp0 007E          __initialization 07FC             __end_of_main 07FC  
                 ??_main 0072                   ?_txstr 0071                ??_ser_int 0070  
                 txstr@a 0071  __end_of__initialization 07FC           __pcstackCOMMON 0070  
          __end_of_txstr 07DE               __end_of_rx 07AB               __end_of_tx 07B5  
                ??_txstr 0072               __pmaintext 07DE               __stringtab 0003  
                __ptext1 07C2                  __ptext2 07AB                  __ptext3 07B5  
                __ptext4 07A3                  _ser_int 07B5     end_of_initialization 07FC  
              _TRISCbits 0087      start_initialization 07FC                ___latbits 0002  
              __pstrings 0003                 ?_ser_int 0070              __stringbase 0008  
     __end_of__stringtab 0009                stringcode 0003                 stringdir 0003  
               stringtab 0003  
