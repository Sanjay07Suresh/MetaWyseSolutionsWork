

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Sat Nov 16 18:55:52 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2
    12                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    13                           	dabs	1,0x7E,2
    14     0000                     
    15                           ; Generated 12/10/2023 GMT
    16                           ; 
    17                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    18                           ; All rights reserved.
    19                           ; 
    20                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    21                           ; 
    22                           ; Redistribution and use in source and binary forms, with or without modification, are
    23                           ; permitted provided that the following conditions are met:
    24                           ; 
    25                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    26                           ;        conditions and the following disclaimer.
    27                           ; 
    28                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    29                           ;        of conditions and the following disclaimer in the documentation and/or other
    30                           ;        materials provided with the distribution. Publication is not required when
    31                           ;        this file is used in an embedded application.
    32                           ; 
    33                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    34                           ;        software without specific prior written permission.
    35                           ; 
    36                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    37                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    38                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    39                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    40                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    41                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    42                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    43                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    44                           ; 
    45                           ; 
    46                           ; Code-generator required, PIC16F877A Definitions
    47                           ; 
    48                           ; SFR Addresses
    49     0004                     fsr             equ	4
    50     0004                     fsr0            equ	4
    51     0000                     indf            equ	0
    52     0000                     indf0           equ	0
    53     0002                     pc              equ	2
    54     0002                     pcl             equ	2
    55     000A                     pclath          equ	10
    56     0003                     status          equ	3
    57     0000                     INDF            equ	0	;# 
    58     0001                     TMR0            equ	1	;# 
    59     0002                     PCL             equ	2	;# 
    60     0003                     STATUS          equ	3	;# 
    61     0004                     FSR             equ	4	;# 
    62     0005                     PORTA           equ	5	;# 
    63     0006                     PORTB           equ	6	;# 
    64     0007                     PORTC           equ	7	;# 
    65     0008                     PORTD           equ	8	;# 
    66     0009                     PORTE           equ	9	;# 
    67     000A                     PCLATH          equ	10	;# 
    68     000B                     INTCON          equ	11	;# 
    69     000C                     PIR1            equ	12	;# 
    70     000D                     PIR2            equ	13	;# 
    71     000E                     TMR1            equ	14	;# 
    72     000E                     TMR1L           equ	14	;# 
    73     000F                     TMR1H           equ	15	;# 
    74     0010                     T1CON           equ	16	;# 
    75     0011                     TMR2            equ	17	;# 
    76     0012                     T2CON           equ	18	;# 
    77     0013                     SSPBUF          equ	19	;# 
    78     0014                     SSPCON          equ	20	;# 
    79     0015                     CCPR1           equ	21	;# 
    80     0015                     CCPR1L          equ	21	;# 
    81     0016                     CCPR1H          equ	22	;# 
    82     0017                     CCP1CON         equ	23	;# 
    83     0018                     RCSTA           equ	24	;# 
    84     0019                     TXREG           equ	25	;# 
    85     001A                     RCREG           equ	26	;# 
    86     001B                     CCPR2           equ	27	;# 
    87     001B                     CCPR2L          equ	27	;# 
    88     001C                     CCPR2H          equ	28	;# 
    89     001D                     CCP2CON         equ	29	;# 
    90     001E                     ADRESH          equ	30	;# 
    91     001F                     ADCON0          equ	31	;# 
    92     0081                     OPTION_REG      equ	129	;# 
    93     0085                     TRISA           equ	133	;# 
    94     0086                     TRISB           equ	134	;# 
    95     0087                     TRISC           equ	135	;# 
    96     0088                     TRISD           equ	136	;# 
    97     0089                     TRISE           equ	137	;# 
    98     008C                     PIE1            equ	140	;# 
    99     008D                     PIE2            equ	141	;# 
   100     008E                     PCON            equ	142	;# 
   101     0091                     SSPCON2         equ	145	;# 
   102     0092                     PR2             equ	146	;# 
   103     0093                     SSPADD          equ	147	;# 
   104     0094                     SSPSTAT         equ	148	;# 
   105     0098                     TXSTA           equ	152	;# 
   106     0099                     SPBRG           equ	153	;# 
   107     009C                     CMCON           equ	156	;# 
   108     009D                     CVRCON          equ	157	;# 
   109     009E                     ADRESL          equ	158	;# 
   110     009F                     ADCON1          equ	159	;# 
   111     010C                     EEDATA          equ	268	;# 
   112     010D                     EEADR           equ	269	;# 
   113     010E                     EEDATH          equ	270	;# 
   114     010F                     EEADRH          equ	271	;# 
   115     018C                     EECON1          equ	396	;# 
   116     018D                     EECON2          equ	397	;# 
   117     0000                     INDF            equ	0	;# 
   118     0001                     TMR0            equ	1	;# 
   119     0002                     PCL             equ	2	;# 
   120     0003                     STATUS          equ	3	;# 
   121     0004                     FSR             equ	4	;# 
   122     0005                     PORTA           equ	5	;# 
   123     0006                     PORTB           equ	6	;# 
   124     0007                     PORTC           equ	7	;# 
   125     0008                     PORTD           equ	8	;# 
   126     0009                     PORTE           equ	9	;# 
   127     000A                     PCLATH          equ	10	;# 
   128     000B                     INTCON          equ	11	;# 
   129     000C                     PIR1            equ	12	;# 
   130     000D                     PIR2            equ	13	;# 
   131     000E                     TMR1            equ	14	;# 
   132     000E                     TMR1L           equ	14	;# 
   133     000F                     TMR1H           equ	15	;# 
   134     0010                     T1CON           equ	16	;# 
   135     0011                     TMR2            equ	17	;# 
   136     0012                     T2CON           equ	18	;# 
   137     0013                     SSPBUF          equ	19	;# 
   138     0014                     SSPCON          equ	20	;# 
   139     0015                     CCPR1           equ	21	;# 
   140     0015                     CCPR1L          equ	21	;# 
   141     0016                     CCPR1H          equ	22	;# 
   142     0017                     CCP1CON         equ	23	;# 
   143     0018                     RCSTA           equ	24	;# 
   144     0019                     TXREG           equ	25	;# 
   145     001A                     RCREG           equ	26	;# 
   146     001B                     CCPR2           equ	27	;# 
   147     001B                     CCPR2L          equ	27	;# 
   148     001C                     CCPR2H          equ	28	;# 
   149     001D                     CCP2CON         equ	29	;# 
   150     001E                     ADRESH          equ	30	;# 
   151     001F                     ADCON0          equ	31	;# 
   152     0081                     OPTION_REG      equ	129	;# 
   153     0085                     TRISA           equ	133	;# 
   154     0086                     TRISB           equ	134	;# 
   155     0087                     TRISC           equ	135	;# 
   156     0088                     TRISD           equ	136	;# 
   157     0089                     TRISE           equ	137	;# 
   158     008C                     PIE1            equ	140	;# 
   159     008D                     PIE2            equ	141	;# 
   160     008E                     PCON            equ	142	;# 
   161     0091                     SSPCON2         equ	145	;# 
   162     0092                     PR2             equ	146	;# 
   163     0093                     SSPADD          equ	147	;# 
   164     0094                     SSPSTAT         equ	148	;# 
   165     0098                     TXSTA           equ	152	;# 
   166     0099                     SPBRG           equ	153	;# 
   167     009C                     CMCON           equ	156	;# 
   168     009D                     CVRCON          equ	157	;# 
   169     009E                     ADRESL          equ	158	;# 
   170     009F                     ADCON1          equ	159	;# 
   171     010C                     EEDATA          equ	268	;# 
   172     010D                     EEADR           equ	269	;# 
   173     010E                     EEDATH          equ	270	;# 
   174     010F                     EEADRH          equ	271	;# 
   175     018C                     EECON1          equ	396	;# 
   176     018D                     EECON2          equ	397	;# 
   177     001A                     _RCREG          set	26
   178     0019                     _TXREG          set	25
   179     0065                     _RCIF           set	101
   180     0064                     _TXIF           set	100
   181     0099                     _SPBRG          set	153
   182     0087                     _TRISCbits      set	135
   183                           
   184                           	psect	strings
   185     0004                     __pstrings:
   186     0004                     stringtab:
   187     0004                     __stringtab:
   188     0004                     stringcode:	
   189                           ;	String table - string pointers are 1 byte each
   190                           
   191     0004                     stringdir:
   192     0004  3000               	movlw	high stringdir
   193     0005  008A               	movwf	10
   194     0006  0804               	movf	4,w
   195     0007  0A84               	incf	4,f
   196     0008  0782               	addwf	2,f
   197     0009                     __stringbase:
   198     0009  3400               	retlw	0
   199     000A                     __end_of__stringtab:
   200     000A                     STR_1:
   201     000A  3445               	retlw	69	;'E'
   202     000B  346E               	retlw	110	;'n'
   203     000C  3474               	retlw	116	;'t'
   204     000D  3465               	retlw	101	;'e'
   205     000E  3472               	retlw	114	;'r'
   206     000F  3420               	retlw	32	;' '
   207     0010  3474               	retlw	116	;'t'
   208     0011  3468               	retlw	104	;'h'
   209     0012  3465               	retlw	101	;'e'
   210     0013  3420               	retlw	32	;' '
   211     0014  3473               	retlw	115	;'s'
   212     0015  3474               	retlw	116	;'t'
   213     0016  3472               	retlw	114	;'r'
   214     0017  3469               	retlw	105	;'i'
   215     0018  346E               	retlw	110	;'n'
   216     0019  3467               	retlw	103	;'g'
   217     001A  343A               	retlw	58	;':'
   218     001B  340A               	retlw	10
   219     001C  340D               	retlw	13
   220     001D  340D               	retlw	13
   221     001E  3400               	retlw	0
   222                           
   223                           	psect	cinit
   224     07FC                     start_initialization:	
   225                           ; #config settings
   226                           
   227     07FC                     __initialization:
   228     07FC                     end_of_initialization:	
   229                           ;End of C runtime variable initialization code
   230                           
   231     07FC                     __end_of__initialization:
   232     07FC  0183               	clrf	3
   233     07FD  120A  118A  2FDE   	ljmp	_main	;jump to C main() function
   234                           
   235                           	psect	cstackCOMMON
   236     0071                     __pcstackCOMMON:
   237     0071                     ?_ser_int:
   238     0071                     ?_tx:	
   239                           ; 1 bytes @ 0x0
   240                           
   241     0071                     ?_rx:	
   242                           ; 1 bytes @ 0x0
   243                           
   244     0071                     ?_main:	
   245                           ; 1 bytes @ 0x0
   246                           
   247     0071                     tx@a:	
   248                           ; 1 bytes @ 0x0
   249                           
   250     0071                     ??_ser_int:	
   251                           ; 1 bytes @ 0x0
   252                           
   253     0071                     ??_tx:	
   254                           ; 1 bytes @ 0x0
   255                           
   256     0071                     ??_rx:	
   257                           ; 1 bytes @ 0x0
   258                           
   259                           
   260                           ; 1 bytes @ 0x0
   261     0071                     	ds	1
   262     0072                     ?_txstr:
   263     0072                     txstr@a:	
   264                           ; 1 bytes @ 0x1
   265                           
   266                           
   267                           ; 1 bytes @ 0x1
   268     0072                     	ds	1
   269     0073                     ??_txstr:
   270     0073                     ??_main:	
   271                           ; 1 bytes @ 0x2
   272                           
   273                           
   274                           	psect	maintext
   275     07DE                     __pmaintext:	
   276                           ; 1 bytes @ 0x2
   277 ;;
   278 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   279 ;;
   280 ;; *************** function _main *****************
   281 ;; Defined at:
   282 ;;		line 19 in file "main.c"
   283 ;; Parameters:    Size  Location     Type
   284 ;;		None
   285 ;; Auto vars:     Size  Location     Type
   286 ;;		None
   287 ;; Return value:  Size  Location     Type
   288 ;;                  1    wreg      void 
   289 ;; Registers used:
   290 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   291 ;; Tracked objects:
   292 ;;		On entry : B00/0
   293 ;;		On exit  : 0/0
   294 ;;		Unchanged: 0/0
   295 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   296 ;;      Params:         0       0       0       0       0
   297 ;;      Locals:         0       0       0       0       0
   298 ;;      Temps:          0       0       0       0       0
   299 ;;      Totals:         0       0       0       0       0
   300 ;;Total ram usage:        0 bytes
   301 ;; Hardware stack levels required when called: 2
   302 ;; This function calls:
   303 ;;		_rx
   304 ;;		_ser_int
   305 ;;		_tx
   306 ;;		_txstr
   307 ;; This function is called by:
   308 ;;		Startup code after reset
   309 ;; This function uses a non-reentrant model
   310 ;;
   311                           
   312     07DE                     _main:	
   313                           ;psect for function _main
   314                           
   315     07DE                     l627:	
   316                           ;incstack = 0
   317                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   318                           
   319                           
   320                           ;main.c: 20:     TRISCbits.TRISC7 = 1;
   321     07DE  1683               	bsf	3,5	;RP0=1, select bank1
   322     07DF  1303               	bcf	3,6	;RP1=0, select bank1
   323     07E0  1787               	bsf	7,7	;volatile
   324                           
   325                           ;main.c: 21:     TRISCbits.TRISC6 = 0;
   326     07E1  1307               	bcf	7,6	;volatile
   327     07E2                     l629:
   328                           
   329                           ;main.c: 22:     ser_int();
   330     07E2  120A  118A  27B3  120A  118A  	fcall	_ser_int
   331     07E7                     l631:
   332                           
   333                           ;main.c: 23:     txstr((unsigned char *)"Enter the string:\n\r\r");
   334     07E7  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   335     07E8  00F2               	movwf	txstr@a
   336     07E9  120A  118A  27C2  120A  118A  	fcall	_txstr
   337     07EE                     l633:
   338                           
   339                           ;main.c: 25:         tx(rx());
   340     07EE  120A  118A  279F  120A  118A  	fcall	_rx
   341     07F3  120A  118A  27A8  120A  118A  	fcall	_tx
   342     07F8  2FEE               	goto	l633
   343     07F9  120A  118A  2801   	ljmp	start
   344     07FC                     __end_of_main:
   345                           
   346                           	psect	text1
   347     07C2                     __ptext1:	
   348 ;; *************** function _txstr *****************
   349 ;; Defined at:
   350 ;;		line 49 in file "main.c"
   351 ;; Parameters:    Size  Location     Type
   352 ;;  a               1    1[COMMON] PTR unsigned char 
   353 ;;		 -> STR_1(21), 
   354 ;; Auto vars:     Size  Location     Type
   355 ;;		None
   356 ;; Return value:  Size  Location     Type
   357 ;;                  1    wreg      void 
   358 ;; Registers used:
   359 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   360 ;; Tracked objects:
   361 ;;		On entry : 0/0
   362 ;;		On exit  : 0/0
   363 ;;		Unchanged: 0/0
   364 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   365 ;;      Params:         1       0       0       0       0
   366 ;;      Locals:         0       0       0       0       0
   367 ;;      Temps:          0       0       0       0       0
   368 ;;      Totals:         1       0       0       0       0
   369 ;;Total ram usage:        1 bytes
   370 ;; Hardware stack levels used: 1
   371 ;; Hardware stack levels required when called: 1
   372 ;; This function calls:
   373 ;;		_tx
   374 ;; This function is called by:
   375 ;;		_main
   376 ;; This function uses a non-reentrant model
   377 ;;
   378                           
   379     07C2                     _txstr:	
   380                           ;psect for function _txstr
   381                           
   382     07C2                     l619:	
   383                           ;incstack = 0
   384                           ; Regs used in _txstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   385                           
   386                           
   387                           ;main.c: 50:     while(*a){
   388     07C2  2FD1               	goto	l625
   389     07C3                     l621:
   390                           
   391                           ;main.c: 51:         tx(*a++);
   392     07C3  0872               	movf	txstr@a,w
   393     07C4  0084               	movwf	4
   394     07C5  120A  118A  2004  120A  118A  	fcall	stringdir
   395     07CA  120A  118A  27A8  120A  118A  	fcall	_tx
   396     07CF                     l623:
   397     07CF  3001               	movlw	1
   398     07D0  07F2               	addwf	txstr@a,f
   399     07D1                     l625:
   400                           
   401                           ;main.c: 50:     while(*a){
   402     07D1  0872               	movf	txstr@a,w
   403     07D2  0084               	movwf	4
   404     07D3  120A  118A  2004  120A  118A  	fcall	stringdir
   405     07D8  3A00               	xorlw	0
   406     07D9  1D03               	skipz
   407     07DA  2FDC               	goto	u41
   408     07DB  2FDD               	goto	u40
   409     07DC                     u41:
   410     07DC  2FC3               	goto	l621
   411     07DD                     u40:
   412     07DD                     l49:
   413     07DD  0008               	return
   414     07DE                     __end_of_txstr:
   415                           
   416                           	psect	text2
   417     07A8                     __ptext2:	
   418 ;; *************** function _tx *****************
   419 ;; Defined at:
   420 ;;		line 37 in file "main.c"
   421 ;; Parameters:    Size  Location     Type
   422 ;;  a               1    wreg     unsigned char 
   423 ;; Auto vars:     Size  Location     Type
   424 ;;  a               1    0[COMMON] unsigned char 
   425 ;; Return value:  Size  Location     Type
   426 ;;                  1    wreg      void 
   427 ;; Registers used:
   428 ;;		wreg
   429 ;; Tracked objects:
   430 ;;		On entry : 0/0
   431 ;;		On exit  : 0/0
   432 ;;		Unchanged: 0/0
   433 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   434 ;;      Params:         0       0       0       0       0
   435 ;;      Locals:         1       0       0       0       0
   436 ;;      Temps:          0       0       0       0       0
   437 ;;      Totals:         1       0       0       0       0
   438 ;;Total ram usage:        1 bytes
   439 ;; Hardware stack levels used: 1
   440 ;; This function calls:
   441 ;;		Nothing
   442 ;; This function is called by:
   443 ;;		_main
   444 ;;		_txstr
   445 ;; This function uses a non-reentrant model
   446 ;;
   447                           
   448     07A8                     _tx:	
   449                           ;psect for function _tx
   450                           
   451                           
   452                           ;incstack = 0
   453                           ; Regs used in _tx: [wreg]
   454                           ;tx@a stored from wreg
   455     07A8  00F1               	movwf	tx@a
   456     07A9                     l593:
   457                           
   458                           ;main.c: 38:     TXREG = a;
   459     07A9  0871               	movf	tx@a,w
   460     07AA  1283               	bcf	3,5	;RP0=0, select bank0
   461     07AB  1303               	bcf	3,6	;RP1=0, select bank0
   462     07AC  0099               	movwf	25	;volatile
   463     07AD                     l34:	
   464                           ;main.c: 39:     while(!TXIF);
   465                           
   466     07AD  1E0C               	btfss	12,4	;volatile
   467     07AE  2FB0               	goto	u11
   468     07AF  2FB1               	goto	u10
   469     07B0                     u11:
   470     07B0  2FAD               	goto	l34
   471     07B1                     u10:
   472     07B1                     l36:
   473                           
   474                           ;main.c: 40:     TXIF = 0;
   475     07B1  120C               	bcf	12,4	;volatile
   476     07B2                     l37:
   477     07B2  0008               	return
   478     07B3                     __end_of_tx:
   479                           
   480                           	psect	text3
   481     07B3                     __ptext3:	
   482 ;; *************** function _ser_int *****************
   483 ;; Defined at:
   484 ;;		line 30 in file "main.c"
   485 ;; Parameters:    Size  Location     Type
   486 ;;		None
   487 ;; Auto vars:     Size  Location     Type
   488 ;;		None
   489 ;; Return value:  Size  Location     Type
   490 ;;                  1    wreg      void 
   491 ;; Registers used:
   492 ;;		None
   493 ;; Tracked objects:
   494 ;;		On entry : 0/0
   495 ;;		On exit  : 0/0
   496 ;;		Unchanged: 0/0
   497 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   498 ;;      Params:         0       0       0       0       0
   499 ;;      Locals:         0       0       0       0       0
   500 ;;      Temps:          0       0       0       0       0
   501 ;;      Totals:         0       0       0       0       0
   502 ;;Total ram usage:        0 bytes
   503 ;; Hardware stack levels used: 1
   504 ;; This function calls:
   505 ;;		Nothing
   506 ;; This function is called by:
   507 ;;		_main
   508 ;; This function uses a non-reentrant model
   509 ;;
   510                           
   511     07B3                     _ser_int:	
   512                           ;psect for function _ser_int
   513                           
   514     07B3                     l595:	
   515                           ;incstack = 0
   516                           ; Regs used in _ser_int: []
   517                           
   518                           
   519                           ;main.c: 31:     TXREG = 0x20;
   520     07B3  3020               	movlw	32
   521     07B4  1283               	bcf	3,5	;RP0=0, select bank0
   522     07B5  1303               	bcf	3,6	;RP1=0, select bank0
   523     07B6  0099               	movwf	25	;volatile
   524                           
   525                           ;main.c: 32:     RCREG = 0x90;
   526     07B7  3090               	movlw	144
   527     07B8  009A               	movwf	26	;volatile
   528                           
   529                           ;main.c: 33:     SPBRG = 129;
   530     07B9  3081               	movlw	129
   531     07BA  1683               	bsf	3,5	;RP0=1, select bank1
   532     07BB  1303               	bcf	3,6	;RP1=0, select bank1
   533     07BC  0099               	movwf	25	;volatile
   534                           
   535                           ;main.c: 34:     TXIF=RCIF=0;
   536     07BD  1283               	bcf	3,5	;RP0=0, select bank0
   537     07BE  1303               	bcf	3,6	;RP1=0, select bank0
   538     07BF  128C               	bcf	12,5	;volatile
   539     07C0  120C               	bcf	12,4	;volatile
   540     07C1                     l31:
   541     07C1  0008               	return
   542     07C2                     __end_of_ser_int:
   543                           
   544                           	psect	text4
   545     079F                     __ptext4:	
   546 ;; *************** function _rx *****************
   547 ;; Defined at:
   548 ;;		line 43 in file "main.c"
   549 ;; Parameters:    Size  Location     Type
   550 ;;		None
   551 ;; Auto vars:     Size  Location     Type
   552 ;;		None
   553 ;; Return value:  Size  Location     Type
   554 ;;                  1    wreg      unsigned char 
   555 ;; Registers used:
   556 ;;		wreg
   557 ;; Tracked objects:
   558 ;;		On entry : 0/0
   559 ;;		On exit  : 0/0
   560 ;;		Unchanged: 0/0
   561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   562 ;;      Params:         0       0       0       0       0
   563 ;;      Locals:         0       0       0       0       0
   564 ;;      Temps:          0       0       0       0       0
   565 ;;      Totals:         0       0       0       0       0
   566 ;;Total ram usage:        0 bytes
   567 ;; Hardware stack levels used: 1
   568 ;; This function calls:
   569 ;;		Nothing
   570 ;; This function is called by:
   571 ;;		_main
   572 ;; This function uses a non-reentrant model
   573 ;;
   574                           
   575     079F                     _rx:	
   576                           ;psect for function _rx
   577                           
   578     079F                     l605:	
   579                           ;incstack = 0
   580                           ; Regs used in _rx: [wreg]
   581                           
   582     079F                     l40:	
   583                           ;main.c: 44:     while(!RCIF);
   584                           
   585     079F  1283               	bcf	3,5	;RP0=0, select bank0
   586     07A0  1303               	bcf	3,6	;RP1=0, select bank0
   587     07A1  1E8C               	btfss	12,5	;volatile
   588     07A2  2FA4               	goto	u31
   589     07A3  2FA5               	goto	u30
   590     07A4                     u31:
   591     07A4  2F9F               	goto	l40
   592     07A5                     u30:
   593     07A5                     l42:
   594                           
   595                           ;main.c: 45:     RCIF = 0;
   596     07A5  128C               	bcf	12,5	;volatile
   597     07A6                     l607:
   598                           
   599                           ;main.c: 46:     return RCREG;
   600     07A6  081A               	movf	26,w	;volatile
   601     07A7                     l43:
   602     07A7  0008               	return
   603     07A8                     __end_of_rx:
   604     0002                     ___latbits      equ	2
   605     007E                     btemp           set	126	;btemp
   606     007E                     wtemp0          set	126
   607                           
   608                           	psect	config
   609                           
   610                           ;Config register CONFIG @ 0x2007
   611                           ;	Oscillator Selection bits
   612                           ;	FOSC = HS, HS oscillator
   613                           ;	Watchdog Timer Enable bit
   614                           ;	WDTE = OFF, WDT disabled
   615                           ;	Power-up Timer Enable bit
   616                           ;	PWRTE = OFF, PWRT disabled
   617                           ;	Brown-out Reset Enable bit
   618                           ;	BOREN = ON, BOR enabled
   619                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   620                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   621                           ;	Data EEPROM Memory Code Protection bit
   622                           ;	CPD = OFF, Data EEPROM code protection off
   623                           ;	Flash Program Memory Write Enable bits
   624                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   625                           ;	In-Circuit Debugger Mode bit
   626                           ;	DEBUG = OFF, In-Circuit Debugger disabled, RB6 and RB7 are general purpose I/O pins
   627                           ;	Flash Program Memory Code Protection bit
   628                           ;	CP = OFF, Code protection off
   629     2007                     	org	8199
   630     2007  3F7A               	dw	16250

Data Sizes:
    Strings     21
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           13      2       2
    BANK0            80      0       0
    BANK1            80      0       0
    BANK3            85      0       0
    BANK2            96      0       0

Pointer List with Targets:

    txstr@a	PTR unsigned char  size(1) Largest target is 21
		 -> STR_1(CODE[21]), 


Critical Paths under _main in COMMON

    _main->_txstr
    _txstr->_tx

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0      76
                                 _rx
                            _ser_int
                                 _tx
                              _txstr
 ---------------------------------------------------------------------------------
 (1) _txstr                                                1     0      1      61
                                              1 COMMON     1     0      1
                                 _tx
 ---------------------------------------------------------------------------------
 (2) _tx                                                   1     1      0      15
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _ser_int                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _rx                                                   0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _rx
   _ser_int
   _tx
   _txstr
     _tx

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           13      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            85      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              13      2       2     15.4%
BANK0               80      0       0      0.0%
BANK1               80      0       0      0.0%
BANK3               85      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0       2      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Sat Nov 16 18:55:52 2024

                      pc 0002                       l31 07C1                       l40 079F  
                     l42 07A5                       l34 07AD                       l43 07A7  
                     l36 07B1                       l37 07B2                       l49 07DD  
                     u10 07B1                       u11 07B0                       u30 07A5  
                     u31 07A4                       u40 07DD                       u41 07DC  
                     _rx 079F                       _tx 07A8                       fsr 0004  
                    l605 079F                      l621 07C3                      l607 07A6  
                    l623 07CF                      l631 07E7                      ?_rx 0071  
                    l625 07D1                      l633 07EE                      l619 07C2  
                    l627 07DE                      ?_tx 0071                      l629 07E2  
                    l593 07A9                      l595 07B3                      fsr0 0004  
                    tx@a 0071                     ??_rx 0071                     ??_tx 0071  
                   STR_1 000A                     _RCIF 0065                     _TXIF 0064  
                   _main 07DE                     btemp 007E                     start 0001  
                  ?_main 0071                    _RCREG 001A                    _SPBRG 0099  
                  _TXREG 0019                    _txstr 07C2          __end_of_ser_int 07C2  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __initialization 07FC             __end_of_main 07FC                   ??_main 0073  
                 ?_txstr 0072                ??_ser_int 0071                   txstr@a 0072  
__end_of__initialization 07FC           __pcstackCOMMON 0071            __end_of_txstr 07DE  
             __end_of_rx 07A8               __end_of_tx 07B3                  ??_txstr 0073  
             __pmaintext 07DE               __stringtab 0004                  __ptext1 07C2  
                __ptext2 07A8                  __ptext3 07B3                  __ptext4 079F  
                _ser_int 07B3     end_of_initialization 07FC                _TRISCbits 0087  
    start_initialization 07FC                ___latbits 0002                __pstrings 0004  
               ?_ser_int 0071              __stringbase 0009       __end_of__stringtab 000A  
              stringcode 0004                 stringdir 0004                 stringtab 0004  
