

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Mon Nov 25 14:48:28 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16LF877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     5                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
     6                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
     8                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
     9                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    10                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2
    11                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    12                           	dabs	1,0x7E,2
    13     0000                     
    14                           ; Generated 12/10/2023 GMT
    15                           ; 
    16                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    17                           ; All rights reserved.
    18                           ; 
    19                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    20                           ; 
    21                           ; Redistribution and use in source and binary forms, with or without modification, are
    22                           ; permitted provided that the following conditions are met:
    23                           ; 
    24                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    25                           ;        conditions and the following disclaimer.
    26                           ; 
    27                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    28                           ;        of conditions and the following disclaimer in the documentation and/or other
    29                           ;        materials provided with the distribution. Publication is not required when
    30                           ;        this file is used in an embedded application.
    31                           ; 
    32                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    33                           ;        software without specific prior written permission.
    34                           ; 
    35                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    36                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    37                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    38                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    39                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    40                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    41                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    42                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    43                           ; 
    44                           ; 
    45                           ; Code-generator required, PIC16LF877A Definitions
    46                           ; 
    47                           ; SFR Addresses
    48     0004                     fsr             equ	4
    49     0004                     fsr0            equ	4
    50     0000                     indf            equ	0
    51     0000                     indf0           equ	0
    52     0002                     pc              equ	2
    53     0002                     pcl             equ	2
    54     000A                     pclath          equ	10
    55     0003                     status          equ	3
    56     0000                     INDF            equ	0	;# 
    57     0001                     TMR0            equ	1	;# 
    58     0002                     PCL             equ	2	;# 
    59     0003                     STATUS          equ	3	;# 
    60     0004                     FSR             equ	4	;# 
    61     0005                     PORTA           equ	5	;# 
    62     0006                     PORTB           equ	6	;# 
    63     0007                     PORTC           equ	7	;# 
    64     0008                     PORTD           equ	8	;# 
    65     0009                     PORTE           equ	9	;# 
    66     000A                     PCLATH          equ	10	;# 
    67     000B                     INTCON          equ	11	;# 
    68     000C                     PIR1            equ	12	;# 
    69     000D                     PIR2            equ	13	;# 
    70     000E                     TMR1            equ	14	;# 
    71     000E                     TMR1L           equ	14	;# 
    72     000F                     TMR1H           equ	15	;# 
    73     0010                     T1CON           equ	16	;# 
    74     0011                     TMR2            equ	17	;# 
    75     0012                     T2CON           equ	18	;# 
    76     0013                     SSPBUF          equ	19	;# 
    77     0014                     SSPCON          equ	20	;# 
    78     0015                     CCPR1           equ	21	;# 
    79     0015                     CCPR1L          equ	21	;# 
    80     0016                     CCPR1H          equ	22	;# 
    81     0017                     CCP1CON         equ	23	;# 
    82     0018                     RCSTA           equ	24	;# 
    83     0019                     TXREG           equ	25	;# 
    84     001A                     RCREG           equ	26	;# 
    85     001B                     CCPR2           equ	27	;# 
    86     001B                     CCPR2L          equ	27	;# 
    87     001C                     CCPR2H          equ	28	;# 
    88     001D                     CCP2CON         equ	29	;# 
    89     001E                     ADRESH          equ	30	;# 
    90     001F                     ADCON0          equ	31	;# 
    91     0081                     OPTION_REG      equ	129	;# 
    92     0085                     TRISA           equ	133	;# 
    93     0086                     TRISB           equ	134	;# 
    94     0087                     TRISC           equ	135	;# 
    95     0088                     TRISD           equ	136	;# 
    96     0089                     TRISE           equ	137	;# 
    97     008C                     PIE1            equ	140	;# 
    98     008D                     PIE2            equ	141	;# 
    99     008E                     PCON            equ	142	;# 
   100     0091                     SSPCON2         equ	145	;# 
   101     0092                     PR2             equ	146	;# 
   102     0093                     SSPADD          equ	147	;# 
   103     0094                     SSPSTAT         equ	148	;# 
   104     0098                     TXSTA           equ	152	;# 
   105     0099                     SPBRG           equ	153	;# 
   106     009C                     CMCON           equ	156	;# 
   107     009D                     CVRCON          equ	157	;# 
   108     009E                     ADRESL          equ	158	;# 
   109     009F                     ADCON1          equ	159	;# 
   110     010C                     EEDATA          equ	268	;# 
   111     010D                     EEADR           equ	269	;# 
   112     010E                     EEDATH          equ	270	;# 
   113     010F                     EEADRH          equ	271	;# 
   114     018C                     EECON1          equ	396	;# 
   115     018D                     EECON2          equ	397	;# 
   116     0000                     INDF            equ	0	;# 
   117     0001                     TMR0            equ	1	;# 
   118     0002                     PCL             equ	2	;# 
   119     0003                     STATUS          equ	3	;# 
   120     0004                     FSR             equ	4	;# 
   121     0005                     PORTA           equ	5	;# 
   122     0006                     PORTB           equ	6	;# 
   123     0007                     PORTC           equ	7	;# 
   124     0008                     PORTD           equ	8	;# 
   125     0009                     PORTE           equ	9	;# 
   126     000A                     PCLATH          equ	10	;# 
   127     000B                     INTCON          equ	11	;# 
   128     000C                     PIR1            equ	12	;# 
   129     000D                     PIR2            equ	13	;# 
   130     000E                     TMR1            equ	14	;# 
   131     000E                     TMR1L           equ	14	;# 
   132     000F                     TMR1H           equ	15	;# 
   133     0010                     T1CON           equ	16	;# 
   134     0011                     TMR2            equ	17	;# 
   135     0012                     T2CON           equ	18	;# 
   136     0013                     SSPBUF          equ	19	;# 
   137     0014                     SSPCON          equ	20	;# 
   138     0015                     CCPR1           equ	21	;# 
   139     0015                     CCPR1L          equ	21	;# 
   140     0016                     CCPR1H          equ	22	;# 
   141     0017                     CCP1CON         equ	23	;# 
   142     0018                     RCSTA           equ	24	;# 
   143     0019                     TXREG           equ	25	;# 
   144     001A                     RCREG           equ	26	;# 
   145     001B                     CCPR2           equ	27	;# 
   146     001B                     CCPR2L          equ	27	;# 
   147     001C                     CCPR2H          equ	28	;# 
   148     001D                     CCP2CON         equ	29	;# 
   149     001E                     ADRESH          equ	30	;# 
   150     001F                     ADCON0          equ	31	;# 
   151     0081                     OPTION_REG      equ	129	;# 
   152     0085                     TRISA           equ	133	;# 
   153     0086                     TRISB           equ	134	;# 
   154     0087                     TRISC           equ	135	;# 
   155     0088                     TRISD           equ	136	;# 
   156     0089                     TRISE           equ	137	;# 
   157     008C                     PIE1            equ	140	;# 
   158     008D                     PIE2            equ	141	;# 
   159     008E                     PCON            equ	142	;# 
   160     0091                     SSPCON2         equ	145	;# 
   161     0092                     PR2             equ	146	;# 
   162     0093                     SSPADD          equ	147	;# 
   163     0094                     SSPSTAT         equ	148	;# 
   164     0098                     TXSTA           equ	152	;# 
   165     0099                     SPBRG           equ	153	;# 
   166     009C                     CMCON           equ	156	;# 
   167     009D                     CVRCON          equ	157	;# 
   168     009E                     ADRESL          equ	158	;# 
   169     009F                     ADCON1          equ	159	;# 
   170     010C                     EEDATA          equ	268	;# 
   171     010D                     EEADR           equ	269	;# 
   172     010E                     EEDATH          equ	270	;# 
   173     010F                     EEADRH          equ	271	;# 
   174     018C                     EECON1          equ	396	;# 
   175     018D                     EECON2          equ	397	;# 
   176     001E                     _ADRESH         set	30
   177     001F                     _ADCON0bits     set	31
   178     001F                     _ADCON0         set	31
   179     0006                     _PORTB          set	6
   180     009E                     _ADRESL         set	158
   181     0086                     _TRISB          set	134
   182     009F                     _ADCON1         set	159
   183     0085                     _TRISA          set	133
   184                           
   185                           	psect	cinit
   186     07FC                     start_initialization:	
   187                           ; #config settings
   188                           
   189     07FC                     __initialization:
   190     07FC                     end_of_initialization:	
   191                           ;End of C runtime variable initialization code
   192                           
   193     07FC                     __end_of__initialization:
   194     07FC  0183               	clrf	3
   195     07FD  120A  118A  2F34   	ljmp	_main	;jump to C main() function
   196                           
   197                           	psect	cstackCOMMON
   198     0070                     __pcstackCOMMON:
   199     0070                     ?_led_init:
   200     0070                     ?_adc_init:	
   201                           ; 1 bytes @ 0x0
   202                           
   203     0070                     ?_main:	
   204                           ; 1 bytes @ 0x0
   205                           
   206     0070                     ?_adc:	
   207                           ; 1 bytes @ 0x0
   208                           
   209     0070                     ??_led_init:	
   210                           ; 2 bytes @ 0x0
   211                           
   212     0070                     ??_adc_init:	
   213                           ; 1 bytes @ 0x0
   214                           
   215                           
   216                           ; 1 bytes @ 0x0
   217     0070                     	ds	2
   218     0072                     ??_adc:
   219                           
   220                           ; 1 bytes @ 0x2
   221     0072                     	ds	2
   222     0074                     adc@adcvalue:
   223                           
   224                           ; 2 bytes @ 0x4
   225     0074                     	ds	2
   226     0076                     adc@ch:
   227                           
   228                           ; 1 bytes @ 0x6
   229     0076                     	ds	1
   230     0077                     ??_main:
   231                           
   232                           ; 1 bytes @ 0x7
   233     0077                     	ds	3
   234                           
   235                           	psect	cstackBANK0
   236     0020                     __pcstackBANK0:
   237     0020                     main@adca:
   238                           
   239                           ; 8 bytes @ 0x0
   240     0020                     	ds	8
   241     0028                     main@i:
   242                           
   243                           ; 1 bytes @ 0x8
   244     0028                     	ds	1
   245     0029                     main@i_101:
   246                           
   247                           ; 1 bytes @ 0x9
   248     0029                     	ds	1
   249                           
   250                           	psect	maintext
   251     0734                     __pmaintext:	
   252 ;;
   253 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   254 ;;
   255 ;; *************** function _main *****************
   256 ;; Defined at:
   257 ;;		line 18 in file "main.c"
   258 ;; Parameters:    Size  Location     Type
   259 ;;		None
   260 ;; Auto vars:     Size  Location     Type
   261 ;;  i               1    9[BANK0 ] unsigned char 
   262 ;;  i               1    8[BANK0 ] unsigned char 
   263 ;;  adca            8    0[BANK0 ] unsigned int [4]
   264 ;; Return value:  Size  Location     Type
   265 ;;                  1    wreg      void 
   266 ;; Registers used:
   267 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   268 ;; Tracked objects:
   269 ;;		On entry : B00/0
   270 ;;		On exit  : 0/0
   271 ;;		Unchanged: 0/0
   272 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   273 ;;      Params:         0       0       0       0       0
   274 ;;      Locals:         0      10       0       0       0
   275 ;;      Temps:          3       0       0       0       0
   276 ;;      Totals:         3      10       0       0       0
   277 ;;Total ram usage:       13 bytes
   278 ;; Hardware stack levels required when called: 1
   279 ;; This function calls:
   280 ;;		_adc
   281 ;;		_adc_init
   282 ;;		_led_init
   283 ;; This function is called by:
   284 ;;		Startup code after reset
   285 ;; This function uses a non-reentrant model
   286 ;;
   287                           
   288     0734                     _main:	
   289                           ;psect for function _main
   290                           
   291     0734                     l664:	
   292                           ;incstack = 0
   293                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   294                           
   295                           
   296                           ;main.c: 19:     led_init();
   297     0734  120A  118A  26F5  120A  118A  	fcall	_led_init
   298                           
   299                           ;main.c: 20:     adc_init();
   300     0739  120A  118A  26FC  120A  118A  	fcall	_adc_init
   301     073E                     l666:
   302                           
   303                           ;main.c: 23:         unsigned int adca[4];;main.c: 24:         for(unsigned char i = 0;i
      +                          <4;i++){
   304     073E  1283               	bcf	3,5	;RP0=0, select bank0
   305     073F  1303               	bcf	3,6	;RP1=0, select bank0
   306     0740  01A8               	clrf	main@i
   307     0741                     l672:
   308                           
   309                           ;main.c: 25:             adca[i]=adc(i);
   310     0741  0828               	movf	main@i,w
   311     0742  120A  118A  2709  120A  118A  	fcall	_adc
   312     0747  1283               	bcf	3,5	;RP0=0, select bank0
   313     0748  1303               	bcf	3,6	;RP1=0, select bank0
   314     0749  0828               	movf	main@i,w
   315     074A  00F7               	movwf	??_main
   316     074B  0777               	addwf	??_main,w
   317     074C  3E20               	addlw	(low (main@adca| 0))& (0+255)
   318     074D  0084               	movwf	4
   319     074E  0870               	movf	?_adc,w
   320     074F  1383               	bcf	3,7	;select IRP bank0
   321     0750  0080               	movwf	0
   322     0751  0A84               	incf	4,f
   323     0752  0871               	movf	?_adc+1,w
   324     0753  0080               	movwf	0
   325     0754                     l674:
   326                           
   327                           ;main.c: 26:             _delay((unsigned long)((5)*(20000000/4000.0)));
   328     0754  3021               	movlw	33
   329     0755  00F8               	movwf	??_main+1
   330     0756  3076               	movlw	118
   331     0757  00F7               	movwf	??_main
   332     0758                     u237:
   333     0758  0BF7               	decfsz	??_main,f
   334     0759  2F58               	goto	u237
   335     075A  0BF8               	decfsz	??_main+1,f
   336     075B  2F58               	goto	u237
   337     075C  0000               	nop
   338     075D                     l676:
   339                           
   340                           ;main.c: 27:         }
   341     075D  3001               	movlw	1
   342     075E  1283               	bcf	3,5	;RP0=0, select bank0
   343     075F  1303               	bcf	3,6	;RP1=0, select bank0
   344     0760  07A8               	addwf	main@i,f
   345     0761                     l678:
   346     0761  3004               	movlw	4
   347     0762  0228               	subwf	main@i,w
   348     0763  1C03               	skipc
   349     0764  2F66               	goto	u141
   350     0765  2F67               	goto	u140
   351     0766                     u141:
   352     0766  2F41               	goto	l672
   353     0767                     u140:
   354     0767                     l680:
   355                           
   356                           ;main.c: 28:         for(unsigned char i=0;i<4;i++){
   357     0767  01A9               	clrf	main@i_101
   358     0768                     l686:
   359                           
   360                           ;main.c: 29:             if(adca[i]>=500){
   361     0768  0829               	movf	main@i_101,w
   362     0769  00F7               	movwf	??_main
   363     076A  0777               	addwf	??_main,w
   364     076B  3E20               	addlw	(low (main@adca| 0))& (0+255)
   365     076C  0084               	movwf	4
   366     076D  1383               	bcf	3,7	;select IRP bank0
   367     076E  0800               	movf	0,w
   368     076F  00F8               	movwf	??_main+1
   369     0770  0A84               	incf	4,f
   370     0771  0800               	movf	0,w
   371     0772  00F9               	movwf	??_main+2
   372     0773  3001               	movlw	1
   373     0774  0279               	subwf	??_main+2,w
   374     0775  30F4               	movlw	244
   375     0776  1903               	skipnz
   376     0777  0278               	subwf	??_main+1,w
   377     0778  1C03               	skipc
   378     0779  2F7B               	goto	u151
   379     077A  2F7C               	goto	u150
   380     077B                     u151:
   381     077B  2FB0               	goto	l694
   382     077C                     u150:
   383     077C                     l688:
   384                           
   385                           ;main.c: 30:                 PORTB |= (1<<i);
   386     077C  3001               	movlw	1
   387     077D  00F7               	movwf	??_main
   388     077E  0A29               	incf	main@i_101,w
   389     077F  2F82               	goto	u164
   390     0780                     u165:
   391     0780  1003               	clrc
   392     0781  0DF7               	rlf	??_main,f
   393     0782                     u164:
   394     0782  3EFF               	addlw	-1
   395     0783  1D03               	skipz
   396     0784  2F80               	goto	u165
   397     0785  0877               	movf	??_main,w
   398     0786  0486               	iorwf	6,f	;volatile
   399     0787                     l690:
   400                           
   401                           ;main.c: 31:                 _delay((unsigned long)((1000)*(20000000/4000.0)));
   402     0787  301A               	movlw	26
   403     0788  00F9               	movwf	??_main+2
   404     0789  305E               	movlw	94
   405     078A  00F8               	movwf	??_main+1
   406     078B  306E               	movlw	110
   407     078C  00F7               	movwf	??_main
   408     078D                     u247:
   409     078D  0BF7               	decfsz	??_main,f
   410     078E  2F8D               	goto	u247
   411     078F  0BF8               	decfsz	??_main+1,f
   412     0790  2F8D               	goto	u247
   413     0791  0BF9               	decfsz	??_main+2,f
   414     0792  2F8D               	goto	u247
   415     0793  0000               	nop
   416     0794                     l692:
   417                           
   418                           ;main.c: 32:                 PORTB &= ~(1<<i);
   419     0794  3001               	movlw	1
   420     0795  00F7               	movwf	??_main
   421     0796  1283               	bcf	3,5	;RP0=0, select bank0
   422     0797  1303               	bcf	3,6	;RP1=0, select bank0
   423     0798  0A29               	incf	main@i_101,w
   424     0799  2F9C               	goto	u174
   425     079A                     u175:
   426     079A  1003               	clrc
   427     079B  0DF7               	rlf	??_main,f
   428     079C                     u174:
   429     079C  3EFF               	addlw	-1
   430     079D  1D03               	skipz
   431     079E  2F9A               	goto	u175
   432     079F  0877               	movf	??_main,w
   433     07A0  3AFF               	xorlw	255
   434     07A1  0586               	andwf	6,f	;volatile
   435                           
   436                           ;main.c: 33:                 _delay((unsigned long)((1000)*(20000000/4000.0)));
   437     07A2  301A               	movlw	26
   438     07A3  00F9               	movwf	??_main+2
   439     07A4  305E               	movlw	94
   440     07A5  00F8               	movwf	??_main+1
   441     07A6  306E               	movlw	110
   442     07A7  00F7               	movwf	??_main
   443     07A8                     u257:
   444     07A8  0BF7               	decfsz	??_main,f
   445     07A9  2FA8               	goto	u257
   446     07AA  0BF8               	decfsz	??_main+1,f
   447     07AB  2FA8               	goto	u257
   448     07AC  0BF9               	decfsz	??_main+2,f
   449     07AD  2FA8               	goto	u257
   450     07AE  0000               	nop
   451                           
   452                           ;main.c: 34:             }else if(500>adca[i] && adca[i]>=300){
   453     07AF  2FEE               	goto	l35
   454     07B0                     l694:
   455     07B0  0829               	movf	main@i_101,w
   456     07B1  00F7               	movwf	??_main
   457     07B2  0777               	addwf	??_main,w
   458     07B3  3E20               	addlw	(low (main@adca| 0))& (0+255)
   459     07B4  0084               	movwf	4
   460     07B5  0800               	movf	0,w
   461     07B6  00F8               	movwf	??_main+1
   462     07B7  0A84               	incf	4,f
   463     07B8  0800               	movf	0,w
   464     07B9  00F9               	movwf	??_main+2
   465     07BA  3001               	movlw	1
   466     07BB  0279               	subwf	??_main+2,w
   467     07BC  30F4               	movlw	244
   468     07BD  1903               	skipnz
   469     07BE  0278               	subwf	??_main+1,w
   470     07BF  1803               	skipnc
   471     07C0  2FC2               	goto	u181
   472     07C1  2FC3               	goto	u180
   473     07C2                     u181:
   474     07C2  2FE2               	goto	l700
   475     07C3                     u180:
   476     07C3                     l696:
   477     07C3  0829               	movf	main@i_101,w
   478     07C4  00F7               	movwf	??_main
   479     07C5  0777               	addwf	??_main,w
   480     07C6  3E20               	addlw	(low (main@adca| 0))& (0+255)
   481     07C7  0084               	movwf	4
   482     07C8  0800               	movf	0,w
   483     07C9  00F8               	movwf	??_main+1
   484     07CA  0A84               	incf	4,f
   485     07CB  0800               	movf	0,w
   486     07CC  00F9               	movwf	??_main+2
   487     07CD  3001               	movlw	1
   488     07CE  0279               	subwf	??_main+2,w
   489     07CF  302C               	movlw	44
   490     07D0  1903               	skipnz
   491     07D1  0278               	subwf	??_main+1,w
   492     07D2  1C03               	skipc
   493     07D3  2FD5               	goto	u191
   494     07D4  2FD6               	goto	u190
   495     07D5                     u191:
   496     07D5  2FE2               	goto	l700
   497     07D6                     u190:
   498     07D6                     l698:
   499                           
   500                           ;main.c: 35:                 PORTB |= (1<<i);
   501     07D6  3001               	movlw	1
   502     07D7  00F7               	movwf	??_main
   503     07D8  0A29               	incf	main@i_101,w
   504     07D9  2FDC               	goto	u204
   505     07DA                     u205:
   506     07DA  1003               	clrc
   507     07DB  0DF7               	rlf	??_main,f
   508     07DC                     u204:
   509     07DC  3EFF               	addlw	-1
   510     07DD  1D03               	skipz
   511     07DE  2FDA               	goto	u205
   512     07DF  0877               	movf	??_main,w
   513     07E0  0486               	iorwf	6,f	;volatile
   514                           
   515                           ;main.c: 36:             }else{
   516     07E1  2FEE               	goto	l35
   517     07E2                     l700:
   518                           
   519                           ;main.c: 37:                 PORTB &= ~(1<<i);
   520     07E2  3001               	movlw	1
   521     07E3  00F7               	movwf	??_main
   522     07E4  0A29               	incf	main@i_101,w
   523     07E5  2FE8               	goto	u214
   524     07E6                     u215:
   525     07E6  1003               	clrc
   526     07E7  0DF7               	rlf	??_main,f
   527     07E8                     u214:
   528     07E8  3EFF               	addlw	-1
   529     07E9  1D03               	skipz
   530     07EA  2FE6               	goto	u215
   531     07EB  0877               	movf	??_main,w
   532     07EC  3AFF               	xorlw	255
   533     07ED  0586               	andwf	6,f	;volatile
   534     07EE                     l35:
   535                           
   536                           ;main.c: 39:         }
   537     07EE  3001               	movlw	1
   538     07EF  1283               	bcf	3,5	;RP0=0, select bank0
   539     07F0  1303               	bcf	3,6	;RP1=0, select bank0
   540     07F1  07A9               	addwf	main@i_101,f
   541     07F2                     l702:
   542     07F2  3004               	movlw	4
   543     07F3  0229               	subwf	main@i_101,w
   544     07F4  1C03               	skipc
   545     07F5  2FF7               	goto	u221
   546     07F6  2FF8               	goto	u220
   547     07F7                     u221:
   548     07F7  2F68               	goto	l686
   549     07F8                     u220:
   550     07F8  2F3E               	goto	l666
   551     07F9  120A  118A  2800   	ljmp	start
   552     07FC                     __end_of_main:
   553                           
   554                           	psect	text1
   555     06F5                     __ptext1:	
   556 ;; *************** function _led_init *****************
   557 ;; Defined at:
   558 ;;		line 50 in file "main.c"
   559 ;; Parameters:    Size  Location     Type
   560 ;;		None
   561 ;; Auto vars:     Size  Location     Type
   562 ;;		None
   563 ;; Return value:  Size  Location     Type
   564 ;;                  1    wreg      void 
   565 ;; Registers used:
   566 ;;		status,2
   567 ;; Tracked objects:
   568 ;;		On entry : 0/0
   569 ;;		On exit  : 0/0
   570 ;;		Unchanged: 0/0
   571 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   572 ;;      Params:         0       0       0       0       0
   573 ;;      Locals:         0       0       0       0       0
   574 ;;      Temps:          0       0       0       0       0
   575 ;;      Totals:         0       0       0       0       0
   576 ;;Total ram usage:        0 bytes
   577 ;; Hardware stack levels used: 1
   578 ;; This function calls:
   579 ;;		Nothing
   580 ;; This function is called by:
   581 ;;		_main
   582 ;; This function uses a non-reentrant model
   583 ;;
   584                           
   585     06F5                     _led_init:	
   586                           ;psect for function _led_init
   587                           
   588     06F5                     l650:	
   589                           ;incstack = 0
   590                           ; Regs used in _led_init: [status,2]
   591                           
   592                           
   593                           ;main.c: 51:     TRISB = 0x00;
   594     06F5  1683               	bsf	3,5	;RP0=1, select bank1
   595     06F6  1303               	bcf	3,6	;RP1=0, select bank1
   596     06F7  0186               	clrf	6	;volatile
   597                           
   598                           ;main.c: 52:     PORTB = 0x00;
   599     06F8  1283               	bcf	3,5	;RP0=0, select bank0
   600     06F9  1303               	bcf	3,6	;RP1=0, select bank0
   601     06FA  0186               	clrf	6	;volatile
   602     06FB                     l46:
   603     06FB  0008               	return
   604     06FC                     __end_of_led_init:
   605                           
   606                           	psect	text2
   607     06FC                     __ptext2:	
   608 ;; *************** function _adc_init *****************
   609 ;; Defined at:
   610 ;;		line 44 in file "main.c"
   611 ;; Parameters:    Size  Location     Type
   612 ;;		None
   613 ;; Auto vars:     Size  Location     Type
   614 ;;		None
   615 ;; Return value:  Size  Location     Type
   616 ;;                  1    wreg      void 
   617 ;; Registers used:
   618 ;;		None
   619 ;; Tracked objects:
   620 ;;		On entry : 0/0
   621 ;;		On exit  : 0/0
   622 ;;		Unchanged: 0/0
   623 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   624 ;;      Params:         0       0       0       0       0
   625 ;;      Locals:         0       0       0       0       0
   626 ;;      Temps:          0       0       0       0       0
   627 ;;      Totals:         0       0       0       0       0
   628 ;;Total ram usage:        0 bytes
   629 ;; Hardware stack levels used: 1
   630 ;; This function calls:
   631 ;;		Nothing
   632 ;; This function is called by:
   633 ;;		_main
   634 ;; This function uses a non-reentrant model
   635 ;;
   636                           
   637     06FC                     _adc_init:	
   638                           ;psect for function _adc_init
   639                           
   640     06FC                     l652:	
   641                           ;incstack = 0
   642                           ; Regs used in _adc_init: []
   643                           
   644                           
   645                           ;main.c: 45:     TRISA = 0x0F;
   646     06FC  300F               	movlw	15
   647     06FD  1683               	bsf	3,5	;RP0=1, select bank1
   648     06FE  1303               	bcf	3,6	;RP1=0, select bank1
   649     06FF  0085               	movwf	5	;volatile
   650                           
   651                           ;main.c: 46:     ADCON0 = 0x41;
   652     0700  3041               	movlw	65
   653     0701  1283               	bcf	3,5	;RP0=0, select bank0
   654     0702  1303               	bcf	3,6	;RP1=0, select bank0
   655     0703  009F               	movwf	31	;volatile
   656                           
   657                           ;main.c: 47:     ADCON1 = 0x80;
   658     0704  3080               	movlw	128
   659     0705  1683               	bsf	3,5	;RP0=1, select bank1
   660     0706  1303               	bcf	3,6	;RP1=0, select bank1
   661     0707  009F               	movwf	31	;volatile
   662     0708                     l43:
   663     0708  0008               	return
   664     0709                     __end_of_adc_init:
   665                           
   666                           	psect	text3
   667     0709                     __ptext3:	
   668 ;; *************** function _adc *****************
   669 ;; Defined at:
   670 ;;		line 55 in file "main.c"
   671 ;; Parameters:    Size  Location     Type
   672 ;;  ch              1    wreg     unsigned char 
   673 ;; Auto vars:     Size  Location     Type
   674 ;;  ch              1    6[COMMON] unsigned char 
   675 ;;  adcvalue        2    4[COMMON] unsigned int 
   676 ;; Return value:  Size  Location     Type
   677 ;;                  2    0[COMMON] unsigned int 
   678 ;; Registers used:
   679 ;;		wreg, status,2, status,0
   680 ;; Tracked objects:
   681 ;;		On entry : 0/0
   682 ;;		On exit  : 0/0
   683 ;;		Unchanged: 0/0
   684 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   685 ;;      Params:         2       0       0       0       0
   686 ;;      Locals:         3       0       0       0       0
   687 ;;      Temps:          2       0       0       0       0
   688 ;;      Totals:         7       0       0       0       0
   689 ;;Total ram usage:        7 bytes
   690 ;; Hardware stack levels used: 1
   691 ;; This function calls:
   692 ;;		Nothing
   693 ;; This function is called by:
   694 ;;		_main
   695 ;; This function uses a non-reentrant model
   696 ;;
   697                           
   698     0709                     _adc:	
   699                           ;psect for function _adc
   700                           
   701                           
   702                           ;incstack = 0
   703                           ; Regs used in _adc: [wreg+status,2+status,0]
   704                           ;adc@ch stored from wreg
   705     0709  00F6               	movwf	adc@ch
   706     070A                     l654:
   707                           
   708                           ;main.c: 56:     unsigned int adcvalue;;main.c: 57:     ADCON0 &= 0xC7;
   709     070A  30C7               	movlw	199
   710     070B  1283               	bcf	3,5	;RP0=0, select bank0
   711     070C  1303               	bcf	3,6	;RP1=0, select bank0
   712     070D  059F               	andwf	31,f	;volatile
   713                           
   714                           ;main.c: 58:     ADCON0 |= (ch << 3);
   715     070E  0876               	movf	adc@ch,w	;volatile
   716     070F  00F2               	movwf	??_adc
   717     0710  3002               	movlw	2
   718     0711                     u125:
   719     0711  1003               	clrc
   720     0712  0DF2               	rlf	??_adc,f
   721     0713  3EFF               	addlw	-1
   722     0714  1D03               	skipz
   723     0715  2F11               	goto	u125
   724     0716  1003               	clrc
   725     0717  0D72               	rlf	??_adc,w
   726     0718  049F               	iorwf	31,f	;volatile
   727     0719                     l656:
   728                           
   729                           ;main.c: 59:     _delay((unsigned long)((2)*(20000000/4000.0)));
   730     0719  300D               	movlw	13
   731     071A  00F3               	movwf	??_adc+1
   732     071B  30FB               	movlw	251
   733     071C  00F2               	movwf	??_adc
   734     071D                     u267:
   735     071D  0BF2               	decfsz	??_adc,f
   736     071E  2F1D               	goto	u267
   737     071F  0BF3               	decfsz	??_adc+1,f
   738     0720  2F1D               	goto	u267
   739     0721  2F22               	nop2
   740     0722                     l658:
   741                           
   742                           ;main.c: 60:     ADCON0bits.GO_nDONE = 1;
   743     0722  1283               	bcf	3,5	;RP0=0, select bank0
   744     0723  1303               	bcf	3,6	;RP1=0, select bank0
   745     0724  151F               	bsf	31,2	;volatile
   746     0725                     l49:	
   747                           ;main.c: 62:     while(ADCON0bits.GO_nDONE);
   748                           
   749     0725  191F               	btfsc	31,2	;volatile
   750     0726  2F28               	goto	u131
   751     0727  2F29               	goto	u130
   752     0728                     u131:
   753     0728  2F25               	goto	l49
   754     0729                     u130:
   755     0729                     l660:
   756                           
   757                           ;main.c: 63:     adcvalue = (ADRESH << 8) | ADRESL;
   758     0729  081E               	movf	30,w	;volatile
   759     072A  00F5               	movwf	adc@adcvalue+1
   760     072B  1683               	bsf	3,5	;RP0=1, select bank1
   761     072C  1303               	bcf	3,6	;RP1=0, select bank1
   762     072D  081E               	movf	30,w	;volatile
   763     072E  00F4               	movwf	adc@adcvalue
   764                           
   765                           ;main.c: 64:     return adcvalue;
   766     072F  0875               	movf	adc@adcvalue+1,w
   767     0730  00F1               	movwf	?_adc+1
   768     0731  0874               	movf	adc@adcvalue,w
   769     0732  00F0               	movwf	?_adc
   770     0733                     l52:
   771     0733  0008               	return
   772     0734                     __end_of_adc:
   773     0002                     ___latbits      equ	2
   774     007E                     btemp           set	126	;btemp
   775     007E                     wtemp0          set	126
   776                           
   777                           	psect	config
   778                           
   779                           ;Config register CONFIG @ 0x2007
   780                           ;	Oscillator Selection bits
   781                           ;	FOSC = HS, HS oscillator
   782                           ;	Watchdog Timer Enable bit
   783                           ;	WDTE = OFF, WDT disabled
   784                           ;	Power-up Timer Enable bit
   785                           ;	PWRTE = OFF, PWRT disabled
   786                           ;	Brown-out Reset Enable bit
   787                           ;	BOREN = OFF, BOR disabled
   788                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
   789                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
   790                           ;	Data EEPROM Memory Code Protection bit
   791                           ;	CPD = OFF, Data EEPROM code protection off
   792                           ;	Flash Program Memory Write Enable bits
   793                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
   794                           ;	In-Circuit Debugger Mode bit
   795                           ;	DEBUG = OFF, In-Circuit Debugger disabled, RB6 and RB7 are general purpose I/O pins
   796                           ;	Flash Program Memory Code Protection bit
   797                           ;	CP = OFF, Code protection off
   798     2007                     	org	8199
   799     2007  3F3A               	dw	16186

Data Sizes:
    Strings     0
    Constant    0
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     10      10
    BANK0            80     10      10
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    None.

Critical Paths under _main in COMMON

    _main->_adc

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                13    13      0     435
                                              7 COMMON     3     3      0
                                              0 BANK0     10    10      0
                                _adc
                           _adc_init
                           _led_init
 ---------------------------------------------------------------------------------
 (1) _led_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc                                                  7     5      2      52
                                              0 COMMON     7     5      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 1
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adc
   _adc_init
   _led_init

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     10      10     71.4%
BANK0               80     10      10     12.5%
BANK1               80      0       0      0.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0      20      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Mon Nov 25 14:48:28 2024

                     l43 0708                       l35 07EE                       l52 0733  
                     l46 06FB                       l49 0725                      l700 07E2  
                    l702 07F2                      l650 06F5                      l660 0729  
                    l652 06FC                      l654 070A                      l656 0719  
                    l680 0767                      l672 0741                      l664 0734  
                    l658 0722                      l690 0787                      l674 0754  
                    l666 073E                      l692 0794                      l676 075D  
                    l694 07B0                      l686 0768                      l678 0761  
                    l696 07C3                      l688 077C                      l698 07D6  
                    u130 0729                      u131 0728                      u220 07F8  
                    u204 07DC                      u140 0767                      u125 0711  
                    u221 07F7                      u205 07DA                      u141 0766  
                    u214 07E8                      u150 077C                      u215 07E6  
                    u151 077B                      u180 07C3                      u164 0782  
                    u181 07C2                      u165 0780                      u237 0758  
                    u190 07D6                      u174 079C                      u191 07D5  
                    u175 079A                      u247 078D                      u257 07A8  
                    u267 071D                      _adc 0709                      fsr0 0004  
                    indf 0000                     ?_adc 0070                     _main 0734  
                   btemp 007E                     start 0000                    ??_adc 0072  
                  ?_main 0070                    _PORTB 0006                    _TRISA 0085  
                  _TRISB 0086                    adc@ch 0076                    main@i 0028  
                  status 0003                    wtemp0 007E          __initialization 07FC  
           __end_of_main 07FC                   ??_main 0077                   _ADCON0 001F  
                 _ADCON1 009F                   _ADRESH 001E                   _ADRESL 009E  
       __end_of_adc_init 0709         __end_of_led_init 06FC  __end_of__initialization 07FC  
         __pcstackCOMMON 0070               __pmaintext 0734                ?_adc_init 0070  
              ?_led_init 0070               ??_adc_init 0070                  __ptext1 06F5  
                __ptext2 06FC                  __ptext3 0709               ??_led_init 0070  
   end_of_initialization 07FC              adc@adcvalue 0074      start_initialization 07FC  
            __end_of_adc 0734                ___latbits 0002            __pcstackBANK0 0020  
             _ADCON0bits 001F                main@i_101 0029                 _adc_init 06FC  
               _led_init 06F5                 main@adca 0020  
