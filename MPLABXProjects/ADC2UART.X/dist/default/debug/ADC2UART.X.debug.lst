

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Fri Nov 22 18:26:27 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,space=0,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    12                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=3
    15                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=1
    16                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=1
    17                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=3
    18                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=3
    19                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=2
    21                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    25                           	dabs	1,0x7E,2
    26     0000                     
    27                           ; Generated 12/10/2023 GMT
    28                           ; 
    29                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F877A Definitions
    59                           ; 
    60                           ; SFR Addresses
    61     0004                     fsr             equ	4
    62     0004                     fsr0            equ	4
    63     0000                     indf            equ	0
    64     0000                     indf0           equ	0
    65     0002                     pc              equ	2
    66     0002                     pcl             equ	2
    67     000A                     pclath          equ	10
    68     0003                     status          equ	3
    69     0000                     INDF            equ	0	;# 
    70     0001                     TMR0            equ	1	;# 
    71     0002                     PCL             equ	2	;# 
    72     0003                     STATUS          equ	3	;# 
    73     0004                     FSR             equ	4	;# 
    74     0005                     PORTA           equ	5	;# 
    75     0006                     PORTB           equ	6	;# 
    76     0007                     PORTC           equ	7	;# 
    77     0008                     PORTD           equ	8	;# 
    78     0009                     PORTE           equ	9	;# 
    79     000A                     PCLATH          equ	10	;# 
    80     000B                     INTCON          equ	11	;# 
    81     000C                     PIR1            equ	12	;# 
    82     000D                     PIR2            equ	13	;# 
    83     000E                     TMR1            equ	14	;# 
    84     000E                     TMR1L           equ	14	;# 
    85     000F                     TMR1H           equ	15	;# 
    86     0010                     T1CON           equ	16	;# 
    87     0011                     TMR2            equ	17	;# 
    88     0012                     T2CON           equ	18	;# 
    89     0013                     SSPBUF          equ	19	;# 
    90     0014                     SSPCON          equ	20	;# 
    91     0015                     CCPR1           equ	21	;# 
    92     0015                     CCPR1L          equ	21	;# 
    93     0016                     CCPR1H          equ	22	;# 
    94     0017                     CCP1CON         equ	23	;# 
    95     0018                     RCSTA           equ	24	;# 
    96     0019                     TXREG           equ	25	;# 
    97     001A                     RCREG           equ	26	;# 
    98     001B                     CCPR2           equ	27	;# 
    99     001B                     CCPR2L          equ	27	;# 
   100     001C                     CCPR2H          equ	28	;# 
   101     001D                     CCP2CON         equ	29	;# 
   102     001E                     ADRESH          equ	30	;# 
   103     001F                     ADCON0          equ	31	;# 
   104     0081                     OPTION_REG      equ	129	;# 
   105     0085                     TRISA           equ	133	;# 
   106     0086                     TRISB           equ	134	;# 
   107     0087                     TRISC           equ	135	;# 
   108     0088                     TRISD           equ	136	;# 
   109     0089                     TRISE           equ	137	;# 
   110     008C                     PIE1            equ	140	;# 
   111     008D                     PIE2            equ	141	;# 
   112     008E                     PCON            equ	142	;# 
   113     0091                     SSPCON2         equ	145	;# 
   114     0092                     PR2             equ	146	;# 
   115     0093                     SSPADD          equ	147	;# 
   116     0094                     SSPSTAT         equ	148	;# 
   117     0098                     TXSTA           equ	152	;# 
   118     0099                     SPBRG           equ	153	;# 
   119     009C                     CMCON           equ	156	;# 
   120     009D                     CVRCON          equ	157	;# 
   121     009E                     ADRESL          equ	158	;# 
   122     009F                     ADCON1          equ	159	;# 
   123     010C                     EEDATA          equ	268	;# 
   124     010D                     EEADR           equ	269	;# 
   125     010E                     EEDATH          equ	270	;# 
   126     010F                     EEADRH          equ	271	;# 
   127     018C                     EECON1          equ	396	;# 
   128     018D                     EECON2          equ	397	;# 
   129     0000                     INDF            equ	0	;# 
   130     0001                     TMR0            equ	1	;# 
   131     0002                     PCL             equ	2	;# 
   132     0003                     STATUS          equ	3	;# 
   133     0004                     FSR             equ	4	;# 
   134     0005                     PORTA           equ	5	;# 
   135     0006                     PORTB           equ	6	;# 
   136     0007                     PORTC           equ	7	;# 
   137     0008                     PORTD           equ	8	;# 
   138     0009                     PORTE           equ	9	;# 
   139     000A                     PCLATH          equ	10	;# 
   140     000B                     INTCON          equ	11	;# 
   141     000C                     PIR1            equ	12	;# 
   142     000D                     PIR2            equ	13	;# 
   143     000E                     TMR1            equ	14	;# 
   144     000E                     TMR1L           equ	14	;# 
   145     000F                     TMR1H           equ	15	;# 
   146     0010                     T1CON           equ	16	;# 
   147     0011                     TMR2            equ	17	;# 
   148     0012                     T2CON           equ	18	;# 
   149     0013                     SSPBUF          equ	19	;# 
   150     0014                     SSPCON          equ	20	;# 
   151     0015                     CCPR1           equ	21	;# 
   152     0015                     CCPR1L          equ	21	;# 
   153     0016                     CCPR1H          equ	22	;# 
   154     0017                     CCP1CON         equ	23	;# 
   155     0018                     RCSTA           equ	24	;# 
   156     0019                     TXREG           equ	25	;# 
   157     001A                     RCREG           equ	26	;# 
   158     001B                     CCPR2           equ	27	;# 
   159     001B                     CCPR2L          equ	27	;# 
   160     001C                     CCPR2H          equ	28	;# 
   161     001D                     CCP2CON         equ	29	;# 
   162     001E                     ADRESH          equ	30	;# 
   163     001F                     ADCON0          equ	31	;# 
   164     0081                     OPTION_REG      equ	129	;# 
   165     0085                     TRISA           equ	133	;# 
   166     0086                     TRISB           equ	134	;# 
   167     0087                     TRISC           equ	135	;# 
   168     0088                     TRISD           equ	136	;# 
   169     0089                     TRISE           equ	137	;# 
   170     008C                     PIE1            equ	140	;# 
   171     008D                     PIE2            equ	141	;# 
   172     008E                     PCON            equ	142	;# 
   173     0091                     SSPCON2         equ	145	;# 
   174     0092                     PR2             equ	146	;# 
   175     0093                     SSPADD          equ	147	;# 
   176     0094                     SSPSTAT         equ	148	;# 
   177     0098                     TXSTA           equ	152	;# 
   178     0099                     SPBRG           equ	153	;# 
   179     009C                     CMCON           equ	156	;# 
   180     009D                     CVRCON          equ	157	;# 
   181     009E                     ADRESL          equ	158	;# 
   182     009F                     ADCON1          equ	159	;# 
   183     010C                     EEDATA          equ	268	;# 
   184     010D                     EEADR           equ	269	;# 
   185     010E                     EEDATH          equ	270	;# 
   186     010F                     EEADRH          equ	271	;# 
   187     018C                     EECON1          equ	396	;# 
   188     018D                     EECON2          equ	397	;# 
   189     001E                     _ADRESH         set	30
   190     001F                     _ADCON0bits     set	31
   191     001A                     _RCREG          set	26
   192     0019                     _TXREG          set	25
   193     001F                     _ADCON0         set	31
   194     0018                     _RCSTA          set	24
   195     0065                     _RCIF           set	101
   196     0064                     _TXIF           set	100
   197     009E                     _ADRESL         set	158
   198     009F                     _ADCON1         set	159
   199     0085                     _TRISAbits      set	133
   200     0099                     _SPBRG          set	153
   201     0098                     _TXSTA          set	152
   202                           
   203                           	psect	strings
   204     0003                     __pstrings:
   205     0003                     stringtab:
   206     0003                     __stringtab:
   207     0003                     stringcode:	
   208                           ;	String table - string pointers are 1 byte each
   209                           
   210     0003                     stringdir:
   211     0003  3000               	movlw	high stringdir
   212     0004  008A               	movwf	10
   213     0005  0804               	movf	4,w
   214     0006  0A84               	incf	4,f
   215     0007  0782               	addwf	2,f
   216     0008                     __stringbase:
   217     0008  3400               	retlw	0
   218     0009                     __end_of__stringtab:
   219     0009                     STR_1:
   220     0009  3441               	retlw	65	;'A'
   221     000A  3444               	retlw	68	;'D'
   222     000B  3443               	retlw	67	;'C'
   223     000C  3420               	retlw	32	;' '
   224     000D  3456               	retlw	86	;'V'
   225     000E  3441               	retlw	65	;'A'
   226     000F  344C               	retlw	76	;'L'
   227     0010  3455               	retlw	85	;'U'
   228     0011  3445               	retlw	69	;'E'
   229     0012  343A               	retlw	58	;':'
   230     0013  3420               	retlw	32	;' '
   231     0014  3425               	retlw	37	;'%'
   232     0015  3475               	retlw	117	;'u'
   233     0016  3400               	retlw	0
   234                           
   235                           	psect	cinit
   236     07EC                     start_initialization:	
   237                           ; #config settings
   238                           
   239     07EC                     __initialization:
   240                           
   241                           ; Clear objects allocated to BANK0
   242     07EC  1283               	bcf	3,5	;RP0=0, select bank0
   243     07ED  1303               	bcf	3,6	;RP1=0, select bank0
   244     07EE  01DA               	clrf	__pbssBANK0& (0+127)
   245     07EF  01DB               	clrf	(__pbssBANK0+1)& (0+127)
   246     07F0  01DC               	clrf	(__pbssBANK0+2)& (0+127)
   247     07F1  01DD               	clrf	(__pbssBANK0+3)& (0+127)
   248     07F2  01DE               	clrf	(__pbssBANK0+4)& (0+127)
   249                           
   250                           ; Clear objects allocated to BANK1
   251     07F3  1383               	bcf	3,7	;select IRP bank0
   252     07F4  30A0               	movlw	low __pbssBANK1
   253     07F5  0084               	movwf	4
   254     07F6  30C0               	movlw	low (__pbssBANK1+32)
   255     07F7  120A  118A  252B  120A  118A  	fcall	clear_ram0
   256     07FC                     end_of_initialization:	
   257                           ;End of C runtime variable initialization code
   258                           
   259     07FC                     __end_of__initialization:
   260     07FC  0183               	clrf	3
   261     07FD  120A  118A  2E47   	ljmp	_main	;jump to C main() function
   262                           
   263                           	psect	bssBANK0
   264     005A                     __pbssBANK0:
   265     005A                     _width:
   266     005A                     	ds	2
   267     005C                     _prec:
   268     005C                     	ds	2
   269     005E                     _flags:
   270     005E                     	ds	1
   271                           
   272                           	psect	bssBANK1
   273     00A0                     __pbssBANK1:
   274     00A0                     _dbuf:
   275     00A0                     	ds	32
   276                           
   277                           	psect	clrtext
   278     052B                     clear_ram0:	
   279                           ;	Called with FSR containing the base address, and
   280                           ;	W with the last address+1
   281                           
   282     052B  0064               	clrwdt	;clear the watchdog before getting into this loop
   283     052C                     clrloop0:
   284     052C  0180               	clrf	0	;clear RAM location pointed to by FSR
   285     052D  0A84               	incf	4,f	;increment pointer
   286     052E  0604               	xorwf	4,w	;XOR with final address
   287     052F  1903               	btfsc	3,2	;have we reached the end yet?
   288     0530  3400               	retlw	0	;all done for this memory range, return
   289     0531  0604               	xorwf	4,w	;XOR again to restore value
   290     0532  2D2C               	goto	clrloop0	;do the next byte
   291                           
   292                           	psect	cstackCOMMON
   293     0070                     __pcstackCOMMON:
   294     0070                     ?_ser_init:
   295     0070                     ?_adc_init:	
   296                           ; 1 bytes @ 0x0
   297                           
   298     0070                     ?_putch:	
   299                           ; 1 bytes @ 0x0
   300                           
   301     0070                     ?_main:	
   302                           ; 1 bytes @ 0x0
   303                           
   304     0070                     ?_tx:	
   305                           ; 1 bytes @ 0x0
   306                           
   307     0070                     ?_adc:	
   308                           ; 1 bytes @ 0x0
   309                           
   310     0070                     ?_fputc:	
   311                           ; 2 bytes @ 0x0
   312                           
   313     0070                     ?___lwdiv:	
   314                           ; 2 bytes @ 0x0
   315                           
   316     0070                     ?___lwmod:	
   317                           ; 2 bytes @ 0x0
   318                           
   319     0070                     tx@a:	
   320                           ; 2 bytes @ 0x0
   321                           
   322     0070                     putch@c:	
   323                           ; 1 bytes @ 0x0
   324                           
   325     0070                     ___lwdiv@divisor:	
   326                           ; 1 bytes @ 0x0
   327                           
   328     0070                     ___lwmod@divisor:	
   329                           ; 2 bytes @ 0x0
   330                           
   331     0070                     fputc@c:	
   332                           ; 2 bytes @ 0x0
   333                           
   334     0070                     ??_ser_init:	
   335                           ; 2 bytes @ 0x0
   336                           
   337     0070                     ??_adc_init:	
   338                           ; 1 bytes @ 0x0
   339                           
   340     0070                     ??_putch:	
   341                           ; 1 bytes @ 0x0
   342                           
   343     0070                     ??_tx:	
   344                           ; 1 bytes @ 0x0
   345                           
   346                           
   347                           ; 1 bytes @ 0x0
   348     0070                     	ds	1
   349     0071                     ?_txstr:
   350     0071                     txstr@a:	
   351                           ; 1 bytes @ 0x1
   352                           
   353                           
   354                           ; 2 bytes @ 0x1
   355     0071                     	ds	1
   356     0072                     adc@adcvalue:
   357     0072                     ___lwdiv@dividend:	
   358                           ; 2 bytes @ 0x2
   359                           
   360     0072                     ___lwmod@dividend:	
   361                           ; 2 bytes @ 0x2
   362                           
   363     0072                     fputc@fp:	
   364                           ; 2 bytes @ 0x2
   365                           
   366     0072                     ??_adc:	
   367                           ; 2 bytes @ 0x2
   368                           
   369                           
   370                           ; 1 bytes @ 0x2
   371     0072                     	ds	1
   372     0073                     ??_txstr:
   373                           
   374                           ; 1 bytes @ 0x3
   375     0073                     	ds	1
   376     0074                     ___lwmod@counter:
   377     0074                     ___lwdiv@quotient:	
   378                           ; 1 bytes @ 0x4
   379                           
   380     0074                     ??_fputc:	
   381                           ; 2 bytes @ 0x4
   382                           
   383     0074                     ??___lwdiv:	
   384                           ; 1 bytes @ 0x4
   385                           
   386     0074                     ??___lwmod:	
   387                           ; 1 bytes @ 0x4
   388                           
   389                           
   390                           ; 1 bytes @ 0x4
   391     0074                     	ds	2
   392     0076                     ___lwdiv@counter:
   393                           
   394                           ; 1 bytes @ 0x6
   395     0076                     	ds	7
   396     007D                     vfprintf@cfmt:
   397     007D                     ??_vfprintf:	
   398                           ; 1 bytes @ 0xD
   399                           
   400                           
   401                           ; 1 bytes @ 0xD
   402     007D                     	ds	1
   403                           
   404                           	psect	cstackBANK0
   405     0020                     __pcstackBANK0:
   406     0020                     ?_vfpfcnvrt:
   407     0020                     vfpfcnvrt@fp:	
   408                           ; 1 bytes @ 0x0
   409                           
   410                           
   411                           ; 2 bytes @ 0x0
   412     0020                     	ds	2
   413     0022                     vfpfcnvrt@fmt:
   414                           
   415                           ; 1 bytes @ 0x2
   416     0022                     	ds	1
   417     0023                     vfpfcnvrt@ap:
   418                           
   419                           ; 1 bytes @ 0x3
   420     0023                     	ds	1
   421     0024                     ??_vfpfcnvrt:
   422                           
   423                           ; 1 bytes @ 0x4
   424     0024                     	ds	2
   425     0026                     vfpfcnvrt@convarg:
   426                           
   427                           ; 4 bytes @ 0x6
   428     0026                     	ds	4
   429     002A                     vfpfcnvrt@cp:
   430                           
   431                           ; 1 bytes @ 0xA
   432     002A                     	ds	1
   433     002B                     vfpfcnvrt@c:
   434                           
   435                           ; 1 bytes @ 0xB
   436     002B                     	ds	1
   437     002C                     ?_vfprintf:
   438     002C                     vfprintf@fp:	
   439                           ; 2 bytes @ 0xC
   440                           
   441                           
   442                           ; 2 bytes @ 0xC
   443     002C                     	ds	2
   444     002E                     vfprintf@fmt:
   445                           
   446                           ; 1 bytes @ 0xE
   447     002E                     	ds	1
   448     002F                     vfprintf@ap:
   449                           
   450                           ; 1 bytes @ 0xF
   451     002F                     	ds	1
   452     0030                     ?_sprintf:
   453     0030                     sprintf@s:	
   454                           ; 2 bytes @ 0x10
   455                           
   456                           
   457                           ; 1 bytes @ 0x10
   458     0030                     	ds	1
   459     0031                     sprintf@fmt:
   460                           
   461                           ; 1 bytes @ 0x11
   462     0031                     	ds	3
   463     0034                     ??_sprintf:
   464                           
   465                           ; 1 bytes @ 0x14
   466     0034                     	ds	1
   467     0035                     sprintf@ap:
   468                           
   469                           ; 1 bytes @ 0x15
   470     0035                     	ds	1
   471     0036                     sprintf@f:
   472                           
   473                           ; 11 bytes @ 0x16
   474     0036                     	ds	11
   475     0041                     ??_main:
   476                           
   477                           ; 1 bytes @ 0x21
   478     0041                     	ds	3
   479     0044                     main@buffer:
   480                           
   481                           ; 20 bytes @ 0x24
   482     0044                     	ds	20
   483     0058                     main@adcvalue:
   484                           
   485                           ; 2 bytes @ 0x38
   486     0058                     	ds	2
   487                           
   488                           	psect	maintext
   489     0647                     __pmaintext:	
   490 ;;
   491 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   492 ;;
   493 ;; *************** function _main *****************
   494 ;; Defined at:
   495 ;;		line 22 in file "main.c"
   496 ;; Parameters:    Size  Location     Type
   497 ;;		None
   498 ;; Auto vars:     Size  Location     Type
   499 ;;  buffer         20   36[BANK0 ] unsigned char [20]
   500 ;;  adcvalue        2   56[BANK0 ] unsigned int 
   501 ;; Return value:  Size  Location     Type
   502 ;;                  1    wreg      void 
   503 ;; Registers used:
   504 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   505 ;; Tracked objects:
   506 ;;		On entry : B00/0
   507 ;;		On exit  : 0/0
   508 ;;		Unchanged: 0/0
   509 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   510 ;;      Params:         0       0       0       0       0
   511 ;;      Locals:         0      22       0       0       0
   512 ;;      Temps:          0       3       0       0       0
   513 ;;      Totals:         0      25       0       0       0
   514 ;;Total ram usage:       25 bytes
   515 ;; Hardware stack levels required when called: 5
   516 ;; This function calls:
   517 ;;		_adc
   518 ;;		_adc_init
   519 ;;		_ser_init
   520 ;;		_sprintf
   521 ;;		_txstr
   522 ;; This function is called by:
   523 ;;		Startup code after reset
   524 ;; This function uses a non-reentrant model
   525 ;;
   526                           
   527     0647                     _main:	
   528                           ;psect for function _main
   529                           
   530     0647                     l1016:	
   531                           ;incstack = 0
   532                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   533                           
   534                           
   535                           ;main.c: 23:     ser_init();
   536     0647  120A  118A  2549  120A  118A  	fcall	_ser_init
   537                           
   538                           ;main.c: 24:     adc_init();
   539     064C  120A  118A  253D  120A  118A  	fcall	_adc_init
   540     0651                     l1018:
   541                           
   542                           ;main.c: 26:         unsigned int adcvalue = adc();
   543     0651  120A  118A  2556  120A  118A  	fcall	_adc
   544     0656  0871               	movf	?_adc+1,w
   545     0657  1283               	bcf	3,5	;RP0=0, select bank0
   546     0658  1303               	bcf	3,6	;RP1=0, select bank0
   547     0659  00D9               	movwf	main@adcvalue+1
   548     065A  0870               	movf	?_adc,w
   549     065B  00D8               	movwf	main@adcvalue
   550     065C                     l1020:
   551                           
   552                           ;main.c: 27:         unsigned char buffer[20];;main.c: 28:         sprintf(buffer, "ADC 
      +                          VALUE: %u", adcvalue);
   553     065C  3044               	movlw	(low (main@buffer| 0))& (0+255)
   554     065D  00B0               	movwf	sprintf@s
   555     065E  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   556     065F  00B1               	movwf	sprintf@fmt
   557     0660  0859               	movf	main@adcvalue+1,w
   558     0661  00B3               	movwf	?_sprintf+3
   559     0662  0858               	movf	main@adcvalue,w
   560     0663  00B2               	movwf	?_sprintf+2
   561     0664  120A  118A  2585  120A  118A  	fcall	_sprintf
   562     0669                     l1022:
   563                           
   564                           ;main.c: 29:         txstr(buffer);
   565     0669  3044               	movlw	(low (main@buffer| 0))& (0+255)
   566     066A  00F1               	movwf	txstr@a
   567     066B  3000               	movlw	0
   568     066C  00F2               	movwf	txstr@a+1
   569     066D  120A  118A  2568  120A  118A  	fcall	_txstr
   570     0672                     l1024:
   571                           
   572                           ;main.c: 34:         txstr('\r\n');
   573     0672  300A               	movlw	10
   574     0673  00F1               	movwf	txstr@a
   575     0674  300D               	movlw	13
   576     0675  00F2               	movwf	txstr@a+1
   577     0676  120A  118A  2568  120A  118A  	fcall	_txstr
   578     067B                     l1026:
   579                           
   580                           ;main.c: 35:         _delay((unsigned long)((1000)*(20000000/4000.0)));
   581     067B  301A               	movlw	26
   582     067C  1283               	bcf	3,5	;RP0=0, select bank0
   583     067D  1303               	bcf	3,6	;RP1=0, select bank0
   584     067E  00C3               	movwf	??_main+2
   585     067F  305E               	movlw	94
   586     0680  00C2               	movwf	??_main+1
   587     0681  306D               	movlw	109
   588     0682  00C1               	movwf	??_main
   589     0683                     u567:
   590     0683  0BC1               	decfsz	??_main,f
   591     0684  2E83               	goto	u567
   592     0685  0BC2               	decfsz	??_main+1,f
   593     0686  2E83               	goto	u567
   594     0687  0BC3               	decfsz	??_main+2,f
   595     0688  2E83               	goto	u567
   596     0689  2E8A               	nop2
   597     068A  2E51               	goto	l1018
   598     068B  120A  118A  2800   	ljmp	start
   599     068E                     __end_of_main:
   600                           
   601                           	psect	text1
   602     0568                     __ptext1:	
   603 ;; *************** function _txstr *****************
   604 ;; Defined at:
   605 ;;		line 58 in file "main.c"
   606 ;; Parameters:    Size  Location     Type
   607 ;;  a               2    1[COMMON] PTR unsigned char 
   608 ;;		 -> RAM(512), main@buffer(20), 
   609 ;; Auto vars:     Size  Location     Type
   610 ;;		None
   611 ;; Return value:  Size  Location     Type
   612 ;;                  1    wreg      void 
   613 ;; Registers used:
   614 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   615 ;; Tracked objects:
   616 ;;		On entry : 0/0
   617 ;;		On exit  : 0/0
   618 ;;		Unchanged: 0/0
   619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   620 ;;      Params:         2       0       0       0       0
   621 ;;      Locals:         0       0       0       0       0
   622 ;;      Temps:          0       0       0       0       0
   623 ;;      Totals:         2       0       0       0       0
   624 ;;Total ram usage:        2 bytes
   625 ;; Hardware stack levels used: 1
   626 ;; Hardware stack levels required when called: 1
   627 ;; This function calls:
   628 ;;		_tx
   629 ;; This function is called by:
   630 ;;		_main
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634     0568                     _txstr:	
   635                           ;psect for function _txstr
   636                           
   637     0568                     l1008:	
   638                           ;incstack = 0
   639                           ; Regs used in _txstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   640                           
   641                           
   642                           ;main.c: 59:     while(*a){
   643     0568  2D7A               	goto	l1014
   644     0569                     l1010:
   645                           
   646                           ;main.c: 60:         tx(*a++);
   647     0569  0871               	movf	txstr@a,w
   648     056A  0084               	movwf	4
   649     056B  1783               	bsf	3,7
   650     056C  1C72               	btfss	txstr@a+1,0
   651     056D  1383               	bcf	3,7
   652     056E  0800               	movf	0,w
   653     056F  120A  118A  2533  120A  118A  	fcall	_tx
   654     0574                     l1012:
   655     0574  3001               	movlw	1
   656     0575  07F1               	addwf	txstr@a,f
   657     0576  1803               	skipnc
   658     0577  0AF2               	incf	txstr@a+1,f
   659     0578  3000               	movlw	0
   660     0579  07F2               	addwf	txstr@a+1,f
   661     057A                     l1014:
   662                           
   663                           ;main.c: 59:     while(*a){
   664     057A  0871               	movf	txstr@a,w
   665     057B  0084               	movwf	4
   666     057C  1783               	bsf	3,7
   667     057D  1C72               	btfss	txstr@a+1,0
   668     057E  1383               	bcf	3,7
   669     057F  0800               	movf	0,w
   670     0580  1D03               	btfss	3,2
   671     0581  2D83               	goto	u551
   672     0582  2D84               	goto	u550
   673     0583                     u551:
   674     0583  2D69               	goto	l1010
   675     0584                     u550:
   676     0584                     l70:
   677     0584  0008               	return
   678     0585                     __end_of_txstr:
   679                           
   680                           	psect	text2
   681     0533                     __ptext2:	
   682 ;; *************** function _tx *****************
   683 ;; Defined at:
   684 ;;		line 50 in file "main.c"
   685 ;; Parameters:    Size  Location     Type
   686 ;;  a               1    wreg     unsigned char 
   687 ;; Auto vars:     Size  Location     Type
   688 ;;  a               1    0[COMMON] unsigned char 
   689 ;; Return value:  Size  Location     Type
   690 ;;                  1    wreg      void 
   691 ;; Registers used:
   692 ;;		wreg
   693 ;; Tracked objects:
   694 ;;		On entry : 0/0
   695 ;;		On exit  : 0/0
   696 ;;		Unchanged: 0/0
   697 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   698 ;;      Params:         0       0       0       0       0
   699 ;;      Locals:         1       0       0       0       0
   700 ;;      Temps:          0       0       0       0       0
   701 ;;      Totals:         1       0       0       0       0
   702 ;;Total ram usage:        1 bytes
   703 ;; Hardware stack levels used: 1
   704 ;; This function calls:
   705 ;;		Nothing
   706 ;; This function is called by:
   707 ;;		_txstr
   708 ;; This function uses a non-reentrant model
   709 ;;
   710                           
   711     0533                     _tx:	
   712                           ;psect for function _tx
   713                           
   714                           
   715                           ;incstack = 0
   716                           ; Regs used in _tx: [wreg]
   717                           ;tx@a stored from wreg
   718     0533  00F0               	movwf	tx@a
   719     0534                     l970:
   720     0534                     l55:	
   721                           ;main.c: 51:     while(!TXIF);
   722                           
   723     0534  1283               	bcf	3,5	;RP0=0, select bank0
   724     0535  1303               	bcf	3,6	;RP1=0, select bank0
   725     0536  1E0C               	btfss	12,4	;volatile
   726     0537  2D39               	goto	u521
   727     0538  2D3A               	goto	u520
   728     0539                     u521:
   729     0539  2D34               	goto	l55
   730     053A                     u520:
   731     053A                     l972:
   732                           
   733                           ;main.c: 52:     TXREG = a;
   734     053A  0870               	movf	tx@a,w
   735     053B  0099               	movwf	25	;volatile
   736     053C                     l58:
   737     053C  0008               	return
   738     053D                     __end_of_tx:
   739                           
   740                           	psect	text3
   741     0585                     __ptext3:	
   742 ;; *************** function _sprintf *****************
   743 ;; Defined at:
   744 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_sprintf.c"
   745 ;; Parameters:    Size  Location     Type
   746 ;;  s               1   16[BANK0 ] PTR unsigned char 
   747 ;;		 -> main@buffer(20), 
   748 ;;  fmt             1   17[BANK0 ] PTR const unsigned char 
   749 ;;		 -> STR_1(14), 
   750 ;; Auto vars:     Size  Location     Type
   751 ;;  f              11   22[BANK0 ] struct _IO_FILE
   752 ;;  ret             2    0        int 
   753 ;;  ap              1   21[BANK0 ] PTR void [1]
   754 ;;		 -> ?_sprintf(2), 
   755 ;; Return value:  Size  Location     Type
   756 ;;                  2   16[BANK0 ] int 
   757 ;; Registers used:
   758 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   759 ;; Tracked objects:
   760 ;;		On entry : 0/0
   761 ;;		On exit  : 0/0
   762 ;;		Unchanged: 0/0
   763 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   764 ;;      Params:         0       4       0       0       0
   765 ;;      Locals:         0      12       0       0       0
   766 ;;      Temps:          0       1       0       0       0
   767 ;;      Totals:         0      17       0       0       0
   768 ;;Total ram usage:       17 bytes
   769 ;; Hardware stack levels used: 1
   770 ;; Hardware stack levels required when called: 4
   771 ;; This function calls:
   772 ;;		_vfprintf
   773 ;; This function is called by:
   774 ;;		_main
   775 ;; This function uses a non-reentrant model
   776 ;;
   777                           
   778     0585                     _sprintf:	
   779                           ;psect for function _sprintf
   780                           
   781     0585                     l994:	
   782                           ;incstack = 0
   783                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   784                           
   785     0585  3032               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
   786     0586  1283               	bcf	3,5	;RP0=0, select bank0
   787     0587  1303               	bcf	3,6	;RP1=0, select bank0
   788     0588  00B5               	movwf	sprintf@ap
   789     0589                     l996:
   790     0589  0830               	movf	sprintf@s,w
   791     058A  00B6               	movwf	sprintf@f
   792     058B  3000               	movlw	0
   793     058C  00B7               	movwf	sprintf@f+1
   794     058D                     l998:
   795     058D  01B8               	clrf	sprintf@f+2
   796     058E  01B9               	clrf	sprintf@f+3
   797     058F                     l1000:
   798     058F  01BF               	clrf	sprintf@f+9
   799     0590  01C0               	clrf	sprintf@f+10
   800     0591                     l1002:
   801     0591  3036               	movlw	low sprintf@f
   802     0592  00AC               	movwf	vfprintf@fp
   803     0593  3000               	movlw	high sprintf@f
   804     0594  00AD               	movwf	vfprintf@fp+1
   805     0595  0831               	movf	sprintf@fmt,w
   806     0596  00AE               	movwf	vfprintf@fmt
   807     0597  3035               	movlw	(low (sprintf@ap| 0))& (0+255)
   808     0598  00AF               	movwf	vfprintf@ap
   809     0599  120A  118A  25A8  120A  118A  	fcall	_vfprintf
   810     059E                     l1004:
   811     059E  1283               	bcf	3,5	;RP0=0, select bank0
   812     059F  1303               	bcf	3,6	;RP1=0, select bank0
   813     05A0  0838               	movf	sprintf@f+2,w
   814     05A1  0730               	addwf	sprintf@s,w
   815     05A2  00B4               	movwf	??_sprintf
   816     05A3  0834               	movf	??_sprintf,w
   817     05A4  0084               	movwf	4
   818     05A5  1383               	bcf	3,7	;select IRP bank0
   819     05A6  0180               	clrf	0
   820     05A7                     l625:
   821     05A7  0008               	return
   822     05A8                     __end_of_sprintf:
   823                           
   824                           	psect	text4
   825     05A8                     __ptext4:	
   826 ;; *************** function _vfprintf *****************
   827 ;; Defined at:
   828 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
   829 ;; Parameters:    Size  Location     Type
   830 ;;  fp              2   12[BANK0 ] PTR struct _IO_FILE
   831 ;;		 -> sprintf@f(11), 
   832 ;;  fmt             1   14[BANK0 ] PTR const unsigned char 
   833 ;;		 -> STR_1(14), 
   834 ;;  ap              1   15[BANK0 ] PTR PTR void 
   835 ;;		 -> sprintf@ap(1), 
   836 ;; Auto vars:     Size  Location     Type
   837 ;;  cfmt            1   13[COMMON] PTR unsigned char 
   838 ;;		 -> STR_1(14), 
   839 ;; Return value:  Size  Location     Type
   840 ;;                  2   12[BANK0 ] int 
   841 ;; Registers used:
   842 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   843 ;; Tracked objects:
   844 ;;		On entry : 0/0
   845 ;;		On exit  : 0/0
   846 ;;		Unchanged: 0/0
   847 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   848 ;;      Params:         0       4       0       0       0
   849 ;;      Locals:         1       0       0       0       0
   850 ;;      Temps:          0       0       0       0       0
   851 ;;      Totals:         1       4       0       0       0
   852 ;;Total ram usage:        5 bytes
   853 ;; Hardware stack levels used: 1
   854 ;; Hardware stack levels required when called: 3
   855 ;; This function calls:
   856 ;;		_vfpfcnvrt
   857 ;; This function is called by:
   858 ;;		_sprintf
   859 ;; This function uses a non-reentrant model
   860 ;;
   861                           
   862     05A8                     _vfprintf:	
   863                           ;psect for function _vfprintf
   864                           
   865     05A8                     l974:	
   866                           ;incstack = 0
   867                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   868                           
   869                           
   870                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
   871     05A8  1283               	bcf	3,5	;RP0=0, select bank0
   872     05A9  1303               	bcf	3,6	;RP1=0, select bank0
   873     05AA  082E               	movf	vfprintf@fmt,w
   874     05AB  00FD               	movwf	vfprintf@cfmt
   875                           
   876                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
   877     05AC  2DBC               	goto	l978
   878     05AD                     l976:
   879                           
   880                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   881     05AD  1283               	bcf	3,5	;RP0=0, select bank0
   882     05AE  1303               	bcf	3,6	;RP1=0, select bank0
   883     05AF  082C               	movf	vfprintf@fp,w
   884     05B0  00A0               	movwf	vfpfcnvrt@fp
   885     05B1  082D               	movf	vfprintf@fp+1,w
   886     05B2  00A1               	movwf	vfpfcnvrt@fp+1
   887     05B3  307D               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
   888     05B4  00A2               	movwf	vfpfcnvrt@fmt
   889     05B5  082F               	movf	vfprintf@ap,w
   890     05B6  00A3               	movwf	vfpfcnvrt@ap
   891     05B7  120A  118A  2728  120A  118A  	fcall	_vfpfcnvrt
   892     05BC                     l978:
   893                           
   894                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
   895     05BC  087D               	movf	vfprintf@cfmt,w
   896     05BD  0084               	movwf	4
   897     05BE  120A  118A  2003  120A  118A  	fcall	stringdir
   898     05C3  3A00               	xorlw	0
   899     05C4  1D03               	skipz
   900     05C5  2DC7               	goto	u531
   901     05C6  2DC8               	goto	u530
   902     05C7                     u531:
   903     05C7  2DAD               	goto	l976
   904     05C8                     u530:
   905     05C8                     l980:
   906                           
   907                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1835:  return 0;
   908     05C8  1283               	bcf	3,5	;RP0=0, select bank0
   909     05C9  1303               	bcf	3,6	;RP1=0, select bank0
   910     05CA  01AC               	clrf	?_vfprintf
   911     05CB  01AD               	clrf	?_vfprintf+1
   912     05CC                     l669:
   913     05CC  0008               	return
   914     05CD                     __end_of_vfprintf:
   915                           
   916                           	psect	text5
   917     0728                     __ptext5:	
   918 ;; *************** function _vfpfcnvrt *****************
   919 ;; Defined at:
   920 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
   921 ;; Parameters:    Size  Location     Type
   922 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
   923 ;;		 -> sprintf@f(11), 
   924 ;;  fmt             1    2[BANK0 ] PTR PTR unsigned char 
   925 ;;		 -> vfprintf@cfmt(1), 
   926 ;;  ap              1    3[BANK0 ] PTR PTR void 
   927 ;;		 -> sprintf@ap(1), 
   928 ;; Auto vars:     Size  Location     Type
   929 ;;  convarg         4    6[BANK0 ] struct .
   930 ;;  c               1   11[BANK0 ] unsigned char 
   931 ;;  cp              1   10[BANK0 ] PTR unsigned char 
   932 ;;		 -> STR_1(14), 
   933 ;;  done            1    0        _Bool 
   934 ;; Return value:  Size  Location     Type
   935 ;;                  1    wreg      void 
   936 ;; Registers used:
   937 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   938 ;; Tracked objects:
   939 ;;		On entry : 0/0
   940 ;;		On exit  : 0/0
   941 ;;		Unchanged: 0/0
   942 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   943 ;;      Params:         0       4       0       0       0
   944 ;;      Locals:         0       6       0       0       0
   945 ;;      Temps:          0       2       0       0       0
   946 ;;      Totals:         0      12       0       0       0
   947 ;;Total ram usage:       12 bytes
   948 ;; Hardware stack levels used: 1
   949 ;; Hardware stack levels required when called: 2
   950 ;; This function calls:
   951 ;;		___lwdiv
   952 ;;		___lwmod
   953 ;;		_fputc
   954 ;; This function is called by:
   955 ;;		_vfprintf
   956 ;; This function uses a non-reentrant model
   957 ;;
   958                           
   959     0728                     _vfpfcnvrt:	
   960                           ;psect for function _vfpfcnvrt
   961                           
   962     0728                     l926:	
   963                           ;incstack = 0
   964                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   965                           
   966                           
   967                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
   968     0728  1283               	bcf	3,5	;RP0=0, select bank0
   969     0729  1303               	bcf	3,6	;RP1=0, select bank0
   970     072A  0822               	movf	vfpfcnvrt@fmt,w
   971     072B  0084               	movwf	4
   972     072C  0800               	movf	0,w
   973     072D  0084               	movwf	4
   974     072E  120A  118A  2003  120A  118A  	fcall	stringdir
   975     0733  3A25               	xorlw	37
   976     0734  1D03               	skipz
   977     0735  2F37               	goto	u471
   978     0736  2F38               	goto	u470
   979     0737                     u471:
   980     0737  2FD2               	goto	l964
   981     0738                     u470:
   982     0738                     l928:
   983                           
   984                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
   985     0738  0822               	movf	vfpfcnvrt@fmt,w
   986     0739  0084               	movwf	4
   987     073A  3001               	movlw	1
   988     073B  0780               	addwf	0,f
   989     073C                     l930:
   990                           
   991                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
   992     073C  01DA               	clrf	_width
   993     073D  01DB               	clrf	_width+1
   994     073E  3000               	movlw	0
   995     073F  00DE               	movwf	_flags
   996     0740                     l932:
   997                           
   998                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
   999     0740  30FF               	movlw	255
  1000     0741  00DC               	movwf	_prec
  1001     0742  30FF               	movlw	255
  1002     0743  00DD               	movwf	_prec+1
  1003     0744                     l934:
  1004                           
  1005                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1439:   if (0
  1006     0744  0822               	movf	vfpfcnvrt@fmt,w
  1007     0745  0084               	movwf	4
  1008     0746  0800               	movf	0,w
  1009     0747  00AA               	movwf	vfpfcnvrt@cp
  1010     0748                     l936:
  1011     0748  082A               	movf	vfpfcnvrt@cp,w
  1012     0749  0084               	movwf	4
  1013     074A  120A  118A  2003  120A  118A  	fcall	stringdir
  1014     074F  3A75               	xorlw	117
  1015     0750  1D03               	skipz
  1016     0751  2F53               	goto	u481
  1017     0752  2F54               	goto	u480
  1018     0753                     u481:
  1019     0753  2FCB               	goto	l960
  1020     0754                     u480:
  1021     0754                     l938:
  1022                           
  1023                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  1024     0754  0823               	movf	vfpfcnvrt@ap,w
  1025     0755  0084               	movwf	4
  1026     0756  1383               	bcf	3,7	;select IRP bank0
  1027     0757  0800               	movf	0,w
  1028     0758  00FF               	movwf	btemp+1
  1029     0759  3002               	movlw	2
  1030     075A  0780               	addwf	0,f
  1031     075B  087F               	movf	btemp+1,w
  1032     075C  0084               	movwf	4
  1033     075D  0800               	movf	0,w
  1034     075E  00A6               	movwf	vfpfcnvrt@convarg
  1035     075F  0A84               	incf	4,f
  1036     0760  0800               	movf	0,w
  1037     0761  00A7               	movwf	vfpfcnvrt@convarg+1
  1038     0762                     l940:
  1039                           
  1040                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  1041     0762  0822               	movf	vfpfcnvrt@fmt,w
  1042     0763  0084               	movwf	4
  1043     0764  082A               	movf	vfpfcnvrt@cp,w
  1044     0765  3E01               	addlw	1
  1045     0766  0080               	movwf	0
  1046                           
  1047                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  1048     0767  2FC0               	goto	l958
  1049     0768                     l654:	
  1050                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1523:     case 'u
      +                          ':
  1051                           
  1052                           
  1053                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1525:      c = si
      +                          zeof(dbuf);
  1054     0768  3020               	movlw	32
  1055     0769  00AB               	movwf	vfpfcnvrt@c
  1056     076A                     l942:
  1057                           
  1058                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1527:       dbuf[
      +                          --c] = (convarg.uint % 10) + '0';
  1059     076A  3001               	movlw	1
  1060     076B  02AB               	subwf	vfpfcnvrt@c,f
  1061     076C  082B               	movf	vfpfcnvrt@c,w
  1062     076D  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  1063     076E  0084               	movwf	4
  1064     076F  300A               	movlw	10
  1065     0770  00F0               	movwf	___lwmod@divisor
  1066     0771  3000               	movlw	0
  1067     0772  00F1               	movwf	___lwmod@divisor+1
  1068     0773  0827               	movf	vfpfcnvrt@convarg+1,w
  1069     0774  00F3               	movwf	___lwmod@dividend+1
  1070     0775  0826               	movf	vfpfcnvrt@convarg,w
  1071     0776  00F2               	movwf	___lwmod@dividend
  1072     0777  120A  118A  25CD  120A  118A  	fcall	___lwmod
  1073     077C  0870               	movf	?___lwmod,w
  1074     077D  3E30               	addlw	48
  1075     077E  1383               	bcf	3,7	;select IRP bank1
  1076     077F  0080               	movwf	0
  1077     0780                     l944:
  1078                           
  1079                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1528:       conva
      +                          rg.uint /= 10;
  1080     0780  300A               	movlw	10
  1081     0781  00F0               	movwf	___lwdiv@divisor
  1082     0782  3000               	movlw	0
  1083     0783  00F1               	movwf	___lwdiv@divisor+1
  1084     0784  1283               	bcf	3,5	;RP0=0, select bank0
  1085     0785  1303               	bcf	3,6	;RP1=0, select bank0
  1086     0786  0827               	movf	vfpfcnvrt@convarg+1,w
  1087     0787  00F3               	movwf	___lwdiv@dividend+1
  1088     0788  0826               	movf	vfpfcnvrt@convarg,w
  1089     0789  00F2               	movwf	___lwdiv@dividend
  1090     078A  120A  118A  2605  120A  118A  	fcall	___lwdiv
  1091     078F  0871               	movf	?___lwdiv+1,w
  1092     0790  1283               	bcf	3,5	;RP0=0, select bank0
  1093     0791  1303               	bcf	3,6	;RP1=0, select bank0
  1094     0792  00A7               	movwf	vfpfcnvrt@convarg+1
  1095     0793  0870               	movf	?___lwdiv,w
  1096     0794  00A6               	movwf	vfpfcnvrt@convarg
  1097     0795                     l946:
  1098                           
  1099                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1532:      } whil
      +                          e (convarg.uint != 0 && c != 0);
  1100     0795  0826               	movf	vfpfcnvrt@convarg,w
  1101     0796  0427               	iorwf	vfpfcnvrt@convarg+1,w
  1102     0797  1903               	btfsc	3,2
  1103     0798  2F9A               	goto	u491
  1104     0799  2F9B               	goto	u490
  1105     079A                     u491:
  1106     079A  2FB9               	goto	l954
  1107     079B                     u490:
  1108     079B                     l948:
  1109     079B  082B               	movf	vfpfcnvrt@c,w
  1110     079C  1D03               	btfss	3,2
  1111     079D  2F9F               	goto	u501
  1112     079E  2FA0               	goto	u500
  1113     079F                     u501:
  1114     079F  2F6A               	goto	l942
  1115     07A0                     u500:
  1116     07A0  2FB9               	goto	l954
  1117     07A1                     l950:
  1118                           
  1119                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1534:       fputc
      +                          (dbuf[c++], fp);
  1120     07A1  082B               	movf	vfpfcnvrt@c,w
  1121     07A2  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  1122     07A3  0084               	movwf	4
  1123     07A4  1383               	bcf	3,7	;select IRP bank1
  1124     07A5  0800               	movf	0,w
  1125     07A6  00A4               	movwf	??_vfpfcnvrt
  1126     07A7  01A5               	clrf	??_vfpfcnvrt+1
  1127     07A8  0824               	movf	??_vfpfcnvrt,w
  1128     07A9  00F0               	movwf	fputc@c
  1129     07AA  0825               	movf	??_vfpfcnvrt+1,w
  1130     07AB  00F1               	movwf	fputc@c+1
  1131     07AC  0820               	movf	vfpfcnvrt@fp,w
  1132     07AD  00F2               	movwf	fputc@fp
  1133     07AE  0821               	movf	vfpfcnvrt@fp+1,w
  1134     07AF  00F3               	movwf	fputc@fp+1
  1135     07B0  120A  118A  268E  120A  118A  	fcall	_fputc
  1136     07B5                     l952:
  1137     07B5  3001               	movlw	1
  1138     07B6  1283               	bcf	3,5	;RP0=0, select bank0
  1139     07B7  1303               	bcf	3,6	;RP1=0, select bank0
  1140     07B8  07AB               	addwf	vfpfcnvrt@c,f
  1141     07B9                     l954:
  1142                           
  1143                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1533:      while 
      +                          (c != sizeof(dbuf)) {
  1144     07B9  3020               	movlw	32
  1145     07BA  062B               	xorwf	vfpfcnvrt@c,w
  1146     07BB  1D03               	btfss	3,2
  1147     07BC  2FBE               	goto	u511
  1148     07BD  2FBF               	goto	u510
  1149     07BE                     u511:
  1150     07BE  2FA1               	goto	l950
  1151     07BF                     u510:
  1152     07BF  2FEB               	goto	l662
  1153     07C0                     l958:
  1154     07C0  082A               	movf	vfpfcnvrt@cp,w
  1155     07C1  0084               	movwf	4
  1156     07C2  120A  118A  2003  120A  118A  	fcall	stringdir
  1157                           
  1158                           ; Switch size 1, requested type "simple"
  1159                           ; Number of cases is 1, Range of values is 117 to 117
  1160                           ; switch strategies available:
  1161                           ; Name         Instructions Cycles
  1162                           ; simple_byte            4     3 (average)
  1163                           ; direct_byte           14    11 (fixed)
  1164                           ; jumptable            263     9 (fixed)
  1165                           ;	Chosen strategy is simple_byte
  1166     07C7  3A75               	xorlw	117	; case 117
  1167     07C8  1903               	skipnz
  1168     07C9  2F68               	goto	l654
  1169     07CA  2FCB               	goto	l960
  1170     07CB                     l960:
  1171                           
  1172                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1173     07CB  1283               	bcf	3,5	;RP0=0, select bank0
  1174     07CC  1303               	bcf	3,6	;RP1=0, select bank0
  1175     07CD  0822               	movf	vfpfcnvrt@fmt,w
  1176     07CE  0084               	movwf	4
  1177     07CF  3001               	movlw	1
  1178     07D0  0780               	addwf	0,f
  1179     07D1  2FEB               	goto	l662
  1180     07D2                     l964:
  1181                           
  1182                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1183     07D2  0822               	movf	vfpfcnvrt@fmt,w
  1184     07D3  0084               	movwf	4
  1185     07D4  0800               	movf	0,w
  1186     07D5  0084               	movwf	4
  1187     07D6  120A  118A  2003  120A  118A  	fcall	stringdir
  1188     07DB  00A4               	movwf	??_vfpfcnvrt
  1189     07DC  01A5               	clrf	??_vfpfcnvrt+1
  1190     07DD  0824               	movf	??_vfpfcnvrt,w
  1191     07DE  00F0               	movwf	fputc@c
  1192     07DF  0825               	movf	??_vfpfcnvrt+1,w
  1193     07E0  00F1               	movwf	fputc@c+1
  1194     07E1  0820               	movf	vfpfcnvrt@fp,w
  1195     07E2  00F2               	movwf	fputc@fp
  1196     07E3  0821               	movf	vfpfcnvrt@fp+1,w
  1197     07E4  00F3               	movwf	fputc@fp+1
  1198     07E5  120A  118A  268E  120A  118A  	fcall	_fputc
  1199     07EA  2FCB               	goto	l960
  1200     07EB                     l662:
  1201     07EB  0008               	return
  1202     07EC                     __end_of_vfpfcnvrt:
  1203                           
  1204                           	psect	text6
  1205     068E                     __ptext6:	
  1206 ;; *************** function _fputc *****************
  1207 ;; Defined at:
  1208 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputc.c"
  1209 ;; Parameters:    Size  Location     Type
  1210 ;;  c               2    0[COMMON] int 
  1211 ;;  fp              2    2[COMMON] PTR struct _IO_FILE
  1212 ;;		 -> sprintf@f(11), 
  1213 ;; Auto vars:     Size  Location     Type
  1214 ;;		None
  1215 ;; Return value:  Size  Location     Type
  1216 ;;                  2    0[COMMON] int 
  1217 ;; Registers used:
  1218 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1219 ;; Tracked objects:
  1220 ;;		On entry : 0/0
  1221 ;;		On exit  : 0/0
  1222 ;;		Unchanged: 0/0
  1223 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1224 ;;      Params:         4       0       0       0       0
  1225 ;;      Locals:         0       0       0       0       0
  1226 ;;      Temps:          9       0       0       0       0
  1227 ;;      Totals:        13       0       0       0       0
  1228 ;;Total ram usage:       13 bytes
  1229 ;; Hardware stack levels used: 1
  1230 ;; Hardware stack levels required when called: 1
  1231 ;; This function calls:
  1232 ;;		_putch
  1233 ;; This function is called by:
  1234 ;;		_vfpfcnvrt
  1235 ;; This function uses a non-reentrant model
  1236 ;;
  1237                           
  1238     068E                     _fputc:	
  1239                           ;psect for function _fputc
  1240                           
  1241     068E                     l912:	
  1242                           ;incstack = 0
  1243                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1244                           
  1245     068E  0872               	movf	fputc@fp,w
  1246     068F  0473               	iorwf	fputc@fp+1,w
  1247     0690  1903               	btfsc	3,2
  1248     0691  2E93               	goto	u421
  1249     0692  2E94               	goto	u420
  1250     0693                     u421:
  1251     0693  2E9A               	goto	l916
  1252     0694                     u420:
  1253     0694                     l914:
  1254     0694  0872               	movf	fputc@fp,w
  1255     0695  0473               	iorwf	fputc@fp+1,w
  1256     0696  1D03               	btfss	3,2
  1257     0697  2E99               	goto	u431
  1258     0698  2E9A               	goto	u430
  1259     0699                     u431:
  1260     0699  2EA1               	goto	l918
  1261     069A                     u430:
  1262     069A                     l916:
  1263     069A  0870               	movf	fputc@c,w
  1264     069B  120A  118A  252A  120A  118A  	fcall	_putch
  1265     06A0  2F27               	goto	l681
  1266     06A1                     l918:
  1267     06A1  0872               	movf	fputc@fp,w
  1268     06A2  3E09               	addlw	9
  1269     06A3  00F4               	movwf	??_fputc
  1270     06A4  0873               	movf	fputc@fp+1,w
  1271     06A5  1803               	skipnc
  1272     06A6  3E01               	addlw	1
  1273     06A7  3E00               	addlw	0
  1274     06A8  00F5               	movwf	??_fputc+1
  1275     06A9  0874               	movf	??_fputc,w
  1276     06AA  0084               	movwf	4
  1277     06AB  1783               	bsf	3,7
  1278     06AC  1C75               	btfss	??_fputc+1,0
  1279     06AD  1383               	bcf	3,7
  1280     06AE  0800               	movf	0,w
  1281     06AF  00F6               	movwf	??_fputc+2
  1282     06B0  0A84               	incf	4,f
  1283     06B1  0800               	movf	0,w
  1284     06B2  00F7               	movwf	??_fputc+3
  1285     06B3  0876               	movf	??_fputc+2,w
  1286     06B4  0477               	iorwf	??_fputc+3,w
  1287     06B5  1903               	btfsc	3,2
  1288     06B6  2EB8               	goto	u441
  1289     06B7  2EB9               	goto	u440
  1290     06B8                     u441:
  1291     06B8  2EEB               	goto	l922
  1292     06B9                     u440:
  1293     06B9                     l920:
  1294     06B9  0872               	movf	fputc@fp,w
  1295     06BA  3E09               	addlw	9
  1296     06BB  00F4               	movwf	??_fputc
  1297     06BC  0873               	movf	fputc@fp+1,w
  1298     06BD  1803               	skipnc
  1299     06BE  3E01               	addlw	1
  1300     06BF  3E00               	addlw	0
  1301     06C0  00F5               	movwf	??_fputc+1
  1302     06C1  0874               	movf	??_fputc,w
  1303     06C2  0084               	movwf	4
  1304     06C3  1783               	bsf	3,7
  1305     06C4  1C75               	btfss	??_fputc+1,0
  1306     06C5  1383               	bcf	3,7
  1307     06C6  0800               	movf	0,w
  1308     06C7  00F6               	movwf	??_fputc+2
  1309     06C8  0A84               	incf	4,f
  1310     06C9  0800               	movf	0,w
  1311     06CA  00F7               	movwf	??_fputc+3
  1312     06CB  0872               	movf	fputc@fp,w
  1313     06CC  3E02               	addlw	2
  1314     06CD  00F8               	movwf	??_fputc+4
  1315     06CE  0873               	movf	fputc@fp+1,w
  1316     06CF  1803               	skipnc
  1317     06D0  3E01               	addlw	1
  1318     06D1  3E00               	addlw	0
  1319     06D2  00F9               	movwf	??_fputc+5
  1320     06D3  0878               	movf	??_fputc+4,w
  1321     06D4  0084               	movwf	4
  1322     06D5  1783               	bsf	3,7
  1323     06D6  1C79               	btfss	??_fputc+5,0
  1324     06D7  1383               	bcf	3,7
  1325     06D8  0800               	movf	0,w
  1326     06D9  00FA               	movwf	??_fputc+6
  1327     06DA  0A84               	incf	4,f
  1328     06DB  0800               	movf	0,w
  1329     06DC  00FB               	movwf	??_fputc+7
  1330     06DD  087B               	movf	??_fputc+7,w
  1331     06DE  3A80               	xorlw	128
  1332     06DF  00FC               	movwf	??_fputc+8
  1333     06E0  0877               	movf	??_fputc+3,w
  1334     06E1  3A80               	xorlw	128
  1335     06E2  027C               	subwf	??_fputc+8,w
  1336     06E3  1D03               	skipz
  1337     06E4  2EE7               	goto	u455
  1338     06E5  0876               	movf	??_fputc+2,w
  1339     06E6  027A               	subwf	??_fputc+6,w
  1340     06E7                     u455:
  1341     06E7  1803               	skipnc
  1342     06E8  2EEA               	goto	u451
  1343     06E9  2EEB               	goto	u450
  1344     06EA                     u451:
  1345     06EA  2F27               	goto	l681
  1346     06EB                     u450:
  1347     06EB                     l922:
  1348     06EB  0872               	movf	fputc@fp,w
  1349     06EC  0084               	movwf	4
  1350     06ED  1783               	bsf	3,7
  1351     06EE  1C73               	btfss	fputc@fp+1,0
  1352     06EF  1383               	bcf	3,7
  1353     06F0  0800               	movf	0,w
  1354     06F1  00F4               	movwf	??_fputc
  1355     06F2  0A84               	incf	4,f
  1356     06F3  0800               	movf	0,w
  1357     06F4  00F5               	movwf	??_fputc+1
  1358     06F5  0872               	movf	fputc@fp,w
  1359     06F6  3E02               	addlw	2
  1360     06F7  00F6               	movwf	??_fputc+2
  1361     06F8  0873               	movf	fputc@fp+1,w
  1362     06F9  1803               	skipnc
  1363     06FA  3E01               	addlw	1
  1364     06FB  3E00               	addlw	0
  1365     06FC  00F7               	movwf	??_fputc+3
  1366     06FD  0876               	movf	??_fputc+2,w
  1367     06FE  0084               	movwf	4
  1368     06FF  1783               	bsf	3,7
  1369     0700  1C77               	btfss	??_fputc+3,0
  1370     0701  1383               	bcf	3,7
  1371     0702  0800               	movf	0,w
  1372     0703  0774               	addwf	??_fputc,w
  1373     0704  00F9               	movwf	??_fputc+5
  1374     0705  0875               	movf	??_fputc+1,w
  1375     0706  00F8               	movwf	??_fputc+4
  1376     0707  1803               	skipnc
  1377     0708  0AF8               	incf	??_fputc+4,f
  1378     0709  1F80               	btfss	0,7
  1379     070A  2F0C               	goto	u460
  1380     070B  03F8               	decf	??_fputc+4,f
  1381     070C                     u460:
  1382     070C  0878               	movf	??_fputc+4,w
  1383     070D  00FA               	movwf	??_fputc+6
  1384     070E  0879               	movf	??_fputc+5,w
  1385     070F  0084               	movwf	4
  1386     0710  1783               	bsf	3,7
  1387     0711  1C7A               	btfss	??_fputc+6,0
  1388     0712  1383               	bcf	3,7
  1389     0713  0870               	movf	fputc@c,w
  1390     0714  0080               	movwf	0
  1391     0715  0872               	movf	fputc@fp,w
  1392     0716  3E02               	addlw	2
  1393     0717  00F4               	movwf	??_fputc
  1394     0718  0873               	movf	fputc@fp+1,w
  1395     0719  1803               	skipnc
  1396     071A  3E01               	addlw	1
  1397     071B  3E00               	addlw	0
  1398     071C  00F5               	movwf	??_fputc+1
  1399     071D  0874               	movf	??_fputc,w
  1400     071E  0084               	movwf	4
  1401     071F  1783               	bsf	3,7
  1402     0720  1C75               	btfss	??_fputc+1,0
  1403     0721  1383               	bcf	3,7
  1404     0722  3001               	movlw	1
  1405     0723  0780               	addwf	0,f
  1406     0724  0A84               	incf	4,f
  1407     0725  1803               	skipnc
  1408     0726  0A80               	incf	0,f
  1409     0727                     l681:
  1410     0727  0008               	return
  1411     0728                     __end_of_fputc:
  1412                           
  1413                           	psect	text7
  1414     052A                     __ptext7:	
  1415 ;; *************** function _putch *****************
  1416 ;; Defined at:
  1417 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\putch.c"
  1418 ;; Parameters:    Size  Location     Type
  1419 ;;  c               1    wreg     unsigned char 
  1420 ;; Auto vars:     Size  Location     Type
  1421 ;;  c               1    0[COMMON] unsigned char 
  1422 ;; Return value:  Size  Location     Type
  1423 ;;                  1    wreg      void 
  1424 ;; Registers used:
  1425 ;;		wreg
  1426 ;; Tracked objects:
  1427 ;;		On entry : 0/0
  1428 ;;		On exit  : 0/0
  1429 ;;		Unchanged: 0/0
  1430 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1431 ;;      Params:         0       0       0       0       0
  1432 ;;      Locals:         0       0       0       0       0
  1433 ;;      Temps:          0       0       0       0       0
  1434 ;;      Totals:         0       0       0       0       0
  1435 ;;Total ram usage:        0 bytes
  1436 ;; Hardware stack levels used: 1
  1437 ;; This function calls:
  1438 ;;		Nothing
  1439 ;; This function is called by:
  1440 ;;		_fputc
  1441 ;; This function uses a non-reentrant model
  1442 ;;
  1443                           
  1444     052A                     _putch:	
  1445                           ;psect for function _putch
  1446                           
  1447     052A                     l692:	
  1448                           ;incstack = 0
  1449                           ; Regs used in _putch: [wreg]
  1450                           
  1451     052A  0008               	return
  1452     052B                     __end_of_putch:
  1453                           
  1454                           	psect	text8
  1455     05CD                     __ptext8:	
  1456 ;; *************** function ___lwmod *****************
  1457 ;; Defined at:
  1458 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\lwmod.c"
  1459 ;; Parameters:    Size  Location     Type
  1460 ;;  divisor         2    0[COMMON] unsigned int 
  1461 ;;  dividend        2    2[COMMON] unsigned int 
  1462 ;; Auto vars:     Size  Location     Type
  1463 ;;  counter         1    4[COMMON] unsigned char 
  1464 ;; Return value:  Size  Location     Type
  1465 ;;                  2    0[COMMON] unsigned int 
  1466 ;; Registers used:
  1467 ;;		wreg, status,2, status,0
  1468 ;; Tracked objects:
  1469 ;;		On entry : 0/0
  1470 ;;		On exit  : 0/0
  1471 ;;		Unchanged: 0/0
  1472 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1473 ;;      Params:         4       0       0       0       0
  1474 ;;      Locals:         1       0       0       0       0
  1475 ;;      Temps:          0       0       0       0       0
  1476 ;;      Totals:         5       0       0       0       0
  1477 ;;Total ram usage:        5 bytes
  1478 ;; Hardware stack levels used: 1
  1479 ;; This function calls:
  1480 ;;		Nothing
  1481 ;; This function is called by:
  1482 ;;		_vfpfcnvrt
  1483 ;; This function uses a non-reentrant model
  1484 ;;
  1485                           
  1486     05CD                     ___lwmod:	
  1487                           ;psect for function ___lwmod
  1488                           
  1489     05CD                     l890:	
  1490                           ;incstack = 0
  1491                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1492                           
  1493     05CD  0870               	movf	___lwmod@divisor,w
  1494     05CE  0471               	iorwf	___lwmod@divisor+1,w
  1495     05CF  1903               	btfsc	3,2
  1496     05D0  2DD2               	goto	u361
  1497     05D1  2DD3               	goto	u360
  1498     05D2                     u361:
  1499     05D2  2E00               	goto	l908
  1500     05D3                     u360:
  1501     05D3                     l892:
  1502     05D3  3001               	movlw	1
  1503     05D4  00F4               	movwf	___lwmod@counter
  1504     05D5  2DDF               	goto	l898
  1505     05D6                     l894:
  1506     05D6  3001               	movlw	1
  1507     05D7                     u375:
  1508     05D7  1003               	clrc
  1509     05D8  0DF0               	rlf	___lwmod@divisor,f
  1510     05D9  0DF1               	rlf	___lwmod@divisor+1,f
  1511     05DA  3EFF               	addlw	-1
  1512     05DB  1D03               	skipz
  1513     05DC  2DD7               	goto	u375
  1514     05DD                     l896:
  1515     05DD  3001               	movlw	1
  1516     05DE  07F4               	addwf	___lwmod@counter,f
  1517     05DF                     l898:
  1518     05DF  1FF1               	btfss	___lwmod@divisor+1,7
  1519     05E0  2DE2               	goto	u381
  1520     05E1  2DE3               	goto	u380
  1521     05E2                     u381:
  1522     05E2  2DD6               	goto	l894
  1523     05E3                     u380:
  1524     05E3                     l900:
  1525     05E3  0871               	movf	___lwmod@divisor+1,w
  1526     05E4  0273               	subwf	___lwmod@dividend+1,w
  1527     05E5  1D03               	skipz
  1528     05E6  2DE9               	goto	u395
  1529     05E7  0870               	movf	___lwmod@divisor,w
  1530     05E8  0272               	subwf	___lwmod@dividend,w
  1531     05E9                     u395:
  1532     05E9  1C03               	skipc
  1533     05EA  2DEC               	goto	u391
  1534     05EB  2DED               	goto	u390
  1535     05EC                     u391:
  1536     05EC  2DF3               	goto	l904
  1537     05ED                     u390:
  1538     05ED                     l902:
  1539     05ED  0870               	movf	___lwmod@divisor,w
  1540     05EE  02F2               	subwf	___lwmod@dividend,f
  1541     05EF  0871               	movf	___lwmod@divisor+1,w
  1542     05F0  1C03               	skipc
  1543     05F1  03F3               	decf	___lwmod@dividend+1,f
  1544     05F2  02F3               	subwf	___lwmod@dividend+1,f
  1545     05F3                     l904:
  1546     05F3  3001               	movlw	1
  1547     05F4                     u405:
  1548     05F4  1003               	clrc
  1549     05F5  0CF1               	rrf	___lwmod@divisor+1,f
  1550     05F6  0CF0               	rrf	___lwmod@divisor,f
  1551     05F7  3EFF               	addlw	-1
  1552     05F8  1D03               	skipz
  1553     05F9  2DF4               	goto	u405
  1554     05FA                     l906:
  1555     05FA  3001               	movlw	1
  1556     05FB  02F4               	subwf	___lwmod@counter,f
  1557     05FC  1D03               	btfss	3,2
  1558     05FD  2DFF               	goto	u411
  1559     05FE  2E00               	goto	u410
  1560     05FF                     u411:
  1561     05FF  2DE3               	goto	l900
  1562     0600                     u410:
  1563     0600                     l908:
  1564     0600  0873               	movf	___lwmod@dividend+1,w
  1565     0601  00F1               	movwf	?___lwmod+1
  1566     0602  0872               	movf	___lwmod@dividend,w
  1567     0603  00F0               	movwf	?___lwmod
  1568     0604                     l452:
  1569     0604  0008               	return
  1570     0605                     __end_of___lwmod:
  1571                           
  1572                           	psect	text9
  1573     0605                     __ptext9:	
  1574 ;; *************** function ___lwdiv *****************
  1575 ;; Defined at:
  1576 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\lwdiv.c"
  1577 ;; Parameters:    Size  Location     Type
  1578 ;;  divisor         2    0[COMMON] unsigned int 
  1579 ;;  dividend        2    2[COMMON] unsigned int 
  1580 ;; Auto vars:     Size  Location     Type
  1581 ;;  quotient        2    4[COMMON] unsigned int 
  1582 ;;  counter         1    6[COMMON] unsigned char 
  1583 ;; Return value:  Size  Location     Type
  1584 ;;                  2    0[COMMON] unsigned int 
  1585 ;; Registers used:
  1586 ;;		wreg, status,2, status,0
  1587 ;; Tracked objects:
  1588 ;;		On entry : 0/0
  1589 ;;		On exit  : 0/0
  1590 ;;		Unchanged: 0/0
  1591 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1592 ;;      Params:         4       0       0       0       0
  1593 ;;      Locals:         3       0       0       0       0
  1594 ;;      Temps:          0       0       0       0       0
  1595 ;;      Totals:         7       0       0       0       0
  1596 ;;Total ram usage:        7 bytes
  1597 ;; Hardware stack levels used: 1
  1598 ;; This function calls:
  1599 ;;		Nothing
  1600 ;; This function is called by:
  1601 ;;		_vfpfcnvrt
  1602 ;; This function uses a non-reentrant model
  1603 ;;
  1604                           
  1605     0605                     ___lwdiv:	
  1606                           ;psect for function ___lwdiv
  1607                           
  1608     0605                     l864:	
  1609                           ;incstack = 0
  1610                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1611                           
  1612     0605  01F4               	clrf	___lwdiv@quotient
  1613     0606  01F5               	clrf	___lwdiv@quotient+1
  1614     0607                     l866:
  1615     0607  0870               	movf	___lwdiv@divisor,w
  1616     0608  0471               	iorwf	___lwdiv@divisor+1,w
  1617     0609  1903               	btfsc	3,2
  1618     060A  2E0C               	goto	u291
  1619     060B  2E0D               	goto	u290
  1620     060C                     u291:
  1621     060C  2E42               	goto	l886
  1622     060D                     u290:
  1623     060D                     l868:
  1624     060D  3001               	movlw	1
  1625     060E  00F6               	movwf	___lwdiv@counter
  1626     060F  2E19               	goto	l874
  1627     0610                     l870:
  1628     0610  3001               	movlw	1
  1629     0611                     u305:
  1630     0611  1003               	clrc
  1631     0612  0DF0               	rlf	___lwdiv@divisor,f
  1632     0613  0DF1               	rlf	___lwdiv@divisor+1,f
  1633     0614  3EFF               	addlw	-1
  1634     0615  1D03               	skipz
  1635     0616  2E11               	goto	u305
  1636     0617                     l872:
  1637     0617  3001               	movlw	1
  1638     0618  07F6               	addwf	___lwdiv@counter,f
  1639     0619                     l874:
  1640     0619  1FF1               	btfss	___lwdiv@divisor+1,7
  1641     061A  2E1C               	goto	u311
  1642     061B  2E1D               	goto	u310
  1643     061C                     u311:
  1644     061C  2E10               	goto	l870
  1645     061D                     u310:
  1646     061D                     l876:
  1647     061D  3001               	movlw	1
  1648     061E                     u325:
  1649     061E  1003               	clrc
  1650     061F  0DF4               	rlf	___lwdiv@quotient,f
  1651     0620  0DF5               	rlf	___lwdiv@quotient+1,f
  1652     0621  3EFF               	addlw	-1
  1653     0622  1D03               	skipz
  1654     0623  2E1E               	goto	u325
  1655     0624  0871               	movf	___lwdiv@divisor+1,w
  1656     0625  0273               	subwf	___lwdiv@dividend+1,w
  1657     0626  1D03               	skipz
  1658     0627  2E2A               	goto	u335
  1659     0628  0870               	movf	___lwdiv@divisor,w
  1660     0629  0272               	subwf	___lwdiv@dividend,w
  1661     062A                     u335:
  1662     062A  1C03               	skipc
  1663     062B  2E2D               	goto	u331
  1664     062C  2E2E               	goto	u330
  1665     062D                     u331:
  1666     062D  2E35               	goto	l882
  1667     062E                     u330:
  1668     062E                     l878:
  1669     062E  0870               	movf	___lwdiv@divisor,w
  1670     062F  02F2               	subwf	___lwdiv@dividend,f
  1671     0630  0871               	movf	___lwdiv@divisor+1,w
  1672     0631  1C03               	skipc
  1673     0632  03F3               	decf	___lwdiv@dividend+1,f
  1674     0633  02F3               	subwf	___lwdiv@dividend+1,f
  1675     0634                     l880:
  1676     0634  1474               	bsf	___lwdiv@quotient,0
  1677     0635                     l882:
  1678     0635  3001               	movlw	1
  1679     0636                     u345:
  1680     0636  1003               	clrc
  1681     0637  0CF1               	rrf	___lwdiv@divisor+1,f
  1682     0638  0CF0               	rrf	___lwdiv@divisor,f
  1683     0639  3EFF               	addlw	-1
  1684     063A  1D03               	skipz
  1685     063B  2E36               	goto	u345
  1686     063C                     l884:
  1687     063C  3001               	movlw	1
  1688     063D  02F6               	subwf	___lwdiv@counter,f
  1689     063E  1D03               	btfss	3,2
  1690     063F  2E41               	goto	u351
  1691     0640  2E42               	goto	u350
  1692     0641                     u351:
  1693     0641  2E1D               	goto	l876
  1694     0642                     u350:
  1695     0642                     l886:
  1696     0642  0875               	movf	___lwdiv@quotient+1,w
  1697     0643  00F1               	movwf	?___lwdiv+1
  1698     0644  0874               	movf	___lwdiv@quotient,w
  1699     0645  00F0               	movwf	?___lwdiv
  1700     0646                     l442:
  1701     0646  0008               	return
  1702     0647                     __end_of___lwdiv:
  1703                           
  1704                           	psect	text10
  1705     0549                     __ptext10:	
  1706 ;; *************** function _ser_init *****************
  1707 ;; Defined at:
  1708 ;;		line 40 in file "main.c"
  1709 ;; Parameters:    Size  Location     Type
  1710 ;;		None
  1711 ;; Auto vars:     Size  Location     Type
  1712 ;;		None
  1713 ;; Return value:  Size  Location     Type
  1714 ;;                  1    wreg      void 
  1715 ;; Registers used:
  1716 ;;		None
  1717 ;; Tracked objects:
  1718 ;;		On entry : 0/0
  1719 ;;		On exit  : 0/0
  1720 ;;		Unchanged: 0/0
  1721 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1722 ;;      Params:         0       0       0       0       0
  1723 ;;      Locals:         0       0       0       0       0
  1724 ;;      Temps:          0       0       0       0       0
  1725 ;;      Totals:         0       0       0       0       0
  1726 ;;Total ram usage:        0 bytes
  1727 ;; Hardware stack levels used: 1
  1728 ;; This function calls:
  1729 ;;		Nothing
  1730 ;; This function is called by:
  1731 ;;		_main
  1732 ;; This function uses a non-reentrant model
  1733 ;;
  1734                           
  1735     0549                     _ser_init:	
  1736                           ;psect for function _ser_init
  1737                           
  1738     0549                     l984:	
  1739                           ;incstack = 0
  1740                           ; Regs used in _ser_init: []
  1741                           
  1742                           
  1743                           ;main.c: 41:     TXSTA = 0x20;
  1744     0549  3020               	movlw	32
  1745     054A  1683               	bsf	3,5	;RP0=1, select bank1
  1746     054B  1303               	bcf	3,6	;RP1=0, select bank1
  1747     054C  0098               	movwf	24	;volatile
  1748                           
  1749                           ;main.c: 42:     RCSTA = 0x90;
  1750     054D  3090               	movlw	144
  1751     054E  1283               	bcf	3,5	;RP0=0, select bank0
  1752     054F  1303               	bcf	3,6	;RP1=0, select bank0
  1753     0550  0098               	movwf	24	;volatile
  1754                           
  1755                           ;main.c: 43:     SPBRG = 31;
  1756     0551  301F               	movlw	31
  1757     0552  1683               	bsf	3,5	;RP0=1, select bank1
  1758     0553  1303               	bcf	3,6	;RP1=0, select bank1
  1759     0554  0099               	movwf	25	;volatile
  1760     0555                     l49:
  1761     0555  0008               	return
  1762     0556                     __end_of_ser_init:
  1763                           
  1764                           	psect	text11
  1765     053D                     __ptext11:	
  1766 ;; *************** function _adc_init *****************
  1767 ;; Defined at:
  1768 ;;		line 45 in file "main.c"
  1769 ;; Parameters:    Size  Location     Type
  1770 ;;		None
  1771 ;; Auto vars:     Size  Location     Type
  1772 ;;		None
  1773 ;; Return value:  Size  Location     Type
  1774 ;;                  1    wreg      void 
  1775 ;; Registers used:
  1776 ;;		None
  1777 ;; Tracked objects:
  1778 ;;		On entry : 0/0
  1779 ;;		On exit  : 0/0
  1780 ;;		Unchanged: 0/0
  1781 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1782 ;;      Params:         0       0       0       0       0
  1783 ;;      Locals:         0       0       0       0       0
  1784 ;;      Temps:          0       0       0       0       0
  1785 ;;      Totals:         0       0       0       0       0
  1786 ;;Total ram usage:        0 bytes
  1787 ;; Hardware stack levels used: 1
  1788 ;; This function calls:
  1789 ;;		Nothing
  1790 ;; This function is called by:
  1791 ;;		_main
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795     053D                     _adc_init:	
  1796                           ;psect for function _adc_init
  1797                           
  1798     053D                     l986:	
  1799                           ;incstack = 0
  1800                           ; Regs used in _adc_init: []
  1801                           
  1802                           
  1803                           ;main.c: 46:     TRISAbits.TRISA0 = 1;
  1804     053D  1683               	bsf	3,5	;RP0=1, select bank1
  1805     053E  1303               	bcf	3,6	;RP1=0, select bank1
  1806     053F  1405               	bsf	5,0	;volatile
  1807                           
  1808                           ;main.c: 47:     ADCON0 = 0x41;
  1809     0540  3041               	movlw	65
  1810     0541  1283               	bcf	3,5	;RP0=0, select bank0
  1811     0542  1303               	bcf	3,6	;RP1=0, select bank0
  1812     0543  009F               	movwf	31	;volatile
  1813                           
  1814                           ;main.c: 48:     ADCON1 = 0x80;
  1815     0544  3080               	movlw	128
  1816     0545  1683               	bsf	3,5	;RP0=1, select bank1
  1817     0546  1303               	bcf	3,6	;RP1=0, select bank1
  1818     0547  009F               	movwf	31	;volatile
  1819     0548                     l52:
  1820     0548  0008               	return
  1821     0549                     __end_of_adc_init:
  1822                           
  1823                           	psect	text12
  1824     0556                     __ptext12:	
  1825 ;; *************** function _adc *****************
  1826 ;; Defined at:
  1827 ;;		line 63 in file "main.c"
  1828 ;; Parameters:    Size  Location     Type
  1829 ;;		None
  1830 ;; Auto vars:     Size  Location     Type
  1831 ;;  adcvalue        2    2[COMMON] unsigned int 
  1832 ;; Return value:  Size  Location     Type
  1833 ;;                  2    0[COMMON] unsigned int 
  1834 ;; Registers used:
  1835 ;;		wreg
  1836 ;; Tracked objects:
  1837 ;;		On entry : 0/0
  1838 ;;		On exit  : 0/0
  1839 ;;		Unchanged: 0/0
  1840 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1841 ;;      Params:         2       0       0       0       0
  1842 ;;      Locals:         2       0       0       0       0
  1843 ;;      Temps:          0       0       0       0       0
  1844 ;;      Totals:         4       0       0       0       0
  1845 ;;Total ram usage:        4 bytes
  1846 ;; Hardware stack levels used: 1
  1847 ;; This function calls:
  1848 ;;		Nothing
  1849 ;; This function is called by:
  1850 ;;		_main
  1851 ;; This function uses a non-reentrant model
  1852 ;;
  1853                           
  1854     0556                     _adc:	
  1855                           ;psect for function _adc
  1856                           
  1857     0556                     l988:	
  1858                           ;incstack = 0
  1859                           ; Regs used in _adc: [wreg]
  1860                           
  1861                           
  1862                           ;main.c: 65:     unsigned int adcvalue;;main.c: 66:     ADCON0bits.GO_nDONE = 1;
  1863     0556  1283               	bcf	3,5	;RP0=0, select bank0
  1864     0557  1303               	bcf	3,6	;RP1=0, select bank0
  1865     0558  151F               	bsf	31,2	;volatile
  1866     0559                     l73:	
  1867                           ;main.c: 68:     while(ADCON0bits.GO_nDONE);
  1868                           
  1869     0559  191F               	btfsc	31,2	;volatile
  1870     055A  2D5C               	goto	u541
  1871     055B  2D5D               	goto	u540
  1872     055C                     u541:
  1873     055C  2D59               	goto	l73
  1874     055D                     u540:
  1875     055D                     l990:
  1876                           
  1877                           ;main.c: 69:     adcvalue = (ADRESH<<8)|(ADRESL);
  1878     055D  081E               	movf	30,w	;volatile
  1879     055E  00F3               	movwf	adc@adcvalue+1
  1880     055F  1683               	bsf	3,5	;RP0=1, select bank1
  1881     0560  1303               	bcf	3,6	;RP1=0, select bank1
  1882     0561  081E               	movf	30,w	;volatile
  1883     0562  00F2               	movwf	adc@adcvalue
  1884                           
  1885                           ;main.c: 70:     return adcvalue;
  1886     0563  0873               	movf	adc@adcvalue+1,w
  1887     0564  00F1               	movwf	?_adc+1
  1888     0565  0872               	movf	adc@adcvalue,w
  1889     0566  00F0               	movwf	?_adc
  1890     0567                     l76:
  1891     0567  0008               	return
  1892     0568                     __end_of_adc:
  1893     0002                     ___latbits      equ	2
  1894     007E                     btemp           set	126	;btemp
  1895     007E                     wtemp0          set	126
  1896                           
  1897                           	psect	config
  1898                           
  1899                           ;Config register CONFIG @ 0x2007
  1900                           ;	Oscillator Selection bits
  1901                           ;	FOSC = HS, HS oscillator
  1902                           ;	Watchdog Timer Enable bit
  1903                           ;	WDTE = OFF, WDT disabled
  1904                           ;	Power-up Timer Enable bit
  1905                           ;	PWRTE = OFF, PWRT disabled
  1906                           ;	Brown-out Reset Enable bit
  1907                           ;	BOREN = ON, BOR enabled
  1908                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1909                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1910                           ;	Data EEPROM Memory Code Protection bit
  1911                           ;	CPD = OFF, Data EEPROM code protection off
  1912                           ;	Flash Program Memory Write Enable bits
  1913                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1914                           ;	In-Circuit Debugger Mode bit
  1915                           ;	DEBUG = OFF, In-Circuit Debugger disabled, RB6 and RB7 are general purpose I/O pins
  1916                           ;	Flash Program Memory Code Protection bit
  1917                           ;	CP = OFF, Code protection off
  1918     2007                     	org	8199
  1919     2007  3F7A               	dw	16250

Data Sizes:
    Strings     14
    Constant    0
    Data        0
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     58      63
    BANK1            80      0      32
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    S596$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    S596$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[14]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    txstr@a	PTR unsigned char  size(2) Largest target is 512
		 -> main@buffer(BANK0[20]), RAM(DATA[512]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[14]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMMON[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[14]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[14]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _txstr->_tx
    _sprintf->_vfprintf
    _vfpfcnvrt->_fputc

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0    1501
                                             33 BANK0     25    25      0
                                _adc
                           _adc_init
                           _ser_init
                            _sprintf
                              _txstr
 ---------------------------------------------------------------------------------
 (1) _txstr                                                2     0      2      76
                                              1 COMMON     2     0      2
                                 _tx
 ---------------------------------------------------------------------------------
 (2) _tx                                                   1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             19    15      4    1329
                                             16 BANK0     17    13      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             5     1      4    1128
                                             13 COMMON     1     1      0
                                             12 BANK0      4     0      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           13     9      4    1003
                                              0 BANK0     12     8      4
                            ___lwdiv
                            ___lwmod
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                               13     9      4     230
                                              0 COMMON    13     9      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     161
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     164
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc                                                  4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adc
   _adc_init
   _ser_init
   _sprintf
     _vfprintf
       _vfpfcnvrt
         ___lwdiv
         ___lwmod
         _fputc
           _putch
   _txstr
     _tx

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     14      14    100.0%
BANK0               80     58      63     78.8%
BANK1               80      0      32     40.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     109      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Fri Nov 22 18:26:27 2024

                      pc 0002                       l52 0548                       l70 0584  
                     l55 0534                       l73 0559                       l49 0555  
                     l58 053C                       l76 0567                       _tx 0533  
                     fsr 0004                      l442 0646                      l452 0604  
                    l625 05A7                      l900 05E3                      ?_tx 0070  
                    l902 05ED                      l662 07EB                      l654 0768  
                    l904 05F3                      l920 06B9                      l912 068E  
                    l681 0727                      l906 05FA                      l922 06EB  
                    l914 0694                      l930 073C                      l908 0600  
                    l692 052A                      l916 069A                      l940 0762  
                    l932 0740                      l669 05CC                      l870 0610  
                    l918 06A1                      l950 07A1                      l942 076A  
                    l934 0744                      l926 0728                      l880 0634  
                    l872 0617                      l864 0605                      l952 07B5  
                    l944 0780                      l960 07CB                      l936 0748  
                    l928 0738                      l882 0635                      l874 0619  
                    l866 0607                      l890 05CD                      l954 07B9  
                    l946 0795                      l938 0754                      l970 0534  
                    l884 063C                      l876 061D                      l868 060D  
                    l892 05D3                      l948 079B                      l964 07D2  
                    l980 05C8                      l972 053A                      l990 055D  
                    l878 062E                      l886 0642                      l894 05D6  
                    l958 07C0                      l974 05A8                      l984 0549  
                    l896 05DD                      l976 05AD                      l986 053D  
                    l898 05DF                      l978 05BC                      l994 0585  
                    l988 0556                      l996 0589                      l998 058D  
                    u310 061D                      u311 061C                      u305 0611  
                    u330 062E                      u410 0600                      u331 062D  
                    u411 05FF                      u420 0694                      u500 07A0  
                    u325 061E                      u405 05F4                      u421 0693  
                    u501 079F                      u350 0642                      u430 069A  
                    u510 07BF                      u351 0641                      u335 062A  
                    u431 0699                      u511 07BE                      u360 05D3  
                    u440 06B9                      u520 053A                      u345 0636  
                    u361 05D2                      u441 06B8                      u521 0539  
                    u290 060D                      u450 06EB                      u530 05C8  
                    u291 060C                      u451 06EA                      u531 05C7  
                    u540 055D                      u380 05E3                      u460 070C  
                    u541 055C                      u381 05E2                      u390 05ED  
                    u470 0738                      u550 0584                      u391 05EC  
                    u375 05D7                      u455 06E7                      u471 0737  
                    u551 0583                      u480 0754                      u481 0753  
                    u490 079B                      u395 05E9                      u491 079A  
                    u567 0683                      _adc 0556                      fsr0 0004  
                    indf 0000                      tx@a 0070                     ??_tx 0070  
                   ?_adc 0070                     l1000 058F                     l1002 0591  
                   l1010 0569                     l1004 059E                     l1012 0574  
                   l1020 065C                     l1014 057A                     l1022 0669  
                   l1008 0568                     l1024 0672                     l1016 0647  
                   l1026 067B                     l1018 0651                     STR_1 0009  
                   _RCIF 0065                     _TXIF 0064                     _dbuf 00A0  
                   _main 0647                     _prec 005C                     btemp 007E  
                   start 0000             main@adcvalue 0058                    ??_adc 0072  
                  ?_main 0070          __end_of___lwdiv 0647          __end_of___lwmod 0605  
                  _RCREG 001A                    _RCSTA 0018             vfpfcnvrt@fmt 0022  
                  _SPBRG 0099                    _TXREG 0019                    _TXSTA 0098  
                  _flags 005E                    _fputc 068E                    _width 005A  
                  _putch 052A                    _txstr 0568                    pclath 000A  
                  status 0003                    wtemp0 007E          __end_of_sprintf 05A8  
        __initialization 07EC             __end_of_main 068E                   ??_main 0041  
                 _ADCON0 001F                   _ADCON1 009F                   ?_fputc 0070  
                 _ADRESH 001E                   _ADRESL 009E                   ?_putch 0070  
                 ?_txstr 0071         __end_of_adc_init 0549             vfprintf@cfmt 007D  
              ??___lwdiv 0074                ??___lwmod 0074                   fputc@c 0070  
       __end_of_ser_init 0556                   putch@c 0070         __end_of_vfprintf 05CD  
              ??_sprintf 0034                   txstr@a 0071  __end_of__initialization 07FC  
         __pcstackCOMMON 0070            __end_of_fputc 0728            __end_of_putch 052B  
          __end_of_txstr 0585               __end_of_tx 053D                  ??_fputc 0074  
                ??_putch 0070                  ??_txstr 0073               __pbssBANK0 005A  
             __pbssBANK1 00A0               __pmaintext 0647                ?_adc_init 0070  
             __stringtab 0003                ?_ser_init 0070                  ___lwdiv 0605  
                ___lwmod 05CD                ?_vfprintf 002C               ??_adc_init 0070  
                __ptext1 0568                  __ptext2 0533                  __ptext3 0585  
                __ptext4 05A8                  __ptext5 0728                  __ptext6 068E  
                __ptext7 052A                  __ptext8 05CD                  __ptext9 0605  
                _sprintf 0585                  clrloop0 052C     end_of_initialization 07FC  
                fputc@fp 0072               ??_ser_init 0070        __end_of_vfpfcnvrt 07EC  
       vfpfcnvrt@convarg 0026               ??_vfprintf 007D                _TRISAbits 0085  
            adc@adcvalue 0072               main@buffer 0044              vfpfcnvrt@ap 0023  
            vfpfcnvrt@cp 002A              vfpfcnvrt@fp 0020      start_initialization 07EC  
            __end_of_adc 0568              vfprintf@fmt 002E                ___latbits 0002  
          __pcstackBANK0 0020         ___lwdiv@dividend 0072                 ?___lwdiv 0070  
               ?___lwmod 0070                __pstrings 0003         ___lwdiv@quotient 0074  
               ?_sprintf 0030                clear_ram0 052B                _vfpfcnvrt 0728  
             _ADCON0bits 001F              __stringbase 0008               vfpfcnvrt@c 002B  
             vfprintf@ap 002F               vfprintf@fp 002C               ?_vfpfcnvrt 0020  
     __end_of__stringtab 0009                 _adc_init 053D               sprintf@fmt 0031  
        ___lwdiv@divisor 0070          ___lwdiv@counter 0076                 __ptext10 0549  
               __ptext11 053D                 __ptext12 0556                 _ser_init 0549  
               _vfprintf 05A8                sprintf@ap 0035         ___lwmod@dividend 0072  
              stringcode 0003              ??_vfpfcnvrt 0024                 sprintf@f 0036  
               sprintf@s 0030          ___lwmod@divisor 0070          ___lwmod@counter 0074  
               stringdir 0003                 stringtab 0003  
