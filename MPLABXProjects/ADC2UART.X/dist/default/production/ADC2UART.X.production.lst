

Microchip MPLAB XC8 Assembler V2.50 build 20240725155939 
                                                                                               Fri Nov 22 18:15:15 2024

Microchip MPLAB XC8 C Compiler v2.50 (Free license) build 20240725155939 Og1 
     1                           	processor	16F877A
     2                           	pagewidth 120
     3                           	opt	flic
     4                           	psect	strings,global,class=STRING,space=0,delta=2,noexec
     5                           	psect	cinit,global,class=CODE,space=0,merge=1,delta=2
     6                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,noexec
     7                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,noexec
     8                           	psect	clrtext,global,class=CODE,space=0,delta=2
     9                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1,noexec
    10                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    11                           	psect	maintext,global,class=CODE,space=0,split=1,delta=2
    12                           	psect	text1,local,class=CODE,space=0,merge=1,delta=2
    13                           	psect	text2,local,class=CODE,space=0,merge=1,delta=2
    14                           	psect	text3,local,class=CODE,space=0,merge=1,delta=2,group=3
    15                           	psect	text4,local,class=CODE,space=0,merge=1,delta=2,group=1
    16                           	psect	text5,local,class=CODE,space=0,merge=1,delta=2,group=1
    17                           	psect	text6,local,class=CODE,space=0,merge=1,delta=2,group=3
    18                           	psect	text7,local,class=CODE,space=0,merge=1,delta=2,group=3
    19                           	psect	text8,local,class=CODE,space=0,merge=1,delta=2,group=2
    20                           	psect	text9,local,class=CODE,space=0,merge=1,delta=2,group=2
    21                           	psect	text10,local,class=CODE,space=0,merge=1,delta=2
    22                           	psect	text11,local,class=CODE,space=0,merge=1,delta=2
    23                           	psect	text12,local,class=CODE,space=0,merge=1,delta=2
    24                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=2,noexec
    25                           	dabs	1,0x7E,2
    26     0000                     
    27                           ; Generated 12/10/2023 GMT
    28                           ; 
    29                           ; Copyright Â© 2023, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution. Publication is not required when
    43                           ;        this file is used in an embedded application.
    44                           ; 
    45                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    46                           ;        software without specific prior written permission.
    47                           ; 
    48                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    49                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    50                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    51                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    52                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    53                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    54                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    55                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    56                           ; 
    57                           ; 
    58                           ; Code-generator required, PIC16F877A Definitions
    59                           ; 
    60                           ; SFR Addresses
    61     0004                     fsr             equ	4
    62     0004                     fsr0            equ	4
    63     0000                     indf            equ	0
    64     0000                     indf0           equ	0
    65     0002                     pc              equ	2
    66     0002                     pcl             equ	2
    67     000A                     pclath          equ	10
    68     0003                     status          equ	3
    69     0000                     INDF            equ	0	;# 
    70     0001                     TMR0            equ	1	;# 
    71     0002                     PCL             equ	2	;# 
    72     0003                     STATUS          equ	3	;# 
    73     0004                     FSR             equ	4	;# 
    74     0005                     PORTA           equ	5	;# 
    75     0006                     PORTB           equ	6	;# 
    76     0007                     PORTC           equ	7	;# 
    77     0008                     PORTD           equ	8	;# 
    78     0009                     PORTE           equ	9	;# 
    79     000A                     PCLATH          equ	10	;# 
    80     000B                     INTCON          equ	11	;# 
    81     000C                     PIR1            equ	12	;# 
    82     000D                     PIR2            equ	13	;# 
    83     000E                     TMR1            equ	14	;# 
    84     000E                     TMR1L           equ	14	;# 
    85     000F                     TMR1H           equ	15	;# 
    86     0010                     T1CON           equ	16	;# 
    87     0011                     TMR2            equ	17	;# 
    88     0012                     T2CON           equ	18	;# 
    89     0013                     SSPBUF          equ	19	;# 
    90     0014                     SSPCON          equ	20	;# 
    91     0015                     CCPR1           equ	21	;# 
    92     0015                     CCPR1L          equ	21	;# 
    93     0016                     CCPR1H          equ	22	;# 
    94     0017                     CCP1CON         equ	23	;# 
    95     0018                     RCSTA           equ	24	;# 
    96     0019                     TXREG           equ	25	;# 
    97     001A                     RCREG           equ	26	;# 
    98     001B                     CCPR2           equ	27	;# 
    99     001B                     CCPR2L          equ	27	;# 
   100     001C                     CCPR2H          equ	28	;# 
   101     001D                     CCP2CON         equ	29	;# 
   102     001E                     ADRESH          equ	30	;# 
   103     001F                     ADCON0          equ	31	;# 
   104     0081                     OPTION_REG      equ	129	;# 
   105     0085                     TRISA           equ	133	;# 
   106     0086                     TRISB           equ	134	;# 
   107     0087                     TRISC           equ	135	;# 
   108     0088                     TRISD           equ	136	;# 
   109     0089                     TRISE           equ	137	;# 
   110     008C                     PIE1            equ	140	;# 
   111     008D                     PIE2            equ	141	;# 
   112     008E                     PCON            equ	142	;# 
   113     0091                     SSPCON2         equ	145	;# 
   114     0092                     PR2             equ	146	;# 
   115     0093                     SSPADD          equ	147	;# 
   116     0094                     SSPSTAT         equ	148	;# 
   117     0098                     TXSTA           equ	152	;# 
   118     0099                     SPBRG           equ	153	;# 
   119     009C                     CMCON           equ	156	;# 
   120     009D                     CVRCON          equ	157	;# 
   121     009E                     ADRESL          equ	158	;# 
   122     009F                     ADCON1          equ	159	;# 
   123     010C                     EEDATA          equ	268	;# 
   124     010D                     EEADR           equ	269	;# 
   125     010E                     EEDATH          equ	270	;# 
   126     010F                     EEADRH          equ	271	;# 
   127     018C                     EECON1          equ	396	;# 
   128     018D                     EECON2          equ	397	;# 
   129     0000                     INDF            equ	0	;# 
   130     0001                     TMR0            equ	1	;# 
   131     0002                     PCL             equ	2	;# 
   132     0003                     STATUS          equ	3	;# 
   133     0004                     FSR             equ	4	;# 
   134     0005                     PORTA           equ	5	;# 
   135     0006                     PORTB           equ	6	;# 
   136     0007                     PORTC           equ	7	;# 
   137     0008                     PORTD           equ	8	;# 
   138     0009                     PORTE           equ	9	;# 
   139     000A                     PCLATH          equ	10	;# 
   140     000B                     INTCON          equ	11	;# 
   141     000C                     PIR1            equ	12	;# 
   142     000D                     PIR2            equ	13	;# 
   143     000E                     TMR1            equ	14	;# 
   144     000E                     TMR1L           equ	14	;# 
   145     000F                     TMR1H           equ	15	;# 
   146     0010                     T1CON           equ	16	;# 
   147     0011                     TMR2            equ	17	;# 
   148     0012                     T2CON           equ	18	;# 
   149     0013                     SSPBUF          equ	19	;# 
   150     0014                     SSPCON          equ	20	;# 
   151     0015                     CCPR1           equ	21	;# 
   152     0015                     CCPR1L          equ	21	;# 
   153     0016                     CCPR1H          equ	22	;# 
   154     0017                     CCP1CON         equ	23	;# 
   155     0018                     RCSTA           equ	24	;# 
   156     0019                     TXREG           equ	25	;# 
   157     001A                     RCREG           equ	26	;# 
   158     001B                     CCPR2           equ	27	;# 
   159     001B                     CCPR2L          equ	27	;# 
   160     001C                     CCPR2H          equ	28	;# 
   161     001D                     CCP2CON         equ	29	;# 
   162     001E                     ADRESH          equ	30	;# 
   163     001F                     ADCON0          equ	31	;# 
   164     0081                     OPTION_REG      equ	129	;# 
   165     0085                     TRISA           equ	133	;# 
   166     0086                     TRISB           equ	134	;# 
   167     0087                     TRISC           equ	135	;# 
   168     0088                     TRISD           equ	136	;# 
   169     0089                     TRISE           equ	137	;# 
   170     008C                     PIE1            equ	140	;# 
   171     008D                     PIE2            equ	141	;# 
   172     008E                     PCON            equ	142	;# 
   173     0091                     SSPCON2         equ	145	;# 
   174     0092                     PR2             equ	146	;# 
   175     0093                     SSPADD          equ	147	;# 
   176     0094                     SSPSTAT         equ	148	;# 
   177     0098                     TXSTA           equ	152	;# 
   178     0099                     SPBRG           equ	153	;# 
   179     009C                     CMCON           equ	156	;# 
   180     009D                     CVRCON          equ	157	;# 
   181     009E                     ADRESL          equ	158	;# 
   182     009F                     ADCON1          equ	159	;# 
   183     010C                     EEDATA          equ	268	;# 
   184     010D                     EEADR           equ	269	;# 
   185     010E                     EEDATH          equ	270	;# 
   186     010F                     EEADRH          equ	271	;# 
   187     018C                     EECON1          equ	396	;# 
   188     018D                     EECON2          equ	397	;# 
   189     001E                     _ADRESH         set	30
   190     001F                     _ADCON0bits     set	31
   191     001A                     _RCREG          set	26
   192     0019                     _TXREG          set	25
   193     001F                     _ADCON0         set	31
   194     0018                     _RCSTA          set	24
   195     0065                     _RCIF           set	101
   196     0064                     _TXIF           set	100
   197     009E                     _ADRESL         set	158
   198     009F                     _ADCON1         set	159
   199     0085                     _TRISAbits      set	133
   200     0099                     _SPBRG          set	153
   201     0098                     _TXSTA          set	152
   202                           
   203                           	psect	strings
   204     0003                     __pstrings:
   205     0003                     stringtab:
   206     0003                     __stringtab:
   207     0003                     stringcode:	
   208                           ;	String table - string pointers are 1 byte each
   209                           
   210     0003                     stringdir:
   211     0003  3000               	movlw	high stringdir
   212     0004  008A               	movwf	10
   213     0005  0804               	movf	4,w
   214     0006  0A84               	incf	4,f
   215     0007  0782               	addwf	2,f
   216     0008                     __stringbase:
   217     0008  3400               	retlw	0
   218     0009                     __end_of__stringtab:
   219     0009                     STR_1:
   220     0009  3441               	retlw	65	;'A'
   221     000A  3444               	retlw	68	;'D'
   222     000B  3443               	retlw	67	;'C'
   223     000C  3420               	retlw	32	;' '
   224     000D  3456               	retlw	86	;'V'
   225     000E  3441               	retlw	65	;'A'
   226     000F  344C               	retlw	76	;'L'
   227     0010  3455               	retlw	85	;'U'
   228     0011  3445               	retlw	69	;'E'
   229     0012  343A               	retlw	58	;':'
   230     0013  3420               	retlw	32	;' '
   231     0014  3425               	retlw	37	;'%'
   232     0015  3475               	retlw	117	;'u'
   233     0016  3400               	retlw	0
   234                           
   235                           	psect	cinit
   236     07EC                     start_initialization:	
   237                           ; #config settings
   238                           
   239     07EC                     __initialization:
   240                           
   241                           ; Clear objects allocated to BANK0
   242     07EC  1283               	bcf	3,5	;RP0=0, select bank0
   243     07ED  1303               	bcf	3,6	;RP1=0, select bank0
   244     07EE  01DA               	clrf	__pbssBANK0& (0+127)
   245     07EF  01DB               	clrf	(__pbssBANK0+1)& (0+127)
   246     07F0  01DC               	clrf	(__pbssBANK0+2)& (0+127)
   247     07F1  01DD               	clrf	(__pbssBANK0+3)& (0+127)
   248     07F2  01DE               	clrf	(__pbssBANK0+4)& (0+127)
   249                           
   250                           ; Clear objects allocated to BANK1
   251     07F3  1383               	bcf	3,7	;select IRP bank0
   252     07F4  30A0               	movlw	low __pbssBANK1
   253     07F5  0084               	movwf	4
   254     07F6  30C0               	movlw	low (__pbssBANK1+32)
   255     07F7  120A  118A  2533  120A  118A  	fcall	clear_ram0
   256     07FC                     end_of_initialization:	
   257                           ;End of C runtime variable initialization code
   258                           
   259     07FC                     __end_of__initialization:
   260     07FC  0183               	clrf	3
   261     07FD  120A  118A  2E46   	ljmp	_main	;jump to C main() function
   262                           
   263                           	psect	bssBANK0
   264     005A                     __pbssBANK0:
   265     005A                     _width:
   266     005A                     	ds	2
   267     005C                     _prec:
   268     005C                     	ds	2
   269     005E                     _flags:
   270     005E                     	ds	1
   271                           
   272                           	psect	bssBANK1
   273     00A0                     __pbssBANK1:
   274     00A0                     _dbuf:
   275     00A0                     	ds	32
   276                           
   277                           	psect	clrtext
   278     0533                     clear_ram0:	
   279                           ;	Called with FSR containing the base address, and
   280                           ;	W with the last address+1
   281                           
   282     0533  0064               	clrwdt	;clear the watchdog before getting into this loop
   283     0534                     clrloop0:
   284     0534  0180               	clrf	0	;clear RAM location pointed to by FSR
   285     0535  0A84               	incf	4,f	;increment pointer
   286     0536  0604               	xorwf	4,w	;XOR with final address
   287     0537  1903               	btfsc	3,2	;have we reached the end yet?
   288     0538  3400               	retlw	0	;all done for this memory range, return
   289     0539  0604               	xorwf	4,w	;XOR again to restore value
   290     053A  2D34               	goto	clrloop0	;do the next byte
   291                           
   292                           	psect	cstackCOMMON
   293     0070                     __pcstackCOMMON:
   294     0070                     ?_ser_init:
   295     0070                     ?_adc_init:	
   296                           ; 1 bytes @ 0x0
   297                           
   298     0070                     ?_tx:	
   299                           ; 1 bytes @ 0x0
   300                           
   301     0070                     ?_putch:	
   302                           ; 1 bytes @ 0x0
   303                           
   304     0070                     ?_main:	
   305                           ; 1 bytes @ 0x0
   306                           
   307     0070                     ?_adc:	
   308                           ; 1 bytes @ 0x0
   309                           
   310     0070                     ?_fputc:	
   311                           ; 2 bytes @ 0x0
   312                           
   313     0070                     ?___lwdiv:	
   314                           ; 2 bytes @ 0x0
   315                           
   316     0070                     ?___lwmod:	
   317                           ; 2 bytes @ 0x0
   318                           
   319     0070                     tx@a:	
   320                           ; 2 bytes @ 0x0
   321                           
   322     0070                     putch@c:	
   323                           ; 1 bytes @ 0x0
   324                           
   325     0070                     ___lwdiv@divisor:	
   326                           ; 1 bytes @ 0x0
   327                           
   328     0070                     ___lwmod@divisor:	
   329                           ; 2 bytes @ 0x0
   330                           
   331     0070                     fputc@c:	
   332                           ; 2 bytes @ 0x0
   333                           
   334     0070                     ??_ser_init:	
   335                           ; 2 bytes @ 0x0
   336                           
   337     0070                     ??_adc_init:	
   338                           ; 1 bytes @ 0x0
   339                           
   340     0070                     ??_tx:	
   341                           ; 1 bytes @ 0x0
   342                           
   343     0070                     ??_putch:	
   344                           ; 1 bytes @ 0x0
   345                           
   346                           
   347                           ; 1 bytes @ 0x0
   348     0070                     	ds	1
   349     0071                     ?_txstr:
   350     0071                     txstr@a:	
   351                           ; 1 bytes @ 0x1
   352                           
   353                           
   354                           ; 1 bytes @ 0x1
   355     0071                     	ds	1
   356     0072                     adc@adcvalue:
   357     0072                     ___lwdiv@dividend:	
   358                           ; 2 bytes @ 0x2
   359                           
   360     0072                     ___lwmod@dividend:	
   361                           ; 2 bytes @ 0x2
   362                           
   363     0072                     fputc@fp:	
   364                           ; 2 bytes @ 0x2
   365                           
   366     0072                     ??_adc:	
   367                           ; 2 bytes @ 0x2
   368                           
   369     0072                     ??_txstr:	
   370                           ; 1 bytes @ 0x2
   371                           
   372                           
   373                           ; 1 bytes @ 0x2
   374     0072                     	ds	2
   375     0074                     ___lwmod@counter:
   376     0074                     ___lwdiv@quotient:	
   377                           ; 1 bytes @ 0x4
   378                           
   379     0074                     ??_fputc:	
   380                           ; 2 bytes @ 0x4
   381                           
   382     0074                     ??___lwdiv:	
   383                           ; 1 bytes @ 0x4
   384                           
   385     0074                     ??___lwmod:	
   386                           ; 1 bytes @ 0x4
   387                           
   388                           
   389                           ; 1 bytes @ 0x4
   390     0074                     	ds	2
   391     0076                     ___lwdiv@counter:
   392                           
   393                           ; 1 bytes @ 0x6
   394     0076                     	ds	7
   395     007D                     vfprintf@cfmt:
   396     007D                     ??_vfprintf:	
   397                           ; 1 bytes @ 0xD
   398                           
   399                           
   400                           ; 1 bytes @ 0xD
   401     007D                     	ds	1
   402                           
   403                           	psect	cstackBANK0
   404     0020                     __pcstackBANK0:
   405     0020                     ?_vfpfcnvrt:
   406     0020                     vfpfcnvrt@fp:	
   407                           ; 1 bytes @ 0x0
   408                           
   409                           
   410                           ; 2 bytes @ 0x0
   411     0020                     	ds	2
   412     0022                     vfpfcnvrt@fmt:
   413                           
   414                           ; 1 bytes @ 0x2
   415     0022                     	ds	1
   416     0023                     vfpfcnvrt@ap:
   417                           
   418                           ; 1 bytes @ 0x3
   419     0023                     	ds	1
   420     0024                     ??_vfpfcnvrt:
   421                           
   422                           ; 1 bytes @ 0x4
   423     0024                     	ds	2
   424     0026                     vfpfcnvrt@convarg:
   425                           
   426                           ; 4 bytes @ 0x6
   427     0026                     	ds	4
   428     002A                     vfpfcnvrt@cp:
   429                           
   430                           ; 1 bytes @ 0xA
   431     002A                     	ds	1
   432     002B                     vfpfcnvrt@c:
   433                           
   434                           ; 1 bytes @ 0xB
   435     002B                     	ds	1
   436     002C                     ?_vfprintf:
   437     002C                     vfprintf@fp:	
   438                           ; 2 bytes @ 0xC
   439                           
   440                           
   441                           ; 2 bytes @ 0xC
   442     002C                     	ds	2
   443     002E                     vfprintf@fmt:
   444                           
   445                           ; 1 bytes @ 0xE
   446     002E                     	ds	1
   447     002F                     vfprintf@ap:
   448                           
   449                           ; 1 bytes @ 0xF
   450     002F                     	ds	1
   451     0030                     ?_sprintf:
   452     0030                     sprintf@s:	
   453                           ; 2 bytes @ 0x10
   454                           
   455                           
   456                           ; 1 bytes @ 0x10
   457     0030                     	ds	1
   458     0031                     sprintf@fmt:
   459                           
   460                           ; 1 bytes @ 0x11
   461     0031                     	ds	3
   462     0034                     ??_sprintf:
   463                           
   464                           ; 1 bytes @ 0x14
   465     0034                     	ds	1
   466     0035                     sprintf@ap:
   467                           
   468                           ; 1 bytes @ 0x15
   469     0035                     	ds	1
   470     0036                     sprintf@f:
   471                           
   472                           ; 11 bytes @ 0x16
   473     0036                     	ds	11
   474     0041                     ??_main:
   475                           
   476                           ; 1 bytes @ 0x21
   477     0041                     	ds	3
   478     0044                     main@buffer:
   479                           
   480                           ; 20 bytes @ 0x24
   481     0044                     	ds	20
   482     0058                     main@adcvalue:
   483                           
   484                           ; 2 bytes @ 0x38
   485     0058                     	ds	2
   486                           
   487                           	psect	maintext
   488     0646                     __pmaintext:	
   489 ;;
   490 ;;Main: autosize = 0, tempsize = 3, incstack = 0, save=0
   491 ;;
   492 ;; *************** function _main *****************
   493 ;; Defined at:
   494 ;;		line 22 in file "main.c"
   495 ;; Parameters:    Size  Location     Type
   496 ;;		None
   497 ;; Auto vars:     Size  Location     Type
   498 ;;  buffer         20   36[BANK0 ] unsigned char [20]
   499 ;;  adcvalue        2   56[BANK0 ] unsigned int 
   500 ;; Return value:  Size  Location     Type
   501 ;;                  1    wreg      void 
   502 ;; Registers used:
   503 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   504 ;; Tracked objects:
   505 ;;		On entry : B00/0
   506 ;;		On exit  : 0/0
   507 ;;		Unchanged: 0/0
   508 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   509 ;;      Params:         0       0       0       0       0
   510 ;;      Locals:         0      22       0       0       0
   511 ;;      Temps:          0       3       0       0       0
   512 ;;      Totals:         0      25       0       0       0
   513 ;;Total ram usage:       25 bytes
   514 ;; Hardware stack levels required when called: 5
   515 ;; This function calls:
   516 ;;		_adc
   517 ;;		_adc_init
   518 ;;		_ser_init
   519 ;;		_sprintf
   520 ;;		_tx
   521 ;;		_txstr
   522 ;; This function is called by:
   523 ;;		Startup code after reset
   524 ;; This function uses a non-reentrant model
   525 ;;
   526                           
   527     0646                     _main:	
   528                           ;psect for function _main
   529                           
   530     0646                     l1020:	
   531                           ;incstack = 0
   532                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   533                           
   534                           
   535                           ;main.c: 23:     ser_init();
   536     0646  120A  118A  2551  120A  118A  	fcall	_ser_init
   537                           
   538                           ;main.c: 24:     adc_init();
   539     064B  120A  118A  2545  120A  118A  	fcall	_adc_init
   540     0650                     l1022:
   541                           
   542                           ;main.c: 26:         unsigned int adcvalue = adc();
   543     0650  120A  118A  255E  120A  118A  	fcall	_adc
   544     0655  0871               	movf	?_adc+1,w
   545     0656  1283               	bcf	3,5	;RP0=0, select bank0
   546     0657  1303               	bcf	3,6	;RP1=0, select bank0
   547     0658  00D9               	movwf	main@adcvalue+1
   548     0659  0870               	movf	?_adc,w
   549     065A  00D8               	movwf	main@adcvalue
   550     065B                     l1024:
   551                           
   552                           ;main.c: 27:         unsigned char buffer[20];;main.c: 28:         sprintf(buffer, "ADC 
      +                          VALUE: %u", adcvalue);
   553     065B  3044               	movlw	(low (main@buffer| 0))& (0+255)
   554     065C  00B0               	movwf	sprintf@s
   555     065D  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   556     065E  00B1               	movwf	sprintf@fmt
   557     065F  0859               	movf	main@adcvalue+1,w
   558     0660  00B3               	movwf	?_sprintf+3
   559     0661  0858               	movf	main@adcvalue,w
   560     0662  00B2               	movwf	?_sprintf+2
   561     0663  120A  118A  2584  120A  118A  	fcall	_sprintf
   562     0668                     l1026:
   563                           
   564                           ;main.c: 29:         txstr(buffer);
   565     0668  3044               	movlw	(low (main@buffer| 0))& (0+255)
   566     0669  00F1               	movwf	txstr@a
   567     066A  120A  118A  2570  120A  118A  	fcall	_txstr
   568     066F                     l1028:
   569                           
   570                           ;main.c: 30:         tx('\r');
   571     066F  300D               	movlw	13
   572     0670  120A  118A  253B  120A  118A  	fcall	_tx
   573     0675                     l1030:
   574                           
   575                           ;main.c: 31:         tx('\n');
   576     0675  300A               	movlw	10
   577     0676  120A  118A  253B  120A  118A  	fcall	_tx
   578     067B                     l1032:
   579                           
   580                           ;main.c: 32:         _delay((unsigned long)((1000)*(20000000/4000.0)));
   581     067B  301A               	movlw	26
   582     067C  1283               	bcf	3,5	;RP0=0, select bank0
   583     067D  1303               	bcf	3,6	;RP1=0, select bank0
   584     067E  00C3               	movwf	??_main+2
   585     067F  305E               	movlw	94
   586     0680  00C2               	movwf	??_main+1
   587     0681  306D               	movlw	109
   588     0682  00C1               	movwf	??_main
   589     0683                     u567:
   590     0683  0BC1               	decfsz	??_main,f
   591     0684  2E83               	goto	u567
   592     0685  0BC2               	decfsz	??_main+1,f
   593     0686  2E83               	goto	u567
   594     0687  0BC3               	decfsz	??_main+2,f
   595     0688  2E83               	goto	u567
   596     0689  2E8A               	nop2
   597     068A  2E50               	goto	l1022
   598     068B  120A  118A  2800   	ljmp	start
   599     068E                     __end_of_main:
   600                           
   601                           	psect	text1
   602     0570                     __ptext1:	
   603 ;; *************** function _txstr *****************
   604 ;; Defined at:
   605 ;;		line 55 in file "main.c"
   606 ;; Parameters:    Size  Location     Type
   607 ;;  a               1    1[COMMON] PTR unsigned char 
   608 ;;		 -> main@buffer(20), 
   609 ;; Auto vars:     Size  Location     Type
   610 ;;		None
   611 ;; Return value:  Size  Location     Type
   612 ;;                  1    wreg      void 
   613 ;; Registers used:
   614 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   615 ;; Tracked objects:
   616 ;;		On entry : 0/0
   617 ;;		On exit  : 0/0
   618 ;;		Unchanged: 0/0
   619 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   620 ;;      Params:         1       0       0       0       0
   621 ;;      Locals:         0       0       0       0       0
   622 ;;      Temps:          0       0       0       0       0
   623 ;;      Totals:         1       0       0       0       0
   624 ;;Total ram usage:        1 bytes
   625 ;; Hardware stack levels used: 1
   626 ;; Hardware stack levels required when called: 1
   627 ;; This function calls:
   628 ;;		_tx
   629 ;; This function is called by:
   630 ;;		_main
   631 ;; This function uses a non-reentrant model
   632 ;;
   633                           
   634     0570                     _txstr:	
   635                           ;psect for function _txstr
   636                           
   637     0570                     l1012:	
   638                           ;incstack = 0
   639                           ; Regs used in _txstr: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   640                           
   641                           
   642                           ;main.c: 56:     while(*a){
   643     0570  2D7B               	goto	l1018
   644     0571                     l1014:
   645                           
   646                           ;main.c: 57:         tx(*a++);
   647     0571  0871               	movf	txstr@a,w
   648     0572  0084               	movwf	4
   649     0573  0800               	movf	0,w
   650     0574  120A  118A  253B  120A  118A  	fcall	_tx
   651     0579                     l1016:
   652     0579  3001               	movlw	1
   653     057A  07F1               	addwf	txstr@a,f
   654     057B                     l1018:
   655                           
   656                           ;main.c: 56:     while(*a){
   657     057B  0871               	movf	txstr@a,w
   658     057C  0084               	movwf	4
   659     057D  1383               	bcf	3,7	;select IRP bank0
   660     057E  0800               	movf	0,w
   661     057F  1D03               	btfss	3,2
   662     0580  2D82               	goto	u551
   663     0581  2D83               	goto	u550
   664     0582                     u551:
   665     0582  2D71               	goto	l1014
   666     0583                     u550:
   667     0583                     l72:
   668     0583  0008               	return
   669     0584                     __end_of_txstr:
   670                           
   671                           	psect	text2
   672     053B                     __ptext2:	
   673 ;; *************** function _tx *****************
   674 ;; Defined at:
   675 ;;		line 47 in file "main.c"
   676 ;; Parameters:    Size  Location     Type
   677 ;;  a               1    wreg     unsigned char 
   678 ;; Auto vars:     Size  Location     Type
   679 ;;  a               1    0[COMMON] unsigned char 
   680 ;; Return value:  Size  Location     Type
   681 ;;                  1    wreg      void 
   682 ;; Registers used:
   683 ;;		wreg
   684 ;; Tracked objects:
   685 ;;		On entry : 0/0
   686 ;;		On exit  : 0/0
   687 ;;		Unchanged: 0/0
   688 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   689 ;;      Params:         0       0       0       0       0
   690 ;;      Locals:         1       0       0       0       0
   691 ;;      Temps:          0       0       0       0       0
   692 ;;      Totals:         1       0       0       0       0
   693 ;;Total ram usage:        1 bytes
   694 ;; Hardware stack levels used: 1
   695 ;; This function calls:
   696 ;;		Nothing
   697 ;; This function is called by:
   698 ;;		_main
   699 ;;		_txstr
   700 ;; This function uses a non-reentrant model
   701 ;;
   702                           
   703     053B                     _tx:	
   704                           ;psect for function _tx
   705                           
   706                           
   707                           ;incstack = 0
   708                           ; Regs used in _tx: [wreg]
   709                           ;tx@a stored from wreg
   710     053B  00F0               	movwf	tx@a
   711     053C                     l974:
   712     053C                     l57:	
   713                           ;main.c: 48:     while(!TXIF);
   714                           
   715     053C  1283               	bcf	3,5	;RP0=0, select bank0
   716     053D  1303               	bcf	3,6	;RP1=0, select bank0
   717     053E  1E0C               	btfss	12,4	;volatile
   718     053F  2D41               	goto	u521
   719     0540  2D42               	goto	u520
   720     0541                     u521:
   721     0541  2D3C               	goto	l57
   722     0542                     u520:
   723     0542                     l976:
   724                           
   725                           ;main.c: 49:     TXREG = a;
   726     0542  0870               	movf	tx@a,w
   727     0543  0099               	movwf	25	;volatile
   728     0544                     l60:
   729     0544  0008               	return
   730     0545                     __end_of_tx:
   731                           
   732                           	psect	text3
   733     0584                     __ptext3:	
   734 ;; *************** function _sprintf *****************
   735 ;; Defined at:
   736 ;;		line 9 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_sprintf.c"
   737 ;; Parameters:    Size  Location     Type
   738 ;;  s               1   16[BANK0 ] PTR unsigned char 
   739 ;;		 -> main@buffer(20), 
   740 ;;  fmt             1   17[BANK0 ] PTR const unsigned char 
   741 ;;		 -> STR_1(14), 
   742 ;; Auto vars:     Size  Location     Type
   743 ;;  f              11   22[BANK0 ] struct _IO_FILE
   744 ;;  ret             2    0        int 
   745 ;;  ap              1   21[BANK0 ] PTR void [1]
   746 ;;		 -> ?_sprintf(2), 
   747 ;; Return value:  Size  Location     Type
   748 ;;                  2   16[BANK0 ] int 
   749 ;; Registers used:
   750 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   751 ;; Tracked objects:
   752 ;;		On entry : 0/0
   753 ;;		On exit  : 0/0
   754 ;;		Unchanged: 0/0
   755 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   756 ;;      Params:         0       4       0       0       0
   757 ;;      Locals:         0      12       0       0       0
   758 ;;      Temps:          0       1       0       0       0
   759 ;;      Totals:         0      17       0       0       0
   760 ;;Total ram usage:       17 bytes
   761 ;; Hardware stack levels used: 1
   762 ;; Hardware stack levels required when called: 4
   763 ;; This function calls:
   764 ;;		_vfprintf
   765 ;; This function is called by:
   766 ;;		_main
   767 ;; This function uses a non-reentrant model
   768 ;;
   769                           
   770     0584                     _sprintf:	
   771                           ;psect for function _sprintf
   772                           
   773     0584                     l998:	
   774                           ;incstack = 0
   775                           ; Regs used in _sprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   776                           
   777     0584  3032               	movlw	(low ((?_sprintf| 0+2)))& (0+255)
   778     0585  1283               	bcf	3,5	;RP0=0, select bank0
   779     0586  1303               	bcf	3,6	;RP1=0, select bank0
   780     0587  00B5               	movwf	sprintf@ap
   781     0588                     l1000:
   782     0588  0830               	movf	sprintf@s,w
   783     0589  00B6               	movwf	sprintf@f
   784     058A  3000               	movlw	0
   785     058B  00B7               	movwf	sprintf@f+1
   786     058C                     l1002:
   787     058C  01B8               	clrf	sprintf@f+2
   788     058D  01B9               	clrf	sprintf@f+3
   789     058E                     l1004:
   790     058E  01BF               	clrf	sprintf@f+9
   791     058F  01C0               	clrf	sprintf@f+10
   792     0590                     l1006:
   793     0590  3036               	movlw	low sprintf@f
   794     0591  00AC               	movwf	vfprintf@fp
   795     0592  3000               	movlw	high sprintf@f
   796     0593  00AD               	movwf	vfprintf@fp+1
   797     0594  0831               	movf	sprintf@fmt,w
   798     0595  00AE               	movwf	vfprintf@fmt
   799     0596  3035               	movlw	(low (sprintf@ap| 0))& (0+255)
   800     0597  00AF               	movwf	vfprintf@ap
   801     0598  120A  118A  25A7  120A  118A  	fcall	_vfprintf
   802     059D                     l1008:
   803     059D  1283               	bcf	3,5	;RP0=0, select bank0
   804     059E  1303               	bcf	3,6	;RP1=0, select bank0
   805     059F  0838               	movf	sprintf@f+2,w
   806     05A0  0730               	addwf	sprintf@s,w
   807     05A1  00B4               	movwf	??_sprintf
   808     05A2  0834               	movf	??_sprintf,w
   809     05A3  0084               	movwf	4
   810     05A4  1383               	bcf	3,7	;select IRP bank0
   811     05A5  0180               	clrf	0
   812     05A6                     l627:
   813     05A6  0008               	return
   814     05A7                     __end_of_sprintf:
   815                           
   816                           	psect	text4
   817     05A7                     __ptext4:	
   818 ;; *************** function _vfprintf *****************
   819 ;; Defined at:
   820 ;;		line 1817 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
   821 ;; Parameters:    Size  Location     Type
   822 ;;  fp              2   12[BANK0 ] PTR struct _IO_FILE
   823 ;;		 -> sprintf@f(11), 
   824 ;;  fmt             1   14[BANK0 ] PTR const unsigned char 
   825 ;;		 -> STR_1(14), 
   826 ;;  ap              1   15[BANK0 ] PTR PTR void 
   827 ;;		 -> sprintf@ap(1), 
   828 ;; Auto vars:     Size  Location     Type
   829 ;;  cfmt            1   13[COMMON] PTR unsigned char 
   830 ;;		 -> STR_1(14), 
   831 ;; Return value:  Size  Location     Type
   832 ;;                  2   12[BANK0 ] int 
   833 ;; Registers used:
   834 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   835 ;; Tracked objects:
   836 ;;		On entry : 0/0
   837 ;;		On exit  : 0/0
   838 ;;		Unchanged: 0/0
   839 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   840 ;;      Params:         0       4       0       0       0
   841 ;;      Locals:         1       0       0       0       0
   842 ;;      Temps:          0       0       0       0       0
   843 ;;      Totals:         1       4       0       0       0
   844 ;;Total ram usage:        5 bytes
   845 ;; Hardware stack levels used: 1
   846 ;; Hardware stack levels required when called: 3
   847 ;; This function calls:
   848 ;;		_vfpfcnvrt
   849 ;; This function is called by:
   850 ;;		_sprintf
   851 ;; This function uses a non-reentrant model
   852 ;;
   853                           
   854     05A7                     _vfprintf:	
   855                           ;psect for function _vfprintf
   856                           
   857     05A7                     l978:	
   858                           ;incstack = 0
   859                           ; Regs used in _vfprintf: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   860                           
   861                           
   862                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1817: int vfprint
      +                          f(FILE *fp, const char *fmt, va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\source
      +                          s\c99\common\doprnt.c: 1818: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\comm
      +                          on\doprnt.c: 1820:     char *cfmt;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\
      +                          common\doprnt.c: 1822:     cfmt = (char *)fmt;
   863     05A7  1283               	bcf	3,5	;RP0=0, select bank0
   864     05A8  1303               	bcf	3,6	;RP1=0, select bank0
   865     05A9  082E               	movf	vfprintf@fmt,w
   866     05AA  00FD               	movwf	vfprintf@cfmt
   867                           
   868                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
   869     05AB  2DBB               	goto	l982
   870     05AC                     l980:
   871                           
   872                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1830:    vfpfcnvr
      +                          t(fp, &cfmt, ap);
   873     05AC  1283               	bcf	3,5	;RP0=0, select bank0
   874     05AD  1303               	bcf	3,6	;RP1=0, select bank0
   875     05AE  082C               	movf	vfprintf@fp,w
   876     05AF  00A0               	movwf	vfpfcnvrt@fp
   877     05B0  082D               	movf	vfprintf@fp+1,w
   878     05B1  00A1               	movwf	vfpfcnvrt@fp+1
   879     05B2  307D               	movlw	(low (vfprintf@cfmt| 0))& (0+255)
   880     05B3  00A2               	movwf	vfpfcnvrt@fmt
   881     05B4  082F               	movf	vfprintf@ap,w
   882     05B5  00A3               	movwf	vfpfcnvrt@ap
   883     05B6  120A  118A  2728  120A  118A  	fcall	_vfpfcnvrt
   884     05BB                     l982:
   885                           
   886                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1826:     while (
      +                          *cfmt) {
   887     05BB  087D               	movf	vfprintf@cfmt,w
   888     05BC  0084               	movwf	4
   889     05BD  120A  118A  2003  120A  118A  	fcall	stringdir
   890     05C2  3A00               	xorlw	0
   891     05C3  1D03               	skipz
   892     05C4  2DC6               	goto	u531
   893     05C5  2DC7               	goto	u530
   894     05C6                     u531:
   895     05C6  2DAC               	goto	l980
   896     05C7                     u530:
   897     05C7                     l984:
   898                           
   899                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1835:  return 0;
   900     05C7  1283               	bcf	3,5	;RP0=0, select bank0
   901     05C8  1303               	bcf	3,6	;RP1=0, select bank0
   902     05C9  01AC               	clrf	?_vfprintf
   903     05CA  01AD               	clrf	?_vfprintf+1
   904     05CB                     l671:
   905     05CB  0008               	return
   906     05CC                     __end_of_vfprintf:
   907                           
   908                           	psect	text5
   909     0728                     __ptext5:	
   910 ;; *************** function _vfpfcnvrt *****************
   911 ;; Defined at:
   912 ;;		line 1177 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c"
   913 ;; Parameters:    Size  Location     Type
   914 ;;  fp              2    0[BANK0 ] PTR struct _IO_FILE
   915 ;;		 -> sprintf@f(11), 
   916 ;;  fmt             1    2[BANK0 ] PTR PTR unsigned char 
   917 ;;		 -> vfprintf@cfmt(1), 
   918 ;;  ap              1    3[BANK0 ] PTR PTR void 
   919 ;;		 -> sprintf@ap(1), 
   920 ;; Auto vars:     Size  Location     Type
   921 ;;  convarg         4    6[BANK0 ] struct .
   922 ;;  c               1   11[BANK0 ] unsigned char 
   923 ;;  cp              1   10[BANK0 ] PTR unsigned char 
   924 ;;		 -> STR_1(14), 
   925 ;;  done            1    0        _Bool 
   926 ;; Return value:  Size  Location     Type
   927 ;;                  1    wreg      void 
   928 ;; Registers used:
   929 ;;		wreg, fsr0l, fsr0h, status,2, status,0, btemp+1, pclath, cstack
   930 ;; Tracked objects:
   931 ;;		On entry : 0/0
   932 ;;		On exit  : 0/0
   933 ;;		Unchanged: 0/0
   934 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   935 ;;      Params:         0       4       0       0       0
   936 ;;      Locals:         0       6       0       0       0
   937 ;;      Temps:          0       2       0       0       0
   938 ;;      Totals:         0      12       0       0       0
   939 ;;Total ram usage:       12 bytes
   940 ;; Hardware stack levels used: 1
   941 ;; Hardware stack levels required when called: 2
   942 ;; This function calls:
   943 ;;		___lwdiv
   944 ;;		___lwmod
   945 ;;		_fputc
   946 ;; This function is called by:
   947 ;;		_vfprintf
   948 ;; This function uses a non-reentrant model
   949 ;;
   950                           
   951     0728                     _vfpfcnvrt:	
   952                           ;psect for function _vfpfcnvrt
   953                           
   954     0728                     l930:	
   955                           ;incstack = 0
   956                           ; Regs used in _vfpfcnvrt: [wreg-fsr0h+status,2+status,0+btemp+1+pclath+cstack]
   957                           
   958                           
   959                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1177: vfpfcnvrt(F
      +                          ILE *fp, char *fmt[], va_list ap);C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\c
      +                          ommon\doprnt.c: 1178: {;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\dopr
      +                          nt.c: 1179:     char c, *cp;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common
      +                          \doprnt.c: 1180:     _Bool done;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1188:  } convarg;;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\co
      +                          mmon\doprnt.c: 1201:     if ((*fmt)[0] == '%') {
   960     0728  1283               	bcf	3,5	;RP0=0, select bank0
   961     0729  1303               	bcf	3,6	;RP1=0, select bank0
   962     072A  0822               	movf	vfpfcnvrt@fmt,w
   963     072B  0084               	movwf	4
   964     072C  0800               	movf	0,w
   965     072D  0084               	movwf	4
   966     072E  120A  118A  2003  120A  118A  	fcall	stringdir
   967     0733  3A25               	xorlw	37
   968     0734  1D03               	skipz
   969     0735  2F37               	goto	u471
   970     0736  2F38               	goto	u470
   971     0737                     u471:
   972     0737  2FD2               	goto	l968
   973     0738                     u470:
   974     0738                     l932:
   975                           
   976                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1202:         ++*
      +                          fmt;
   977     0738  0822               	movf	vfpfcnvrt@fmt,w
   978     0739  0084               	movwf	4
   979     073A  3001               	movlw	1
   980     073B  0780               	addwf	0,f
   981     073C                     l934:
   982                           
   983                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1204:         fla
      +                          gs = width = 0;
   984     073C  01DA               	clrf	_width
   985     073D  01DB               	clrf	_width+1
   986     073E  3000               	movlw	0
   987     073F  00DE               	movwf	_flags
   988     0740                     l936:
   989                           
   990                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1205:         pre
      +                          c = -1;
   991     0740  30FF               	movlw	255
   992     0741  00DC               	movwf	_prec
   993     0742  30FF               	movlw	255
   994     0743  00DD               	movwf	_prec+1
   995     0744                     l938:
   996                           
   997                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1439:   if (0
   998     0744  0822               	movf	vfpfcnvrt@fmt,w
   999     0745  0084               	movwf	4
  1000     0746  0800               	movf	0,w
  1001     0747  00AA               	movwf	vfpfcnvrt@cp
  1002     0748                     l940:
  1003     0748  082A               	movf	vfpfcnvrt@cp,w
  1004     0749  0084               	movwf	4
  1005     074A  120A  118A  2003  120A  118A  	fcall	stringdir
  1006     074F  3A75               	xorlw	117
  1007     0750  1D03               	skipz
  1008     0751  2F53               	goto	u481
  1009     0752  2F54               	goto	u480
  1010     0753                     u481:
  1011     0753  2FCB               	goto	l964
  1012     0754                     u480:
  1013     0754                     l942:
  1014                           
  1015                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1452:     ) {;C:\
      +                          Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1495:    convarg.uint
      +                           = (vfpf_uint_t)(unsigned int)(*(unsigned int *)__va_arg(*(unsigned int **)ap, (unsigned
      +                           int)0));
  1016     0754  0823               	movf	vfpfcnvrt@ap,w
  1017     0755  0084               	movwf	4
  1018     0756  1383               	bcf	3,7	;select IRP bank0
  1019     0757  0800               	movf	0,w
  1020     0758  00FF               	movwf	btemp+1
  1021     0759  3002               	movlw	2
  1022     075A  0780               	addwf	0,f
  1023     075B  087F               	movf	btemp+1,w
  1024     075C  0084               	movwf	4
  1025     075D  0800               	movf	0,w
  1026     075E  00A6               	movwf	vfpfcnvrt@convarg
  1027     075F  0A84               	incf	4,f
  1028     0760  0800               	movf	0,w
  1029     0761  00A7               	movwf	vfpfcnvrt@convarg+1
  1030     0762                     l944:
  1031                           
  1032                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1497:    *fmt = c
      +                          p+1;
  1033     0762  0822               	movf	vfpfcnvrt@fmt,w
  1034     0763  0084               	movwf	4
  1035     0764  082A               	movf	vfpfcnvrt@cp,w
  1036     0765  3E01               	addlw	1
  1037     0766  0080               	movwf	0
  1038                           
  1039                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1498:    switch (
      +                          *cp) {
  1040     0767  2FC0               	goto	l962
  1041     0768                     l656:	
  1042                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1523:     case 'u
      +                          ':
  1043                           
  1044                           
  1045                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1525:      c = si
      +                          zeof(dbuf);
  1046     0768  3020               	movlw	32
  1047     0769  00AB               	movwf	vfpfcnvrt@c
  1048     076A                     l946:
  1049                           
  1050                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1527:       dbuf[
      +                          --c] = (convarg.uint % 10) + '0';
  1051     076A  3001               	movlw	1
  1052     076B  02AB               	subwf	vfpfcnvrt@c,f
  1053     076C  082B               	movf	vfpfcnvrt@c,w
  1054     076D  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  1055     076E  0084               	movwf	4
  1056     076F  300A               	movlw	10
  1057     0770  00F0               	movwf	___lwmod@divisor
  1058     0771  3000               	movlw	0
  1059     0772  00F1               	movwf	___lwmod@divisor+1
  1060     0773  0827               	movf	vfpfcnvrt@convarg+1,w
  1061     0774  00F3               	movwf	___lwmod@dividend+1
  1062     0775  0826               	movf	vfpfcnvrt@convarg,w
  1063     0776  00F2               	movwf	___lwmod@dividend
  1064     0777  120A  118A  25CC  120A  118A  	fcall	___lwmod
  1065     077C  0870               	movf	?___lwmod,w
  1066     077D  3E30               	addlw	48
  1067     077E  1383               	bcf	3,7	;select IRP bank1
  1068     077F  0080               	movwf	0
  1069     0780                     l948:
  1070                           
  1071                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1528:       conva
      +                          rg.uint /= 10;
  1072     0780  300A               	movlw	10
  1073     0781  00F0               	movwf	___lwdiv@divisor
  1074     0782  3000               	movlw	0
  1075     0783  00F1               	movwf	___lwdiv@divisor+1
  1076     0784  1283               	bcf	3,5	;RP0=0, select bank0
  1077     0785  1303               	bcf	3,6	;RP1=0, select bank0
  1078     0786  0827               	movf	vfpfcnvrt@convarg+1,w
  1079     0787  00F3               	movwf	___lwdiv@dividend+1
  1080     0788  0826               	movf	vfpfcnvrt@convarg,w
  1081     0789  00F2               	movwf	___lwdiv@dividend
  1082     078A  120A  118A  2604  120A  118A  	fcall	___lwdiv
  1083     078F  0871               	movf	?___lwdiv+1,w
  1084     0790  1283               	bcf	3,5	;RP0=0, select bank0
  1085     0791  1303               	bcf	3,6	;RP1=0, select bank0
  1086     0792  00A7               	movwf	vfpfcnvrt@convarg+1
  1087     0793  0870               	movf	?___lwdiv,w
  1088     0794  00A6               	movwf	vfpfcnvrt@convarg
  1089     0795                     l950:
  1090                           
  1091                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1532:      } whil
      +                          e (convarg.uint != 0 && c != 0);
  1092     0795  0826               	movf	vfpfcnvrt@convarg,w
  1093     0796  0427               	iorwf	vfpfcnvrt@convarg+1,w
  1094     0797  1903               	btfsc	3,2
  1095     0798  2F9A               	goto	u491
  1096     0799  2F9B               	goto	u490
  1097     079A                     u491:
  1098     079A  2FB9               	goto	l958
  1099     079B                     u490:
  1100     079B                     l952:
  1101     079B  082B               	movf	vfpfcnvrt@c,w
  1102     079C  1D03               	btfss	3,2
  1103     079D  2F9F               	goto	u501
  1104     079E  2FA0               	goto	u500
  1105     079F                     u501:
  1106     079F  2F6A               	goto	l946
  1107     07A0                     u500:
  1108     07A0  2FB9               	goto	l958
  1109     07A1                     l954:
  1110                           
  1111                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1534:       fputc
      +                          (dbuf[c++], fp);
  1112     07A1  082B               	movf	vfpfcnvrt@c,w
  1113     07A2  3EA0               	addlw	(low (_dbuf| 0))& (0+255)
  1114     07A3  0084               	movwf	4
  1115     07A4  1383               	bcf	3,7	;select IRP bank1
  1116     07A5  0800               	movf	0,w
  1117     07A6  00A4               	movwf	??_vfpfcnvrt
  1118     07A7  01A5               	clrf	??_vfpfcnvrt+1
  1119     07A8  0824               	movf	??_vfpfcnvrt,w
  1120     07A9  00F0               	movwf	fputc@c
  1121     07AA  0825               	movf	??_vfpfcnvrt+1,w
  1122     07AB  00F1               	movwf	fputc@c+1
  1123     07AC  0820               	movf	vfpfcnvrt@fp,w
  1124     07AD  00F2               	movwf	fputc@fp
  1125     07AE  0821               	movf	vfpfcnvrt@fp+1,w
  1126     07AF  00F3               	movwf	fputc@fp+1
  1127     07B0  120A  118A  268E  120A  118A  	fcall	_fputc
  1128     07B5                     l956:
  1129     07B5  3001               	movlw	1
  1130     07B6  1283               	bcf	3,5	;RP0=0, select bank0
  1131     07B7  1303               	bcf	3,6	;RP1=0, select bank0
  1132     07B8  07AB               	addwf	vfpfcnvrt@c,f
  1133     07B9                     l958:
  1134                           
  1135                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1533:      while 
      +                          (c != sizeof(dbuf)) {
  1136     07B9  3020               	movlw	32
  1137     07BA  062B               	xorwf	vfpfcnvrt@c,w
  1138     07BB  1D03               	btfss	3,2
  1139     07BC  2FBE               	goto	u511
  1140     07BD  2FBF               	goto	u510
  1141     07BE                     u511:
  1142     07BE  2FA1               	goto	l954
  1143     07BF                     u510:
  1144     07BF  2FEB               	goto	l664
  1145     07C0                     l962:
  1146     07C0  082A               	movf	vfpfcnvrt@cp,w
  1147     07C1  0084               	movwf	4
  1148     07C2  120A  118A  2003  120A  118A  	fcall	stringdir
  1149                           
  1150                           ; Switch size 1, requested type "simple"
  1151                           ; Number of cases is 1, Range of values is 117 to 117
  1152                           ; switch strategies available:
  1153                           ; Name         Instructions Cycles
  1154                           ; simple_byte            4     3 (average)
  1155                           ; direct_byte           14    11 (fixed)
  1156                           ; jumptable            263     9 (fixed)
  1157                           ;	Chosen strategy is simple_byte
  1158     07C7  3A75               	xorlw	117	; case 117
  1159     07C8  1903               	skipnz
  1160     07C9  2F68               	goto	l656
  1161     07CA  2FCB               	goto	l964
  1162     07CB                     l964:
  1163                           
  1164                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1806:         ++*
      +                          fmt;
  1165     07CB  1283               	bcf	3,5	;RP0=0, select bank0
  1166     07CC  1303               	bcf	3,6	;RP1=0, select bank0
  1167     07CD  0822               	movf	vfpfcnvrt@fmt,w
  1168     07CE  0084               	movwf	4
  1169     07CF  3001               	movlw	1
  1170     07D0  0780               	addwf	0,f
  1171     07D1  2FEB               	goto	l664
  1172     07D2                     l968:
  1173                           
  1174                           ;C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\doprnt.c: 1811:     fputc((
      +                          int)(*fmt)[0], fp);
  1175     07D2  0822               	movf	vfpfcnvrt@fmt,w
  1176     07D3  0084               	movwf	4
  1177     07D4  0800               	movf	0,w
  1178     07D5  0084               	movwf	4
  1179     07D6  120A  118A  2003  120A  118A  	fcall	stringdir
  1180     07DB  00A4               	movwf	??_vfpfcnvrt
  1181     07DC  01A5               	clrf	??_vfpfcnvrt+1
  1182     07DD  0824               	movf	??_vfpfcnvrt,w
  1183     07DE  00F0               	movwf	fputc@c
  1184     07DF  0825               	movf	??_vfpfcnvrt+1,w
  1185     07E0  00F1               	movwf	fputc@c+1
  1186     07E1  0820               	movf	vfpfcnvrt@fp,w
  1187     07E2  00F2               	movwf	fputc@fp
  1188     07E3  0821               	movf	vfpfcnvrt@fp+1,w
  1189     07E4  00F3               	movwf	fputc@fp+1
  1190     07E5  120A  118A  268E  120A  118A  	fcall	_fputc
  1191     07EA  2FCB               	goto	l964
  1192     07EB                     l664:
  1193     07EB  0008               	return
  1194     07EC                     __end_of_vfpfcnvrt:
  1195                           
  1196                           	psect	text6
  1197     068E                     __ptext6:	
  1198 ;; *************** function _fputc *****************
  1199 ;; Defined at:
  1200 ;;		line 8 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\nf_fputc.c"
  1201 ;; Parameters:    Size  Location     Type
  1202 ;;  c               2    0[COMMON] int 
  1203 ;;  fp              2    2[COMMON] PTR struct _IO_FILE
  1204 ;;		 -> sprintf@f(11), 
  1205 ;; Auto vars:     Size  Location     Type
  1206 ;;		None
  1207 ;; Return value:  Size  Location     Type
  1208 ;;                  2    0[COMMON] int 
  1209 ;; Registers used:
  1210 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1211 ;; Tracked objects:
  1212 ;;		On entry : 0/0
  1213 ;;		On exit  : 0/0
  1214 ;;		Unchanged: 0/0
  1215 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1216 ;;      Params:         4       0       0       0       0
  1217 ;;      Locals:         0       0       0       0       0
  1218 ;;      Temps:          9       0       0       0       0
  1219 ;;      Totals:        13       0       0       0       0
  1220 ;;Total ram usage:       13 bytes
  1221 ;; Hardware stack levels used: 1
  1222 ;; Hardware stack levels required when called: 1
  1223 ;; This function calls:
  1224 ;;		_putch
  1225 ;; This function is called by:
  1226 ;;		_vfpfcnvrt
  1227 ;; This function uses a non-reentrant model
  1228 ;;
  1229                           
  1230     068E                     _fputc:	
  1231                           ;psect for function _fputc
  1232                           
  1233     068E                     l916:	
  1234                           ;incstack = 0
  1235                           ; Regs used in _fputc: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1236                           
  1237     068E  0872               	movf	fputc@fp,w
  1238     068F  0473               	iorwf	fputc@fp+1,w
  1239     0690  1903               	btfsc	3,2
  1240     0691  2E93               	goto	u421
  1241     0692  2E94               	goto	u420
  1242     0693                     u421:
  1243     0693  2E9A               	goto	l920
  1244     0694                     u420:
  1245     0694                     l918:
  1246     0694  0872               	movf	fputc@fp,w
  1247     0695  0473               	iorwf	fputc@fp+1,w
  1248     0696  1D03               	btfss	3,2
  1249     0697  2E99               	goto	u431
  1250     0698  2E9A               	goto	u430
  1251     0699                     u431:
  1252     0699  2EA1               	goto	l922
  1253     069A                     u430:
  1254     069A                     l920:
  1255     069A  0870               	movf	fputc@c,w
  1256     069B  120A  118A  2532  120A  118A  	fcall	_putch
  1257     06A0  2F27               	goto	l683
  1258     06A1                     l922:
  1259     06A1  0872               	movf	fputc@fp,w
  1260     06A2  3E09               	addlw	9
  1261     06A3  00F4               	movwf	??_fputc
  1262     06A4  0873               	movf	fputc@fp+1,w
  1263     06A5  1803               	skipnc
  1264     06A6  3E01               	addlw	1
  1265     06A7  3E00               	addlw	0
  1266     06A8  00F5               	movwf	??_fputc+1
  1267     06A9  0874               	movf	??_fputc,w
  1268     06AA  0084               	movwf	4
  1269     06AB  1783               	bsf	3,7
  1270     06AC  1C75               	btfss	??_fputc+1,0
  1271     06AD  1383               	bcf	3,7
  1272     06AE  0800               	movf	0,w
  1273     06AF  00F6               	movwf	??_fputc+2
  1274     06B0  0A84               	incf	4,f
  1275     06B1  0800               	movf	0,w
  1276     06B2  00F7               	movwf	??_fputc+3
  1277     06B3  0876               	movf	??_fputc+2,w
  1278     06B4  0477               	iorwf	??_fputc+3,w
  1279     06B5  1903               	btfsc	3,2
  1280     06B6  2EB8               	goto	u441
  1281     06B7  2EB9               	goto	u440
  1282     06B8                     u441:
  1283     06B8  2EEB               	goto	l926
  1284     06B9                     u440:
  1285     06B9                     l924:
  1286     06B9  0872               	movf	fputc@fp,w
  1287     06BA  3E09               	addlw	9
  1288     06BB  00F4               	movwf	??_fputc
  1289     06BC  0873               	movf	fputc@fp+1,w
  1290     06BD  1803               	skipnc
  1291     06BE  3E01               	addlw	1
  1292     06BF  3E00               	addlw	0
  1293     06C0  00F5               	movwf	??_fputc+1
  1294     06C1  0874               	movf	??_fputc,w
  1295     06C2  0084               	movwf	4
  1296     06C3  1783               	bsf	3,7
  1297     06C4  1C75               	btfss	??_fputc+1,0
  1298     06C5  1383               	bcf	3,7
  1299     06C6  0800               	movf	0,w
  1300     06C7  00F6               	movwf	??_fputc+2
  1301     06C8  0A84               	incf	4,f
  1302     06C9  0800               	movf	0,w
  1303     06CA  00F7               	movwf	??_fputc+3
  1304     06CB  0872               	movf	fputc@fp,w
  1305     06CC  3E02               	addlw	2
  1306     06CD  00F8               	movwf	??_fputc+4
  1307     06CE  0873               	movf	fputc@fp+1,w
  1308     06CF  1803               	skipnc
  1309     06D0  3E01               	addlw	1
  1310     06D1  3E00               	addlw	0
  1311     06D2  00F9               	movwf	??_fputc+5
  1312     06D3  0878               	movf	??_fputc+4,w
  1313     06D4  0084               	movwf	4
  1314     06D5  1783               	bsf	3,7
  1315     06D6  1C79               	btfss	??_fputc+5,0
  1316     06D7  1383               	bcf	3,7
  1317     06D8  0800               	movf	0,w
  1318     06D9  00FA               	movwf	??_fputc+6
  1319     06DA  0A84               	incf	4,f
  1320     06DB  0800               	movf	0,w
  1321     06DC  00FB               	movwf	??_fputc+7
  1322     06DD  087B               	movf	??_fputc+7,w
  1323     06DE  3A80               	xorlw	128
  1324     06DF  00FC               	movwf	??_fputc+8
  1325     06E0  0877               	movf	??_fputc+3,w
  1326     06E1  3A80               	xorlw	128
  1327     06E2  027C               	subwf	??_fputc+8,w
  1328     06E3  1D03               	skipz
  1329     06E4  2EE7               	goto	u455
  1330     06E5  0876               	movf	??_fputc+2,w
  1331     06E6  027A               	subwf	??_fputc+6,w
  1332     06E7                     u455:
  1333     06E7  1803               	skipnc
  1334     06E8  2EEA               	goto	u451
  1335     06E9  2EEB               	goto	u450
  1336     06EA                     u451:
  1337     06EA  2F27               	goto	l683
  1338     06EB                     u450:
  1339     06EB                     l926:
  1340     06EB  0872               	movf	fputc@fp,w
  1341     06EC  0084               	movwf	4
  1342     06ED  1783               	bsf	3,7
  1343     06EE  1C73               	btfss	fputc@fp+1,0
  1344     06EF  1383               	bcf	3,7
  1345     06F0  0800               	movf	0,w
  1346     06F1  00F4               	movwf	??_fputc
  1347     06F2  0A84               	incf	4,f
  1348     06F3  0800               	movf	0,w
  1349     06F4  00F5               	movwf	??_fputc+1
  1350     06F5  0872               	movf	fputc@fp,w
  1351     06F6  3E02               	addlw	2
  1352     06F7  00F6               	movwf	??_fputc+2
  1353     06F8  0873               	movf	fputc@fp+1,w
  1354     06F9  1803               	skipnc
  1355     06FA  3E01               	addlw	1
  1356     06FB  3E00               	addlw	0
  1357     06FC  00F7               	movwf	??_fputc+3
  1358     06FD  0876               	movf	??_fputc+2,w
  1359     06FE  0084               	movwf	4
  1360     06FF  1783               	bsf	3,7
  1361     0700  1C77               	btfss	??_fputc+3,0
  1362     0701  1383               	bcf	3,7
  1363     0702  0800               	movf	0,w
  1364     0703  0774               	addwf	??_fputc,w
  1365     0704  00F9               	movwf	??_fputc+5
  1366     0705  0875               	movf	??_fputc+1,w
  1367     0706  00F8               	movwf	??_fputc+4
  1368     0707  1803               	skipnc
  1369     0708  0AF8               	incf	??_fputc+4,f
  1370     0709  1F80               	btfss	0,7
  1371     070A  2F0C               	goto	u460
  1372     070B  03F8               	decf	??_fputc+4,f
  1373     070C                     u460:
  1374     070C  0878               	movf	??_fputc+4,w
  1375     070D  00FA               	movwf	??_fputc+6
  1376     070E  0879               	movf	??_fputc+5,w
  1377     070F  0084               	movwf	4
  1378     0710  1783               	bsf	3,7
  1379     0711  1C7A               	btfss	??_fputc+6,0
  1380     0712  1383               	bcf	3,7
  1381     0713  0870               	movf	fputc@c,w
  1382     0714  0080               	movwf	0
  1383     0715  0872               	movf	fputc@fp,w
  1384     0716  3E02               	addlw	2
  1385     0717  00F4               	movwf	??_fputc
  1386     0718  0873               	movf	fputc@fp+1,w
  1387     0719  1803               	skipnc
  1388     071A  3E01               	addlw	1
  1389     071B  3E00               	addlw	0
  1390     071C  00F5               	movwf	??_fputc+1
  1391     071D  0874               	movf	??_fputc,w
  1392     071E  0084               	movwf	4
  1393     071F  1783               	bsf	3,7
  1394     0720  1C75               	btfss	??_fputc+1,0
  1395     0721  1383               	bcf	3,7
  1396     0722  3001               	movlw	1
  1397     0723  0780               	addwf	0,f
  1398     0724  0A84               	incf	4,f
  1399     0725  1803               	skipnc
  1400     0726  0A80               	incf	0,f
  1401     0727                     l683:
  1402     0727  0008               	return
  1403     0728                     __end_of_fputc:
  1404                           
  1405                           	psect	text7
  1406     0532                     __ptext7:	
  1407 ;; *************** function _putch *****************
  1408 ;; Defined at:
  1409 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\putch.c"
  1410 ;; Parameters:    Size  Location     Type
  1411 ;;  c               1    wreg     unsigned char 
  1412 ;; Auto vars:     Size  Location     Type
  1413 ;;  c               1    0[COMMON] unsigned char 
  1414 ;; Return value:  Size  Location     Type
  1415 ;;                  1    wreg      void 
  1416 ;; Registers used:
  1417 ;;		wreg
  1418 ;; Tracked objects:
  1419 ;;		On entry : 0/0
  1420 ;;		On exit  : 0/0
  1421 ;;		Unchanged: 0/0
  1422 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1423 ;;      Params:         0       0       0       0       0
  1424 ;;      Locals:         0       0       0       0       0
  1425 ;;      Temps:          0       0       0       0       0
  1426 ;;      Totals:         0       0       0       0       0
  1427 ;;Total ram usage:        0 bytes
  1428 ;; Hardware stack levels used: 1
  1429 ;; This function calls:
  1430 ;;		Nothing
  1431 ;; This function is called by:
  1432 ;;		_fputc
  1433 ;; This function uses a non-reentrant model
  1434 ;;
  1435                           
  1436     0532                     _putch:	
  1437                           ;psect for function _putch
  1438                           
  1439     0532                     l694:	
  1440                           ;incstack = 0
  1441                           ; Regs used in _putch: [wreg]
  1442                           
  1443     0532  0008               	return
  1444     0533                     __end_of_putch:
  1445                           
  1446                           	psect	text8
  1447     05CC                     __ptext8:	
  1448 ;; *************** function ___lwmod *****************
  1449 ;; Defined at:
  1450 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\lwmod.c"
  1451 ;; Parameters:    Size  Location     Type
  1452 ;;  divisor         2    0[COMMON] unsigned int 
  1453 ;;  dividend        2    2[COMMON] unsigned int 
  1454 ;; Auto vars:     Size  Location     Type
  1455 ;;  counter         1    4[COMMON] unsigned char 
  1456 ;; Return value:  Size  Location     Type
  1457 ;;                  2    0[COMMON] unsigned int 
  1458 ;; Registers used:
  1459 ;;		wreg, status,2, status,0
  1460 ;; Tracked objects:
  1461 ;;		On entry : 0/0
  1462 ;;		On exit  : 0/0
  1463 ;;		Unchanged: 0/0
  1464 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1465 ;;      Params:         4       0       0       0       0
  1466 ;;      Locals:         1       0       0       0       0
  1467 ;;      Temps:          0       0       0       0       0
  1468 ;;      Totals:         5       0       0       0       0
  1469 ;;Total ram usage:        5 bytes
  1470 ;; Hardware stack levels used: 1
  1471 ;; This function calls:
  1472 ;;		Nothing
  1473 ;; This function is called by:
  1474 ;;		_vfpfcnvrt
  1475 ;; This function uses a non-reentrant model
  1476 ;;
  1477                           
  1478     05CC                     ___lwmod:	
  1479                           ;psect for function ___lwmod
  1480                           
  1481     05CC                     l894:	
  1482                           ;incstack = 0
  1483                           ; Regs used in ___lwmod: [wreg+status,2+status,0]
  1484                           
  1485     05CC  0870               	movf	___lwmod@divisor,w
  1486     05CD  0471               	iorwf	___lwmod@divisor+1,w
  1487     05CE  1903               	btfsc	3,2
  1488     05CF  2DD1               	goto	u361
  1489     05D0  2DD2               	goto	u360
  1490     05D1                     u361:
  1491     05D1  2DFF               	goto	l912
  1492     05D2                     u360:
  1493     05D2                     l896:
  1494     05D2  3001               	movlw	1
  1495     05D3  00F4               	movwf	___lwmod@counter
  1496     05D4  2DDE               	goto	l902
  1497     05D5                     l898:
  1498     05D5  3001               	movlw	1
  1499     05D6                     u375:
  1500     05D6  1003               	clrc
  1501     05D7  0DF0               	rlf	___lwmod@divisor,f
  1502     05D8  0DF1               	rlf	___lwmod@divisor+1,f
  1503     05D9  3EFF               	addlw	-1
  1504     05DA  1D03               	skipz
  1505     05DB  2DD6               	goto	u375
  1506     05DC                     l900:
  1507     05DC  3001               	movlw	1
  1508     05DD  07F4               	addwf	___lwmod@counter,f
  1509     05DE                     l902:
  1510     05DE  1FF1               	btfss	___lwmod@divisor+1,7
  1511     05DF  2DE1               	goto	u381
  1512     05E0  2DE2               	goto	u380
  1513     05E1                     u381:
  1514     05E1  2DD5               	goto	l898
  1515     05E2                     u380:
  1516     05E2                     l904:
  1517     05E2  0871               	movf	___lwmod@divisor+1,w
  1518     05E3  0273               	subwf	___lwmod@dividend+1,w
  1519     05E4  1D03               	skipz
  1520     05E5  2DE8               	goto	u395
  1521     05E6  0870               	movf	___lwmod@divisor,w
  1522     05E7  0272               	subwf	___lwmod@dividend,w
  1523     05E8                     u395:
  1524     05E8  1C03               	skipc
  1525     05E9  2DEB               	goto	u391
  1526     05EA  2DEC               	goto	u390
  1527     05EB                     u391:
  1528     05EB  2DF2               	goto	l908
  1529     05EC                     u390:
  1530     05EC                     l906:
  1531     05EC  0870               	movf	___lwmod@divisor,w
  1532     05ED  02F2               	subwf	___lwmod@dividend,f
  1533     05EE  0871               	movf	___lwmod@divisor+1,w
  1534     05EF  1C03               	skipc
  1535     05F0  03F3               	decf	___lwmod@dividend+1,f
  1536     05F1  02F3               	subwf	___lwmod@dividend+1,f
  1537     05F2                     l908:
  1538     05F2  3001               	movlw	1
  1539     05F3                     u405:
  1540     05F3  1003               	clrc
  1541     05F4  0CF1               	rrf	___lwmod@divisor+1,f
  1542     05F5  0CF0               	rrf	___lwmod@divisor,f
  1543     05F6  3EFF               	addlw	-1
  1544     05F7  1D03               	skipz
  1545     05F8  2DF3               	goto	u405
  1546     05F9                     l910:
  1547     05F9  3001               	movlw	1
  1548     05FA  02F4               	subwf	___lwmod@counter,f
  1549     05FB  1D03               	btfss	3,2
  1550     05FC  2DFE               	goto	u411
  1551     05FD  2DFF               	goto	u410
  1552     05FE                     u411:
  1553     05FE  2DE2               	goto	l904
  1554     05FF                     u410:
  1555     05FF                     l912:
  1556     05FF  0873               	movf	___lwmod@dividend+1,w
  1557     0600  00F1               	movwf	?___lwmod+1
  1558     0601  0872               	movf	___lwmod@dividend,w
  1559     0602  00F0               	movwf	?___lwmod
  1560     0603                     l454:
  1561     0603  0008               	return
  1562     0604                     __end_of___lwmod:
  1563                           
  1564                           	psect	text9
  1565     0604                     __ptext9:	
  1566 ;; *************** function ___lwdiv *****************
  1567 ;; Defined at:
  1568 ;;		line 5 in file "C:\Program Files\Microchip\xc8\v2.50\pic\sources\c99\common\lwdiv.c"
  1569 ;; Parameters:    Size  Location     Type
  1570 ;;  divisor         2    0[COMMON] unsigned int 
  1571 ;;  dividend        2    2[COMMON] unsigned int 
  1572 ;; Auto vars:     Size  Location     Type
  1573 ;;  quotient        2    4[COMMON] unsigned int 
  1574 ;;  counter         1    6[COMMON] unsigned char 
  1575 ;; Return value:  Size  Location     Type
  1576 ;;                  2    0[COMMON] unsigned int 
  1577 ;; Registers used:
  1578 ;;		wreg, status,2, status,0
  1579 ;; Tracked objects:
  1580 ;;		On entry : 0/0
  1581 ;;		On exit  : 0/0
  1582 ;;		Unchanged: 0/0
  1583 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1584 ;;      Params:         4       0       0       0       0
  1585 ;;      Locals:         3       0       0       0       0
  1586 ;;      Temps:          0       0       0       0       0
  1587 ;;      Totals:         7       0       0       0       0
  1588 ;;Total ram usage:        7 bytes
  1589 ;; Hardware stack levels used: 1
  1590 ;; This function calls:
  1591 ;;		Nothing
  1592 ;; This function is called by:
  1593 ;;		_vfpfcnvrt
  1594 ;; This function uses a non-reentrant model
  1595 ;;
  1596                           
  1597     0604                     ___lwdiv:	
  1598                           ;psect for function ___lwdiv
  1599                           
  1600     0604                     l868:	
  1601                           ;incstack = 0
  1602                           ; Regs used in ___lwdiv: [wreg+status,2+status,0]
  1603                           
  1604     0604  01F4               	clrf	___lwdiv@quotient
  1605     0605  01F5               	clrf	___lwdiv@quotient+1
  1606     0606                     l870:
  1607     0606  0870               	movf	___lwdiv@divisor,w
  1608     0607  0471               	iorwf	___lwdiv@divisor+1,w
  1609     0608  1903               	btfsc	3,2
  1610     0609  2E0B               	goto	u291
  1611     060A  2E0C               	goto	u290
  1612     060B                     u291:
  1613     060B  2E41               	goto	l890
  1614     060C                     u290:
  1615     060C                     l872:
  1616     060C  3001               	movlw	1
  1617     060D  00F6               	movwf	___lwdiv@counter
  1618     060E  2E18               	goto	l878
  1619     060F                     l874:
  1620     060F  3001               	movlw	1
  1621     0610                     u305:
  1622     0610  1003               	clrc
  1623     0611  0DF0               	rlf	___lwdiv@divisor,f
  1624     0612  0DF1               	rlf	___lwdiv@divisor+1,f
  1625     0613  3EFF               	addlw	-1
  1626     0614  1D03               	skipz
  1627     0615  2E10               	goto	u305
  1628     0616                     l876:
  1629     0616  3001               	movlw	1
  1630     0617  07F6               	addwf	___lwdiv@counter,f
  1631     0618                     l878:
  1632     0618  1FF1               	btfss	___lwdiv@divisor+1,7
  1633     0619  2E1B               	goto	u311
  1634     061A  2E1C               	goto	u310
  1635     061B                     u311:
  1636     061B  2E0F               	goto	l874
  1637     061C                     u310:
  1638     061C                     l880:
  1639     061C  3001               	movlw	1
  1640     061D                     u325:
  1641     061D  1003               	clrc
  1642     061E  0DF4               	rlf	___lwdiv@quotient,f
  1643     061F  0DF5               	rlf	___lwdiv@quotient+1,f
  1644     0620  3EFF               	addlw	-1
  1645     0621  1D03               	skipz
  1646     0622  2E1D               	goto	u325
  1647     0623  0871               	movf	___lwdiv@divisor+1,w
  1648     0624  0273               	subwf	___lwdiv@dividend+1,w
  1649     0625  1D03               	skipz
  1650     0626  2E29               	goto	u335
  1651     0627  0870               	movf	___lwdiv@divisor,w
  1652     0628  0272               	subwf	___lwdiv@dividend,w
  1653     0629                     u335:
  1654     0629  1C03               	skipc
  1655     062A  2E2C               	goto	u331
  1656     062B  2E2D               	goto	u330
  1657     062C                     u331:
  1658     062C  2E34               	goto	l886
  1659     062D                     u330:
  1660     062D                     l882:
  1661     062D  0870               	movf	___lwdiv@divisor,w
  1662     062E  02F2               	subwf	___lwdiv@dividend,f
  1663     062F  0871               	movf	___lwdiv@divisor+1,w
  1664     0630  1C03               	skipc
  1665     0631  03F3               	decf	___lwdiv@dividend+1,f
  1666     0632  02F3               	subwf	___lwdiv@dividend+1,f
  1667     0633                     l884:
  1668     0633  1474               	bsf	___lwdiv@quotient,0
  1669     0634                     l886:
  1670     0634  3001               	movlw	1
  1671     0635                     u345:
  1672     0635  1003               	clrc
  1673     0636  0CF1               	rrf	___lwdiv@divisor+1,f
  1674     0637  0CF0               	rrf	___lwdiv@divisor,f
  1675     0638  3EFF               	addlw	-1
  1676     0639  1D03               	skipz
  1677     063A  2E35               	goto	u345
  1678     063B                     l888:
  1679     063B  3001               	movlw	1
  1680     063C  02F6               	subwf	___lwdiv@counter,f
  1681     063D  1D03               	btfss	3,2
  1682     063E  2E40               	goto	u351
  1683     063F  2E41               	goto	u350
  1684     0640                     u351:
  1685     0640  2E1C               	goto	l880
  1686     0641                     u350:
  1687     0641                     l890:
  1688     0641  0875               	movf	___lwdiv@quotient+1,w
  1689     0642  00F1               	movwf	?___lwdiv+1
  1690     0643  0874               	movf	___lwdiv@quotient,w
  1691     0644  00F0               	movwf	?___lwdiv
  1692     0645                     l444:
  1693     0645  0008               	return
  1694     0646                     __end_of___lwdiv:
  1695                           
  1696                           	psect	text10
  1697     0551                     __ptext10:	
  1698 ;; *************** function _ser_init *****************
  1699 ;; Defined at:
  1700 ;;		line 37 in file "main.c"
  1701 ;; Parameters:    Size  Location     Type
  1702 ;;		None
  1703 ;; Auto vars:     Size  Location     Type
  1704 ;;		None
  1705 ;; Return value:  Size  Location     Type
  1706 ;;                  1    wreg      void 
  1707 ;; Registers used:
  1708 ;;		None
  1709 ;; Tracked objects:
  1710 ;;		On entry : 0/0
  1711 ;;		On exit  : 0/0
  1712 ;;		Unchanged: 0/0
  1713 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1714 ;;      Params:         0       0       0       0       0
  1715 ;;      Locals:         0       0       0       0       0
  1716 ;;      Temps:          0       0       0       0       0
  1717 ;;      Totals:         0       0       0       0       0
  1718 ;;Total ram usage:        0 bytes
  1719 ;; Hardware stack levels used: 1
  1720 ;; This function calls:
  1721 ;;		Nothing
  1722 ;; This function is called by:
  1723 ;;		_main
  1724 ;; This function uses a non-reentrant model
  1725 ;;
  1726                           
  1727     0551                     _ser_init:	
  1728                           ;psect for function _ser_init
  1729                           
  1730     0551                     l988:	
  1731                           ;incstack = 0
  1732                           ; Regs used in _ser_init: []
  1733                           
  1734                           
  1735                           ;main.c: 38:     TXSTA = 0x20;
  1736     0551  3020               	movlw	32
  1737     0552  1683               	bsf	3,5	;RP0=1, select bank1
  1738     0553  1303               	bcf	3,6	;RP1=0, select bank1
  1739     0554  0098               	movwf	24	;volatile
  1740                           
  1741                           ;main.c: 39:     RCSTA = 0x90;
  1742     0555  3090               	movlw	144
  1743     0556  1283               	bcf	3,5	;RP0=0, select bank0
  1744     0557  1303               	bcf	3,6	;RP1=0, select bank0
  1745     0558  0098               	movwf	24	;volatile
  1746                           
  1747                           ;main.c: 40:     SPBRG = 31;
  1748     0559  301F               	movlw	31
  1749     055A  1683               	bsf	3,5	;RP0=1, select bank1
  1750     055B  1303               	bcf	3,6	;RP1=0, select bank1
  1751     055C  0099               	movwf	25	;volatile
  1752     055D                     l51:
  1753     055D  0008               	return
  1754     055E                     __end_of_ser_init:
  1755                           
  1756                           	psect	text11
  1757     0545                     __ptext11:	
  1758 ;; *************** function _adc_init *****************
  1759 ;; Defined at:
  1760 ;;		line 42 in file "main.c"
  1761 ;; Parameters:    Size  Location     Type
  1762 ;;		None
  1763 ;; Auto vars:     Size  Location     Type
  1764 ;;		None
  1765 ;; Return value:  Size  Location     Type
  1766 ;;                  1    wreg      void 
  1767 ;; Registers used:
  1768 ;;		None
  1769 ;; Tracked objects:
  1770 ;;		On entry : 0/0
  1771 ;;		On exit  : 0/0
  1772 ;;		Unchanged: 0/0
  1773 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1774 ;;      Params:         0       0       0       0       0
  1775 ;;      Locals:         0       0       0       0       0
  1776 ;;      Temps:          0       0       0       0       0
  1777 ;;      Totals:         0       0       0       0       0
  1778 ;;Total ram usage:        0 bytes
  1779 ;; Hardware stack levels used: 1
  1780 ;; This function calls:
  1781 ;;		Nothing
  1782 ;; This function is called by:
  1783 ;;		_main
  1784 ;; This function uses a non-reentrant model
  1785 ;;
  1786                           
  1787     0545                     _adc_init:	
  1788                           ;psect for function _adc_init
  1789                           
  1790     0545                     l990:	
  1791                           ;incstack = 0
  1792                           ; Regs used in _adc_init: []
  1793                           
  1794                           
  1795                           ;main.c: 43:     TRISAbits.TRISA0 = 1;
  1796     0545  1683               	bsf	3,5	;RP0=1, select bank1
  1797     0546  1303               	bcf	3,6	;RP1=0, select bank1
  1798     0547  1405               	bsf	5,0	;volatile
  1799                           
  1800                           ;main.c: 44:     ADCON0 = 0x41;
  1801     0548  3041               	movlw	65
  1802     0549  1283               	bcf	3,5	;RP0=0, select bank0
  1803     054A  1303               	bcf	3,6	;RP1=0, select bank0
  1804     054B  009F               	movwf	31	;volatile
  1805                           
  1806                           ;main.c: 45:     ADCON1 = 0x80;
  1807     054C  3080               	movlw	128
  1808     054D  1683               	bsf	3,5	;RP0=1, select bank1
  1809     054E  1303               	bcf	3,6	;RP1=0, select bank1
  1810     054F  009F               	movwf	31	;volatile
  1811     0550                     l54:
  1812     0550  0008               	return
  1813     0551                     __end_of_adc_init:
  1814                           
  1815                           	psect	text12
  1816     055E                     __ptext12:	
  1817 ;; *************** function _adc *****************
  1818 ;; Defined at:
  1819 ;;		line 60 in file "main.c"
  1820 ;; Parameters:    Size  Location     Type
  1821 ;;		None
  1822 ;; Auto vars:     Size  Location     Type
  1823 ;;  adcvalue        2    2[COMMON] unsigned int 
  1824 ;; Return value:  Size  Location     Type
  1825 ;;                  2    0[COMMON] unsigned int 
  1826 ;; Registers used:
  1827 ;;		wreg
  1828 ;; Tracked objects:
  1829 ;;		On entry : 0/0
  1830 ;;		On exit  : 0/0
  1831 ;;		Unchanged: 0/0
  1832 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1833 ;;      Params:         2       0       0       0       0
  1834 ;;      Locals:         2       0       0       0       0
  1835 ;;      Temps:          0       0       0       0       0
  1836 ;;      Totals:         4       0       0       0       0
  1837 ;;Total ram usage:        4 bytes
  1838 ;; Hardware stack levels used: 1
  1839 ;; This function calls:
  1840 ;;		Nothing
  1841 ;; This function is called by:
  1842 ;;		_main
  1843 ;; This function uses a non-reentrant model
  1844 ;;
  1845                           
  1846     055E                     _adc:	
  1847                           ;psect for function _adc
  1848                           
  1849     055E                     l992:	
  1850                           ;incstack = 0
  1851                           ; Regs used in _adc: [wreg]
  1852                           
  1853                           
  1854                           ;main.c: 62:     unsigned int adcvalue;;main.c: 63:     ADCON0bits.GO_nDONE = 1;
  1855     055E  1283               	bcf	3,5	;RP0=0, select bank0
  1856     055F  1303               	bcf	3,6	;RP1=0, select bank0
  1857     0560  151F               	bsf	31,2	;volatile
  1858     0561                     l75:	
  1859                           ;main.c: 65:     while(ADCON0bits.GO_nDONE);
  1860                           
  1861     0561  191F               	btfsc	31,2	;volatile
  1862     0562  2D64               	goto	u541
  1863     0563  2D65               	goto	u540
  1864     0564                     u541:
  1865     0564  2D61               	goto	l75
  1866     0565                     u540:
  1867     0565                     l994:
  1868                           
  1869                           ;main.c: 66:     adcvalue = (ADRESH<<8)|(ADRESL);
  1870     0565  081E               	movf	30,w	;volatile
  1871     0566  00F3               	movwf	adc@adcvalue+1
  1872     0567  1683               	bsf	3,5	;RP0=1, select bank1
  1873     0568  1303               	bcf	3,6	;RP1=0, select bank1
  1874     0569  081E               	movf	30,w	;volatile
  1875     056A  00F2               	movwf	adc@adcvalue
  1876                           
  1877                           ;main.c: 67:     return adcvalue;
  1878     056B  0873               	movf	adc@adcvalue+1,w
  1879     056C  00F1               	movwf	?_adc+1
  1880     056D  0872               	movf	adc@adcvalue,w
  1881     056E  00F0               	movwf	?_adc
  1882     056F                     l78:
  1883     056F  0008               	return
  1884     0570                     __end_of_adc:
  1885     0002                     ___latbits      equ	2
  1886     007E                     btemp           set	126	;btemp
  1887     007E                     wtemp0          set	126
  1888                           
  1889                           	psect	config
  1890                           
  1891                           ;Config register CONFIG @ 0x2007
  1892                           ;	Oscillator Selection bits
  1893                           ;	FOSC = HS, HS oscillator
  1894                           ;	Watchdog Timer Enable bit
  1895                           ;	WDTE = OFF, WDT disabled
  1896                           ;	Power-up Timer Enable bit
  1897                           ;	PWRTE = OFF, PWRT disabled
  1898                           ;	Brown-out Reset Enable bit
  1899                           ;	BOREN = ON, BOR enabled
  1900                           ;	Low-Voltage (Single-Supply) In-Circuit Serial Programming Enable bit
  1901                           ;	LVP = OFF, RB3 is digital I/O, HV on MCLR must be used for programming
  1902                           ;	Data EEPROM Memory Code Protection bit
  1903                           ;	CPD = OFF, Data EEPROM code protection off
  1904                           ;	Flash Program Memory Write Enable bits
  1905                           ;	WRT = OFF, Write protection off; all program memory may be written to by EECON control
  1906                           ;	In-Circuit Debugger Mode bit
  1907                           ;	DEBUG = OFF, In-Circuit Debugger disabled, RB6 and RB7 are general purpose I/O pins
  1908                           ;	Flash Program Memory Code Protection bit
  1909                           ;	CP = OFF, Code protection off
  1910     2007                     	org	8199
  1911     2007  3F7A               	dw	16250

Data Sizes:
    Strings     14
    Constant    0
    Data        0
    BSS         37
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14     14      14
    BANK0            80     58      63
    BANK1            80      0      32
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    f$.$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    f$.$source	PTR const unsigned char  size(1) Largest target is 0

    fputc@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    fputc@fp$.$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    fputc@fp$.$source	PTR const unsigned char  size(1) Largest target is 0

    S599$buffer	PTR unsigned char  size(2) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    S599$source	PTR const unsigned char  size(1) Largest target is 0

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(BANK0[2]), 

    sprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[14]), 

    sprintf@s	PTR unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    txstr@a	PTR unsigned char  size(1) Largest target is 20
		 -> main@buffer(BANK0[20]), 

    vfpfcnvrt@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfpfcnvrt@cp	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[14]), 

    vfpfcnvrt@fmt	PTR PTR unsigned char  size(1) Largest target is 1
		 -> vfprintf@cfmt(COMMON[1]), 

    vfpfcnvrt@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 

    vfprintf@ap	PTR PTR void  size(1) Largest target is 1
		 -> sprintf@ap(BANK0[1]), 

    vfprintf@cfmt	PTR unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[14]), 

    vfprintf@fmt	PTR const unsigned char  size(1) Largest target is 14
		 -> STR_1(CODE[14]), 

    vfprintf@fp	PTR struct _IO_FILE size(2) Largest target is 11
		 -> sprintf@f(BANK0[11]), 


Critical Paths under _main in COMMON

    _txstr->_tx
    _sprintf->_vfprintf
    _vfpfcnvrt->_fputc

Critical Paths under _main in BANK0

    _main->_sprintf
    _sprintf->_vfprintf
    _vfprintf->_vfpfcnvrt

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                25    25      0    1529
                                             33 BANK0     25    25      0
                                _adc
                           _adc_init
                           _ser_init
                            _sprintf
                                 _tx
                              _txstr
 ---------------------------------------------------------------------------------
 (1) _txstr                                                1     0      1      75
                                              1 COMMON     1     0      1
                                 _tx
 ---------------------------------------------------------------------------------
 (2) _tx                                                   1     1      0      29
                                              0 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             19    15      4    1329
                                             16 BANK0     17    13      4
                           _vfprintf
 ---------------------------------------------------------------------------------
 (2) _vfprintf                                             5     1      4    1128
                                             13 COMMON     1     1      0
                                             12 BANK0      4     0      4
                          _vfpfcnvrt
 ---------------------------------------------------------------------------------
 (3) _vfpfcnvrt                                           13     9      4    1003
                                              0 BANK0     12     8      4
                            ___lwdiv
                            ___lwmod
                              _fputc
 ---------------------------------------------------------------------------------
 (4) _fputc                                               13     9      4     230
                                              0 COMMON    13     9      4
                              _putch
 ---------------------------------------------------------------------------------
 (5) _putch                                                1     1      0       0
 ---------------------------------------------------------------------------------
 (4) ___lwmod                                              5     1      4     161
                                              0 COMMON     5     1      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     164
                                              0 COMMON     7     3      4
 ---------------------------------------------------------------------------------
 (1) _ser_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc_init                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _adc                                                  4     2      2      23
                                              0 COMMON     4     2      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _adc
   _adc_init
   _ser_init
   _sprintf
     _vfprintf
       _vfpfcnvrt
         ___lwdiv
         ___lwmod
         _fputc
           _putch
   _tx
   _txstr
     _tx

Address spaces:
Name               Size   Autos  Total    Usage
BITCOMMON           14      0       0      0.0%
BITBANK0            80      0       0      0.0%
BITBANK1            80      0       0      0.0%
BITBANK3            96      0       0      0.0%
BITBANK2            96      0       0      0.0%
COMMON              14     14      14    100.0%
BANK0               80     58      63     78.8%
BANK1               80      0      32     40.0%
BANK3               96      0       0      0.0%
BANK2               96      0       0      0.0%
STACK                0      0       0      0.0%
DATA                 0      0     109      0.0%


Microchip Technology PIC Macro Assembler V2.50 build 20240725155939 
Symbol Table                                                                                   Fri Nov 22 18:15:15 2024

                      pc 0002                       l51 055D                       l60 0544  
                     l54 0550                       l72 0583                       l57 053C  
                     l75 0561                       l78 056F                       _tx 053B  
                     fsr 0004                      l444 0645                      l454 0603  
                    l627 05A6                      l900 05DC                      ?_tx 0070  
                    l910 05F9                      l902 05DE                      l671 05CB  
                    l904 05E2                      l912 05FF                      l920 069A  
                    l664 07EB                      l656 0768                      l906 05EC  
                    l922 06A1                      l930 0728                      l683 0727  
                    l908 05F2                      l924 06B9                      l916 068E  
                    l940 0748                      l932 0738                      l870 0606  
                    l694 0532                      l926 06EB                      l918 0694  
                    l950 0795                      l942 0754                      l934 073C  
                    l880 061C                      l872 060C                      l952 079B  
                    l944 0762                      l936 0740                      l882 062D  
                    l874 060F                      l890 0641                      l954 07A1  
                    l946 076A                      l962 07C0                      l938 0744  
                    l884 0633                      l876 0616                      l868 0604  
                    l956 07B5                      l948 0780                      l964 07CB  
                    l980 05AC                      l990 0545                      l886 0634  
                    l878 0618                      l894 05CC                      l958 07B9  
                    l982 05BB                      l974 053C                      l992 055E  
                    l888 063B                      l896 05D2                      l968 07D2  
                    l984 05C7                      l976 0542                      l994 0565  
                    l898 05D5                      l978 05A7                      l988 0551  
                    l998 0584                      u310 061C                      u311 061B  
                    u305 0610                      u330 062D                      u410 05FF  
                    u331 062C                      u411 05FE                      u420 0694  
                    u500 07A0                      u325 061D                      u405 05F3  
                    u421 0693                      u501 079F                      u350 0641  
                    u430 069A                      u510 07BF                      u351 0640  
                    u335 0629                      u431 0699                      u511 07BE  
                    u360 05D2                      u440 06B9                      u520 0542  
                    u345 0635                      u361 05D1                      u441 06B8  
                    u521 0541                      u290 060C                      u450 06EB  
                    u530 05C7                      u291 060B                      u451 06EA  
                    u531 05C6                      u540 0565                      u380 05E2  
                    u460 070C                      u541 0564                      u381 05E1  
                    u390 05EC                      u470 0738                      u550 0583  
                    u391 05EB                      u375 05D6                      u455 06E7  
                    u471 0737                      u551 0582                      u480 0754  
                    u481 0753                      u490 079B                      u395 05E8  
                    u491 079A                      u567 0683                      _adc 055E  
                    fsr0 0004                      indf 0000                      tx@a 0070  
                   ??_tx 0070                     ?_adc 0070                     l1000 0588  
                   l1002 058C                     l1004 058E                     l1012 0570  
                   l1020 0646                     l1006 0590                     l1014 0571  
                   l1030 0675                     l1022 0650                     l1008 059D  
                   l1016 0579                     l1032 067B                     l1024 065B  
                   l1018 057B                     l1026 0668                     l1028 066F  
                   STR_1 0009                     _RCIF 0065                     _TXIF 0064  
                   _dbuf 00A0                     _main 0646                     _prec 005C  
                   btemp 007E                     start 0000             main@adcvalue 0058  
                  ??_adc 0072                    ?_main 0070          __end_of___lwdiv 0646  
        __end_of___lwmod 0604                    _RCREG 001A                    _RCSTA 0018  
           vfpfcnvrt@fmt 0022                    _SPBRG 0099                    _TXREG 0019  
                  _TXSTA 0098                    _flags 005E                    _fputc 068E  
                  _width 005A                    _putch 0532                    _txstr 0570  
                  pclath 000A                    status 0003                    wtemp0 007E  
        __end_of_sprintf 05A7          __initialization 07EC             __end_of_main 068E  
                 ??_main 0041                   _ADCON0 001F                   _ADCON1 009F  
                 ?_fputc 0070                   _ADRESH 001E                   _ADRESL 009E  
                 ?_putch 0070                   ?_txstr 0071         __end_of_adc_init 0551  
           vfprintf@cfmt 007D                ??___lwdiv 0074                ??___lwmod 0074  
                 fputc@c 0070         __end_of_ser_init 055E                   putch@c 0070  
       __end_of_vfprintf 05CC                ??_sprintf 0034                   txstr@a 0071  
__end_of__initialization 07FC           __pcstackCOMMON 0070            __end_of_fputc 0728  
          __end_of_putch 0533            __end_of_txstr 0584               __end_of_tx 0545  
                ??_fputc 0074                  ??_putch 0070                  ??_txstr 0072  
             __pbssBANK0 005A               __pbssBANK1 00A0               __pmaintext 0646  
              ?_adc_init 0070               __stringtab 0003                ?_ser_init 0070  
                ___lwdiv 0604                  ___lwmod 05CC                ?_vfprintf 002C  
             ??_adc_init 0070                  __ptext1 0570                  __ptext2 053B  
                __ptext3 0584                  __ptext4 05A7                  __ptext5 0728  
                __ptext6 068E                  __ptext7 0532                  __ptext8 05CC  
                __ptext9 0604                  _sprintf 0584                  clrloop0 0534  
   end_of_initialization 07FC                  fputc@fp 0072               ??_ser_init 0070  
      __end_of_vfpfcnvrt 07EC         vfpfcnvrt@convarg 0026               ??_vfprintf 007D  
              _TRISAbits 0085              adc@adcvalue 0072               main@buffer 0044  
            vfpfcnvrt@ap 0023              vfpfcnvrt@cp 002A              vfpfcnvrt@fp 0020  
    start_initialization 07EC              __end_of_adc 0570              vfprintf@fmt 002E  
              ___latbits 0002            __pcstackBANK0 0020         ___lwdiv@dividend 0072  
               ?___lwdiv 0070                 ?___lwmod 0070                __pstrings 0003  
       ___lwdiv@quotient 0074                 ?_sprintf 0030                clear_ram0 0533  
              _vfpfcnvrt 0728               _ADCON0bits 001F              __stringbase 0008  
             vfpfcnvrt@c 002B               vfprintf@ap 002F               vfprintf@fp 002C  
             ?_vfpfcnvrt 0020       __end_of__stringtab 0009                 _adc_init 0545  
             sprintf@fmt 0031          ___lwdiv@divisor 0070          ___lwdiv@counter 0076  
               __ptext10 0551                 __ptext11 0545                 __ptext12 055E  
               _ser_init 0551                 _vfprintf 05A7                sprintf@ap 0035  
       ___lwmod@dividend 0072                stringcode 0003              ??_vfpfcnvrt 0024  
               sprintf@f 0036                 sprintf@s 0030          ___lwmod@divisor 0070  
        ___lwmod@counter 0074                 stringdir 0003                 stringtab 0003  
